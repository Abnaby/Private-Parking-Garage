
ECU2_Dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004844  08004844  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004844  08004844  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004844  08004844  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004844  08004844  00014844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800484c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000084  080048d0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  080048d0  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034bd  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000dd8  00000000  00000000  0002356a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001fd8  00000000  00000000  00024342  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004d0  00000000  00000000  00026320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000440  00000000  00000000  000267f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001610  00000000  00000000  00026c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002529  00000000  00000000  00028240  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00006cfe  00000000  00000000  0002a769  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031467  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011e0  00000000  00000000  000314e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000084 	.word	0x20000084
 800014c:	00000000 	.word	0x00000000
 8000150:	080043f8 	.word	0x080043f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000088 	.word	0x20000088
 800016c:	080043f8 	.word	0x080043f8

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <xDelay>:
/******************************************************************************
* private Callbacks Definitions
*******************************************************************************/

void xDelay(u32 time)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	u32 i;
	u32 j;
	for(i = time;i > 0;i--)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e00b      	b.n	8000972 <xDelay+0x26>
		for(j = 10;j > 0;j--);
 800095a:	230a      	movs	r3, #10
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	e002      	b.n	8000966 <xDelay+0x1a>
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	3b01      	subs	r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f9      	bne.n	8000960 <xDelay+0x14>
	for(i = time;i > 0;i--)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3b01      	subs	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1f0      	bne.n	800095a <xDelay+0xe>
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
	...

08000984 <ECU1_Callback>:

#define _delay_ms(ms) xDelay(ms)


static void ECU1_Callback(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
#if _APP_DEBUG_ == 1
	// LCD_voidClear(&myLCD);
	//LCD_voidSendString(&myLCD, addString("Ana ECU1 Ya Bro"));
#endif

	u16 LOC_u8TxBuffer = MASTER_ACK ;
 800098a:	232b      	movs	r3, #43	; 0x2b
 800098c:	833b      	strh	r3, [r7, #24]
	u16 LOC_u8RxBuffer = 0 ;
 800098e:	2300      	movs	r3, #0
 8000990:	82fb      	strh	r3, [r7, #22]
	u8 LOC_u8userName[NAME_MAX_SIZE+1] = {0} ;
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	f8c3 2007 	str.w	r2, [r3, #7]
	u8 LOC_u8ID[ID_SIZE+1] = {0} ;
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]

	u8 LOC_u8Counter = 0 ,LOC_u8NameCounter = 0 ,LOC_u8IDCounter = 0 ;
 80009a8:	2300      	movs	r3, #0
 80009aa:	77fb      	strb	r3, [r7, #31]
 80009ac:	2300      	movs	r3, #0
 80009ae:	77bb      	strb	r3, [r7, #30]
 80009b0:	2300      	movs	r3, #0
 80009b2:	777b      	strb	r3, [r7, #29]

	// Make Slave Pin Low to initiate transaction
	GPIO_voidSetPinValue(SPI1_PORT_PIN, LOW);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2104      	movs	r1, #4
 80009b8:	2002      	movs	r0, #2
 80009ba:	f002 fd29 	bl	8003410 <GPIO_voidSetPinValue>
	// Send Master NACK
	SPI_voidSend_RecieveDataSynch(SPI_1, NULL , &LOC_u8RxBuffer);
 80009be:	f107 0316 	add.w	r3, r7, #22
 80009c2:	461a      	mov	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	2000      	movs	r0, #0
 80009c8:	f002 ff66 	bl	8003898 <SPI_voidSend_RecieveDataSynch>
	// Send Master Ack
	do
	{
		SPI_voidSend_RecieveDataSynch(SPI_1, &LOC_u8TxBuffer, &LOC_u8RxBuffer);
 80009cc:	f107 0216 	add.w	r2, r7, #22
 80009d0:	f107 0318 	add.w	r3, r7, #24
 80009d4:	4619      	mov	r1, r3
 80009d6:	2000      	movs	r0, #0
 80009d8:	f002 ff5e 	bl	8003898 <SPI_voidSend_RecieveDataSynch>
#if _APP_DEBUG_ == 1
		//LCD_voidSendChar(&myLCD, LOC_u8RxBuffer) ;
#endif
		if( (LOC_u8RxBuffer >= 'a'  && LOC_u8RxBuffer <= 'z') || (LOC_u8RxBuffer >= 'A'  && LOC_u8RxBuffer <= 'Z') )
 80009dc:	8afb      	ldrh	r3, [r7, #22]
 80009de:	2b60      	cmp	r3, #96	; 0x60
 80009e0:	d902      	bls.n	80009e8 <ECU1_Callback+0x64>
 80009e2:	8afb      	ldrh	r3, [r7, #22]
 80009e4:	2b7a      	cmp	r3, #122	; 0x7a
 80009e6:	d905      	bls.n	80009f4 <ECU1_Callback+0x70>
 80009e8:	8afb      	ldrh	r3, [r7, #22]
 80009ea:	2b40      	cmp	r3, #64	; 0x40
 80009ec:	d90e      	bls.n	8000a0c <ECU1_Callback+0x88>
 80009ee:	8afb      	ldrh	r3, [r7, #22]
 80009f0:	2b5a      	cmp	r3, #90	; 0x5a
 80009f2:	d80b      	bhi.n	8000a0c <ECU1_Callback+0x88>
		{
			// UserName Field
			LOC_u8userName[LOC_u8NameCounter] = LOC_u8RxBuffer ;
 80009f4:	8afa      	ldrh	r2, [r7, #22]
 80009f6:	7fbb      	ldrb	r3, [r7, #30]
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	f107 0120 	add.w	r1, r7, #32
 80009fe:	440b      	add	r3, r1
 8000a00:	f803 2c18 	strb.w	r2, [r3, #-24]
			LOC_u8NameCounter++ ;
 8000a04:	7fbb      	ldrb	r3, [r7, #30]
 8000a06:	3301      	adds	r3, #1
 8000a08:	77bb      	strb	r3, [r7, #30]
 8000a0a:	e010      	b.n	8000a2e <ECU1_Callback+0xaa>
#if _APP_DEBUG_ == 1
		//LCD_voidSendChar(&myLCD, LOC_u8RxBuffer) ;
#endif
		}
		else if (LOC_u8RxBuffer >= '0' && LOC_u8RxBuffer <= '9')
 8000a0c:	8afb      	ldrh	r3, [r7, #22]
 8000a0e:	2b2f      	cmp	r3, #47	; 0x2f
 8000a10:	d90d      	bls.n	8000a2e <ECU1_Callback+0xaa>
 8000a12:	8afb      	ldrh	r3, [r7, #22]
 8000a14:	2b39      	cmp	r3, #57	; 0x39
 8000a16:	d80a      	bhi.n	8000a2e <ECU1_Callback+0xaa>
		{
			// ID Field
			LOC_u8ID[LOC_u8IDCounter] = LOC_u8RxBuffer ;
 8000a18:	8afa      	ldrh	r2, [r7, #22]
 8000a1a:	7f7b      	ldrb	r3, [r7, #29]
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	f107 0120 	add.w	r1, r7, #32
 8000a22:	440b      	add	r3, r1
 8000a24:	f803 2c20 	strb.w	r2, [r3, #-32]
			LOC_u8IDCounter++ ;
 8000a28:	7f7b      	ldrb	r3, [r7, #29]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	777b      	strb	r3, [r7, #29]
		}
		else
		{
			// Invalid
		}
	}while(LOC_u8RxBuffer != VALID_ID_SYMBOL);
 8000a2e:	8afb      	ldrh	r3, [r7, #22]
 8000a30:	2b24      	cmp	r3, #36	; 0x24
 8000a32:	d1cb      	bne.n	80009cc <ECU1_Callback+0x48>
	LOC_u8userName[LOC_u8NameCounter] = '\0';
 8000a34:	7fbb      	ldrb	r3, [r7, #30]
 8000a36:	f107 0220 	add.w	r2, r7, #32
 8000a3a:	4413      	add	r3, r2
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f803 2c18 	strb.w	r2, [r3, #-24]
	LOC_u8ID[LOC_u8IDCounter] ='\0';
 8000a42:	7f7b      	ldrb	r3, [r7, #29]
 8000a44:	f107 0220 	add.w	r2, r7, #32
 8000a48:	4413      	add	r3, r2
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f803 2c20 	strb.w	r2, [r3, #-32]

	// When Come VALID_ID_SYMBOL check username exist or not
	if(Glob_u8NumberOfCurrentUsers == 0 )
 8000a50:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <ECU1_Callback+0x1b8>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10a      	bne.n	8000a6e <ECU1_Callback+0xea>
	{
		// Send invaild
		// NOT_VALID_ID
		LOC_u8TxBuffer = NOT_VALID_ID ;
 8000a58:	2330      	movs	r3, #48	; 0x30
 8000a5a:	833b      	strh	r3, [r7, #24]
		SPI_voidSend_RecieveDataSynch(SPI_1, &LOC_u8TxBuffer, &LOC_u8RxBuffer);
 8000a5c:	f107 0216 	add.w	r2, r7, #22
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	4619      	mov	r1, r3
 8000a66:	2000      	movs	r0, #0
 8000a68:	f002 ff16 	bl	8003898 <SPI_voidSend_RecieveDataSynch>
 8000a6c:	e05c      	b.n	8000b28 <ECU1_Callback+0x1a4>
	}
	else
	{
		/*	Searching	*/
		LOC_u8Counter = 0 ;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	77fb      	strb	r3, [r7, #31]
		u8 LOC_u8Result = 1 ;
 8000a72:	2301      	movs	r3, #1
 8000a74:	773b      	strb	r3, [r7, #28]
		u8 userIdx = 10  ;
 8000a76:	230a      	movs	r3, #10
 8000a78:	76fb      	strb	r3, [r7, #27]
		for(LOC_u8Counter = 0 ; LOC_u8Counter < Glob_u8NumberOfCurrentUsers ; LOC_u8Counter++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	77fb      	strb	r3, [r7, #31]
 8000a7e:	e016      	b.n	8000aae <ECU1_Callback+0x12a>
		{
			// Name Searching
			LOC_u8Result = compTwoStrings(LOC_u8userName, &Glob_u8DriverArr[LOC_u8Counter][0][0]);
 8000a80:	7ffb      	ldrb	r3, [r7, #31]
 8000a82:	2216      	movs	r2, #22
 8000a84:	fb02 f303 	mul.w	r3, r2, r3
 8000a88:	4a2d      	ldr	r2, [pc, #180]	; (8000b40 <ECU1_Callback+0x1bc>)
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fcf0 	bl	8001478 <compTwoStrings>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	773b      	strb	r3, [r7, #28]
			if(LOC_u8Result == 0)
 8000a9c:	7f3b      	ldrb	r3, [r7, #28]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <ECU1_Callback+0x124>
			{
				userIdx = LOC_u8Counter ;
 8000aa2:	7ffb      	ldrb	r3, [r7, #31]
 8000aa4:	76fb      	strb	r3, [r7, #27]
				break ;
 8000aa6:	e007      	b.n	8000ab8 <ECU1_Callback+0x134>
		for(LOC_u8Counter = 0 ; LOC_u8Counter < Glob_u8NumberOfCurrentUsers ; LOC_u8Counter++)
 8000aa8:	7ffb      	ldrb	r3, [r7, #31]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	77fb      	strb	r3, [r7, #31]
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <ECU1_Callback+0x1b8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	7ffa      	ldrb	r2, [r7, #31]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d3e3      	bcc.n	8000a80 <ECU1_Callback+0xfc>
			}

		}
		if(LOC_u8Result == 0 && userIdx <= Glob_u8NumberOfCurrentUsers)
 8000ab8:	7f3b      	ldrb	r3, [r7, #28]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d114      	bne.n	8000ae8 <ECU1_Callback+0x164>
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <ECU1_Callback+0x1b8>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	7efa      	ldrb	r2, [r7, #27]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d80f      	bhi.n	8000ae8 <ECU1_Callback+0x164>
		{
			LOC_u8Result = 1 ;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	773b      	strb	r3, [r7, #28]
			// ID Verify
			LOC_u8Result = compTwoStrings(LOC_u8ID, &Glob_u8DriverArr[userIdx][1][0]);
 8000acc:	7efb      	ldrb	r3, [r7, #27]
 8000ace:	2216      	movs	r2, #22
 8000ad0:	fb02 f303 	mul.w	r3, r2, r3
 8000ad4:	330b      	adds	r3, #11
 8000ad6:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <ECU1_Callback+0x1bc>)
 8000ad8:	441a      	add	r2, r3
 8000ada:	463b      	mov	r3, r7
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fcca 	bl	8001478 <compTwoStrings>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	773b      	strb	r3, [r7, #28]
		}

		if(LOC_u8Result == 0)
 8000ae8:	7f3b      	ldrb	r3, [r7, #28]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10d      	bne.n	8000b0a <ECU1_Callback+0x186>
	//LCD_voidSendString(&myLCD, addString("VALID"));
#endif
			// Valid Name and ID Send VALID_ID
			do
			{
				LOC_u8TxBuffer = VALID_ID ;
 8000aee:	2331      	movs	r3, #49	; 0x31
 8000af0:	833b      	strh	r3, [r7, #24]
				SPI_voidSend_RecieveDataSynch(SPI_1, &LOC_u8TxBuffer, &LOC_u8RxBuffer);
 8000af2:	f107 0216 	add.w	r2, r7, #22
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	4619      	mov	r1, r3
 8000afc:	2000      	movs	r0, #0
 8000afe:	f002 fecb 	bl	8003898 <SPI_voidSend_RecieveDataSynch>
			}while(VALID_ID_SYMBOL == LOC_u8RxBuffer) ;
 8000b02:	8afb      	ldrh	r3, [r7, #22]
 8000b04:	2b24      	cmp	r3, #36	; 0x24
 8000b06:	d0f2      	beq.n	8000aee <ECU1_Callback+0x16a>
 8000b08:	e00e      	b.n	8000b28 <ECU1_Callback+0x1a4>

		}
		else
		{
			// invalid Name and ID Send NOT_VALID_ID
			LOC_u8TxBuffer = NOT_VALID_ID ;
 8000b0a:	2330      	movs	r3, #48	; 0x30
 8000b0c:	833b      	strh	r3, [r7, #24]
			do
			{
				LOC_u8TxBuffer = '0' ;
 8000b0e:	2330      	movs	r3, #48	; 0x30
 8000b10:	833b      	strh	r3, [r7, #24]
				SPI_voidSend_RecieveDataSynch(SPI_1, &LOC_u8TxBuffer, &LOC_u8RxBuffer);
 8000b12:	f107 0216 	add.w	r2, r7, #22
 8000b16:	f107 0318 	add.w	r3, r7, #24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f002 febb 	bl	8003898 <SPI_voidSend_RecieveDataSynch>
			}while(VALID_ID_SYMBOL == LOC_u8RxBuffer) ;
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	2b24      	cmp	r3, #36	; 0x24
 8000b26:	d0f2      	beq.n	8000b0e <ECU1_Callback+0x18a>
		}

	}

	// Make Slave Pin High to end transaction
	GPIO_voidSetPinValue(SPI1_PORT_PIN, HIGH);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f002 fc6f 	bl	8003410 <GPIO_voidSetPinValue>




}
 8000b32:	bf00      	nop
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000168 	.word	0x20000168
 8000b40:	2000016c 	.word	0x2000016c

08000b44 <ECU3_Callback>:
static void ECU3_Callback(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	LCD_voidClear(&myLCD);
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <ECU3_Callback+0x18>)
 8000b4a:	f001 fb52 	bl	80021f2 <LCD_voidClear>
	LCD_voidSendString(&myLCD, addString("Ana ECU3 Ya Bro"));
 8000b4e:	4904      	ldr	r1, [pc, #16]	; (8000b60 <ECU3_Callback+0x1c>)
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <ECU3_Callback+0x18>)
 8000b52:	f001 faed 	bl	8002130 <LCD_voidSendString>

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000a0 	.word	0x200000a0
 8000b60:	08004410 	.word	0x08004410

08000b64 <System_voidFillAdminsData>:
* private Functions Definitions
*******************************************************************************/

/*********************************** START SYSTEM FCN	*************************/
static void System_voidFillAdminsData(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	/*	1st Driver	*/
	Glob_u8AdminArr[0][0][0] = 'M'	;
 8000b68:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000b6a:	224d      	movs	r2, #77	; 0x4d
 8000b6c:	701a      	strb	r2, [r3, #0]
	Glob_u8AdminArr[0][0][1] = 'o'	;
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000b70:	226f      	movs	r2, #111	; 0x6f
 8000b72:	705a      	strb	r2, [r3, #1]
	Glob_u8AdminArr[0][0][2] = 'h'	;
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000b76:	2268      	movs	r2, #104	; 0x68
 8000b78:	709a      	strb	r2, [r3, #2]
	Glob_u8AdminArr[0][0][3] = 'a'	;
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000b7c:	2261      	movs	r2, #97	; 0x61
 8000b7e:	70da      	strb	r2, [r3, #3]
	Glob_u8AdminArr[0][0][4] = 'm'	;
 8000b80:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000b82:	226d      	movs	r2, #109	; 0x6d
 8000b84:	711a      	strb	r2, [r3, #4]
	Glob_u8AdminArr[0][0][5] = 'e'	;
 8000b86:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000b88:	2265      	movs	r2, #101	; 0x65
 8000b8a:	715a      	strb	r2, [r3, #5]
	Glob_u8AdminArr[0][0][6] = 'd'	;
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000b8e:	2264      	movs	r2, #100	; 0x64
 8000b90:	719a      	strb	r2, [r3, #6]
	Glob_u8AdminArr[0][1][7] = '\0'	;
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	749a      	strb	r2, [r3, #18]

	Glob_u8AdminArr[0][1][0] = '0'	;
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000b9a:	2230      	movs	r2, #48	; 0x30
 8000b9c:	72da      	strb	r2, [r3, #11]
	Glob_u8AdminArr[0][1][1] = '0'	;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000ba0:	2230      	movs	r2, #48	; 0x30
 8000ba2:	731a      	strb	r2, [r3, #12]
	Glob_u8AdminArr[0][1][2] = '0'	;
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000ba6:	2230      	movs	r2, #48	; 0x30
 8000ba8:	735a      	strb	r2, [r3, #13]
	Glob_u8AdminArr[0][1][3] = '0'	;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bac:	2230      	movs	r2, #48	; 0x30
 8000bae:	739a      	strb	r2, [r3, #14]
	Glob_u8AdminArr[0][1][4] = '0'	;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bb2:	2230      	movs	r2, #48	; 0x30
 8000bb4:	73da      	strb	r2, [r3, #15]
	Glob_u8AdminArr[0][1][5] = '0'	;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bb8:	2230      	movs	r2, #48	; 0x30
 8000bba:	741a      	strb	r2, [r3, #16]
	Glob_u8AdminArr[0][1][6] = '1'	;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bbe:	2231      	movs	r2, #49	; 0x31
 8000bc0:	745a      	strb	r2, [r3, #17]
	Glob_u8AdminArr[0][1][7] = '\0'	;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	749a      	strb	r2, [r3, #18]

	/*	2nd Driver	*/
	Glob_u8AdminArr[1][0][0] = 'a'	;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bca:	2261      	movs	r2, #97	; 0x61
 8000bcc:	759a      	strb	r2, [r3, #22]
	Glob_u8AdminArr[1][0][1] = 'l'	;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bd0:	226c      	movs	r2, #108	; 0x6c
 8000bd2:	75da      	strb	r2, [r3, #23]
	Glob_u8AdminArr[1][0][2] = 'i'	;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bd6:	2269      	movs	r2, #105	; 0x69
 8000bd8:	761a      	strb	r2, [r3, #24]
	Glob_u8AdminArr[1][0][3] = '\0'	;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	765a      	strb	r2, [r3, #25]

	Glob_u8AdminArr[1][1][0] = '1'	;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000be2:	2231      	movs	r2, #49	; 0x31
 8000be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Glob_u8AdminArr[1][1][1] = '2'	;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bea:	2232      	movs	r2, #50	; 0x32
 8000bec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Glob_u8AdminArr[1][1][2] = '3'	;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bf2:	2233      	movs	r2, #51	; 0x33
 8000bf4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Glob_u8AdminArr[1][1][3] = '4'	;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000bfa:	2234      	movs	r2, #52	; 0x34
 8000bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Glob_u8AdminArr[1][1][4] = '5'	;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000c02:	2235      	movs	r2, #53	; 0x35
 8000c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Glob_u8AdminArr[1][1][5] = '6'	;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000c0a:	2236      	movs	r2, #54	; 0x36
 8000c0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Glob_u8AdminArr[1][1][6] = '7'	;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000c12:	2237      	movs	r2, #55	; 0x37
 8000c14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	Glob_u8AdminArr[1][1][7] = '\0'	;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <System_voidFillAdminsData+0xc4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	2000013c 	.word	0x2000013c

08000c2c <System_voidFillDriverssData>:
static void System_voidFillDriverssData(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	/*	1st Driver	*/
	Glob_u8DriverArr[0][0][0] = 'M'	;
 8000c30:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c32:	224d      	movs	r2, #77	; 0x4d
 8000c34:	701a      	strb	r2, [r3, #0]
	Glob_u8DriverArr[0][0][1] = 'o'	;
 8000c36:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c38:	226f      	movs	r2, #111	; 0x6f
 8000c3a:	705a      	strb	r2, [r3, #1]
	Glob_u8DriverArr[0][0][2] = 'h'	;
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c3e:	2268      	movs	r2, #104	; 0x68
 8000c40:	709a      	strb	r2, [r3, #2]
	Glob_u8DriverArr[0][0][3] = 'a'	;
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c44:	2261      	movs	r2, #97	; 0x61
 8000c46:	70da      	strb	r2, [r3, #3]
	Glob_u8DriverArr[0][0][4] = 'm'	;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c4a:	226d      	movs	r2, #109	; 0x6d
 8000c4c:	711a      	strb	r2, [r3, #4]
	Glob_u8DriverArr[0][0][5] = 'e'	;
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c50:	2265      	movs	r2, #101	; 0x65
 8000c52:	715a      	strb	r2, [r3, #5]
	Glob_u8DriverArr[0][0][6] = 'd'	;
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c56:	2264      	movs	r2, #100	; 0x64
 8000c58:	719a      	strb	r2, [r3, #6]
	Glob_u8DriverArr[0][1][7] = '\0'	;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	749a      	strb	r2, [r3, #18]

	Glob_u8DriverArr[0][1][0] = '0'	;
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c62:	2230      	movs	r2, #48	; 0x30
 8000c64:	72da      	strb	r2, [r3, #11]
	Glob_u8DriverArr[0][1][1] = '0'	;
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c68:	2230      	movs	r2, #48	; 0x30
 8000c6a:	731a      	strb	r2, [r3, #12]
	Glob_u8DriverArr[0][1][2] = '0'	;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c6e:	2230      	movs	r2, #48	; 0x30
 8000c70:	735a      	strb	r2, [r3, #13]
	Glob_u8DriverArr[0][1][3] = '0'	;
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c74:	2230      	movs	r2, #48	; 0x30
 8000c76:	739a      	strb	r2, [r3, #14]
	Glob_u8DriverArr[0][1][4] = '0'	;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c7a:	2230      	movs	r2, #48	; 0x30
 8000c7c:	73da      	strb	r2, [r3, #15]
	Glob_u8DriverArr[0][1][5] = '0'	;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c80:	2230      	movs	r2, #48	; 0x30
 8000c82:	741a      	strb	r2, [r3, #16]
	Glob_u8DriverArr[0][1][6] = '1'	;
 8000c84:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c86:	2231      	movs	r2, #49	; 0x31
 8000c88:	745a      	strb	r2, [r3, #17]
	Glob_u8DriverArr[0][1][7] = '\0'	;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	749a      	strb	r2, [r3, #18]

	/*	2nd Driver	*/
	Glob_u8DriverArr[1][0][0] = 'a'	;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c92:	2261      	movs	r2, #97	; 0x61
 8000c94:	759a      	strb	r2, [r3, #22]
	Glob_u8DriverArr[1][0][1] = 'l'	;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c98:	226c      	movs	r2, #108	; 0x6c
 8000c9a:	75da      	strb	r2, [r3, #23]
	Glob_u8DriverArr[1][0][2] = 'i'	;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000c9e:	2269      	movs	r2, #105	; 0x69
 8000ca0:	761a      	strb	r2, [r3, #24]
	Glob_u8DriverArr[1][0][3] = '\0'	;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	765a      	strb	r2, [r3, #25]

	Glob_u8DriverArr[1][1][0] = '1'	;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000caa:	2231      	movs	r2, #49	; 0x31
 8000cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Glob_u8DriverArr[1][1][1] = '2'	;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000cb2:	2232      	movs	r2, #50	; 0x32
 8000cb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Glob_u8DriverArr[1][1][2] = '3'	;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000cba:	2233      	movs	r2, #51	; 0x33
 8000cbc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Glob_u8DriverArr[1][1][3] = '4'	;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000cc2:	2234      	movs	r2, #52	; 0x34
 8000cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Glob_u8DriverArr[1][1][4] = '5'	;
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000cca:	2235      	movs	r2, #53	; 0x35
 8000ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Glob_u8DriverArr[1][1][5] = '6'	;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000cd2:	2236      	movs	r2, #54	; 0x36
 8000cd4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Glob_u8DriverArr[1][1][6] = '7'	;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000cda:	2237      	movs	r2, #55	; 0x37
 8000cdc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	Glob_u8DriverArr[1][1][7] = '\0'	;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <System_voidFillDriverssData+0xcc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	// Data
	Glob_u8NumberOfCurrentUsers = 2 ;
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <System_voidFillDriverssData+0xd0>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	701a      	strb	r2, [r3, #0]

}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	2000016c 	.word	0x2000016c
 8000cfc:	20000168 	.word	0x20000168

08000d00 <System_u8ValidateAdminData>:

static u8 System_u8ValidateAdminData(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
	u16 LOC_u8ReceivedData = 0 , LOC_u8Counter = 0 ;
 8000d06:	2300      	movs	r3, #0
 8000d08:	837b      	strh	r3, [r7, #26]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	83fb      	strh	r3, [r7, #30]
	u8 LOC_u8userName[NAME_MAX_SIZE+1] = {0} ;
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	f8c3 2007 	str.w	r2, [r3, #7]
	u8 LOC_u8Password[ID_SIZE+1] = {0} ;
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
	u8 LOC_u8Flag = 0 ;
 8000d24:	2300      	movs	r3, #0
 8000d26:	777b      	strb	r3, [r7, #29]

	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8000d28:	210c      	movs	r1, #12
 8000d2a:	4871      	ldr	r0, [pc, #452]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000d2c:	f001 fa1d 	bl	800216a <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8000d30:	486f      	ldr	r0, [pc, #444]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000d32:	f001 fa5e 	bl	80021f2 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("Admin Username"));
 8000d36:	496f      	ldr	r1, [pc, #444]	; (8000ef4 <System_u8ValidateAdminData+0x1f4>)
 8000d38:	486d      	ldr	r0, [pc, #436]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000d3a:	f001 f9f9 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2100      	movs	r1, #0
 8000d42:	486b      	ldr	r0, [pc, #428]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000d44:	f001 fa20 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8000d48:	210f      	movs	r1, #15
 8000d4a:	4869      	ldr	r0, [pc, #420]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000d4c:	f001 fa0d 	bl	800216a <LCD_voidSetCursorType>

	/*	Get User Name By USART	*/
	do
	{
		USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8000d50:	f107 031a 	add.w	r3, r7, #26
 8000d54:	4619      	mov	r1, r3
 8000d56:	2000      	movs	r0, #0
 8000d58:	f002 ffc0 	bl	8003cdc <USART_voidReceiveDataSynch>
		USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8000d5c:	f107 031a 	add.w	r3, r7, #26
 8000d60:	4619      	mov	r1, r3
 8000d62:	2000      	movs	r0, #0
 8000d64:	f002 ff62 	bl	8003c2c <USART_voidSendDataSynch>
		LOC_u8userName[LOC_u8Counter] = (u8)LOC_u8ReceivedData;
 8000d68:	8b7a      	ldrh	r2, [r7, #26]
 8000d6a:	8bfb      	ldrh	r3, [r7, #30]
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	f107 0120 	add.w	r1, r7, #32
 8000d72:	440b      	add	r3, r1
 8000d74:	f803 2c14 	strb.w	r2, [r3, #-20]
		LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 8000d78:	8b7b      	ldrh	r3, [r7, #26]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	485c      	ldr	r0, [pc, #368]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000d80:	f001 f8f9 	bl	8001f76 <LCD_voidSendChar>
		LOC_u8Counter++ ;
 8000d84:	8bfb      	ldrh	r3, [r7, #30]
 8000d86:	3301      	adds	r3, #1
 8000d88:	83fb      	strh	r3, [r7, #30]
	}
	while((NAME_MAX_SIZE >= LOC_u8Counter) && (UART_TERMINATE_CHAR != LOC_u8ReceivedData));
 8000d8a:	8bfb      	ldrh	r3, [r7, #30]
 8000d8c:	2b0a      	cmp	r3, #10
 8000d8e:	d802      	bhi.n	8000d96 <System_u8ValidateAdminData+0x96>
 8000d90:	8b7b      	ldrh	r3, [r7, #26]
 8000d92:	2b0d      	cmp	r3, #13
 8000d94:	d1dc      	bne.n	8000d50 <System_u8ValidateAdminData+0x50>
	LOC_u8userName[LOC_u8Counter-1] = '\0';
 8000d96:	8bfb      	ldrh	r3, [r7, #30]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	f107 0220 	add.w	r2, r7, #32
 8000d9e:	4413      	add	r3, r2
 8000da0:	2200      	movs	r2, #0
 8000da2:	f803 2c14 	strb.w	r2, [r3, #-20]
	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8000da6:	210c      	movs	r1, #12
 8000da8:	4851      	ldr	r0, [pc, #324]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000daa:	f001 f9de 	bl	800216a <LCD_voidSetCursorType>
	LCD_voidGotoXY(&myLCD,0,2);
 8000dae:	2202      	movs	r2, #2
 8000db0:	2100      	movs	r1, #0
 8000db2:	484f      	ldr	r0, [pc, #316]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000db4:	f001 f9e8 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("Admin Password"));
 8000db8:	494f      	ldr	r1, [pc, #316]	; (8000ef8 <System_u8ValidateAdminData+0x1f8>)
 8000dba:	484d      	ldr	r0, [pc, #308]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000dbc:	f001 f9b8 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,3);
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	484a      	ldr	r0, [pc, #296]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000dc6:	f001 f9df 	bl	8002188 <LCD_voidGotoXY>
	LOC_u8Counter = 0 ;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	83fb      	strh	r3, [r7, #30]
	/*	Get Password By USART	*/
	LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8000dce:	210f      	movs	r1, #15
 8000dd0:	4847      	ldr	r0, [pc, #284]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000dd2:	f001 f9ca 	bl	800216a <LCD_voidSetCursorType>
	do
	{
		USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8000dd6:	f107 031a 	add.w	r3, r7, #26
 8000dda:	4619      	mov	r1, r3
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f002 ff7d 	bl	8003cdc <USART_voidReceiveDataSynch>
		USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8000de2:	f107 031a 	add.w	r3, r7, #26
 8000de6:	4619      	mov	r1, r3
 8000de8:	2000      	movs	r0, #0
 8000dea:	f002 ff1f 	bl	8003c2c <USART_voidSendDataSynch>
		LOC_u8Password[LOC_u8Counter] = (u8)LOC_u8ReceivedData;
 8000dee:	8b7a      	ldrh	r2, [r7, #26]
 8000df0:	8bfb      	ldrh	r3, [r7, #30]
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	f107 0120 	add.w	r1, r7, #32
 8000df8:	440b      	add	r3, r1
 8000dfa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		LCD_voidSendChar(&myLCD, '*' );
 8000dfe:	212a      	movs	r1, #42	; 0x2a
 8000e00:	483b      	ldr	r0, [pc, #236]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000e02:	f001 f8b8 	bl	8001f76 <LCD_voidSendChar>

		LOC_u8Counter++ ;
 8000e06:	8bfb      	ldrh	r3, [r7, #30]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	83fb      	strh	r3, [r7, #30]

	}
	while((ID_SIZE >= LOC_u8Counter) && (UART_TERMINATE_CHAR != LOC_u8ReceivedData));
 8000e0c:	8bfb      	ldrh	r3, [r7, #30]
 8000e0e:	2b07      	cmp	r3, #7
 8000e10:	d802      	bhi.n	8000e18 <System_u8ValidateAdminData+0x118>
 8000e12:	8b7b      	ldrh	r3, [r7, #26]
 8000e14:	2b0d      	cmp	r3, #13
 8000e16:	d1de      	bne.n	8000dd6 <System_u8ValidateAdminData+0xd6>
	LOC_u8Password[LOC_u8Counter-1] = '\0' ;
 8000e18:	8bfb      	ldrh	r3, [r7, #30]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f107 0220 	add.w	r2, r7, #32
 8000e20:	4413      	add	r3, r2
 8000e22:	2200      	movs	r2, #0
 8000e24:	f803 2c1c 	strb.w	r2, [r3, #-28]

	/*	Validate if Exist or not	*/
	if(!(compTwoStrings(LOC_u8userName , &Glob_u8AdminArr[0][0][0])))
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4933      	ldr	r1, [pc, #204]	; (8000efc <System_u8ValidateAdminData+0x1fc>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb22 	bl	8001478 <compTwoStrings>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d135      	bne.n	8000ea6 <System_u8ValidateAdminData+0x1a6>
	{
		// Check password
		if(!(compTwoStrings(LOC_u8Password , &Glob_u8AdminArr[0][1][0])))
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4930      	ldr	r1, [pc, #192]	; (8000f00 <System_u8ValidateAdminData+0x200>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fb1a 	bl	8001478 <compTwoStrings>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10a      	bne.n	8000e60 <System_u8ValidateAdminData+0x160>
		{
			// Valid User Name and password
			LOC_u8Flag = 1 ;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	777b      	strb	r3, [r7, #29]
			Glob_LogginSeesionExpired = 0 ;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <System_u8ValidateAdminData+0x204>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
			USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* SUCCESSFUL LOGIN ****************************** \r\n\0"), '\0');
 8000e54:	2200      	movs	r2, #0
 8000e56:	492c      	ldr	r1, [pc, #176]	; (8000f08 <System_u8ValidateAdminData+0x208>)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f003 f9ff 	bl	800425c <USART_voidSendStringWithDelimiterSynch>
 8000e5e:	e041      	b.n	8000ee4 <System_u8ValidateAdminData+0x1e4>

		}
		else
		{
			// invalid-username
			LCD_voidClear(&myLCD);
 8000e60:	4823      	ldr	r0, [pc, #140]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000e62:	f001 f9c6 	bl	80021f2 <LCD_voidClear>
			LCD_voidGotoXY(&myLCD, 2, 1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000e6c:	f001 f98c 	bl	8002188 <LCD_voidGotoXY>
			LCD_voidSendString(&myLCD, addString("Wrong Admin")) ;
 8000e70:	4926      	ldr	r1, [pc, #152]	; (8000f0c <System_u8ValidateAdminData+0x20c>)
 8000e72:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000e74:	f001 f95c 	bl	8002130 <LCD_voidSendString>
			LCD_voidGotoXY(&myLCD, 4, 2);
 8000e78:	2202      	movs	r2, #2
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	481c      	ldr	r0, [pc, #112]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000e7e:	f001 f983 	bl	8002188 <LCD_voidGotoXY>
			LCD_voidSendString(&myLCD, addString("Password")) ;
 8000e82:	4923      	ldr	r1, [pc, #140]	; (8000f10 <System_u8ValidateAdminData+0x210>)
 8000e84:	481a      	ldr	r0, [pc, #104]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000e86:	f001 f953 	bl	8002130 <LCD_voidSendString>
			_delay_ms(10);
 8000e8a:	200a      	movs	r0, #10
 8000e8c:	f7ff fd5e 	bl	800094c <xDelay>
			LOC_u8Flag = 0 ;
 8000e90:	2300      	movs	r3, #0
 8000e92:	777b      	strb	r3, [r7, #29]
			USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* UNSUCCESSFUL LOGIN ****************************** \r\n\0"), '\0');
 8000e94:	2200      	movs	r2, #0
 8000e96:	491f      	ldr	r1, [pc, #124]	; (8000f14 <System_u8ValidateAdminData+0x214>)
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f003 f9df 	bl	800425c <USART_voidSendStringWithDelimiterSynch>
			Glob_LogginSeesionExpired = 1;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <System_u8ValidateAdminData+0x204>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e01e      	b.n	8000ee4 <System_u8ValidateAdminData+0x1e4>
		}
	}
	else
	{
		// invalid-username
		LCD_voidClear(&myLCD);
 8000ea6:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000ea8:	f001 f9a3 	bl	80021f2 <LCD_voidClear>
		LCD_voidGotoXY(&myLCD, 2, 1);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000eb2:	f001 f969 	bl	8002188 <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD, addString("Wrong Admin")) ;
 8000eb6:	4915      	ldr	r1, [pc, #84]	; (8000f0c <System_u8ValidateAdminData+0x20c>)
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000eba:	f001 f939 	bl	8002130 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD, 6, 2);
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	2106      	movs	r1, #6
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000ec4:	f001 f960 	bl	8002188 <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD, addString("Name")) ;
 8000ec8:	4913      	ldr	r1, [pc, #76]	; (8000f18 <System_u8ValidateAdminData+0x218>)
 8000eca:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <System_u8ValidateAdminData+0x1f0>)
 8000ecc:	f001 f930 	bl	8002130 <LCD_voidSendString>
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* UNSUCCESSFUL LOGIN ****************************** \r\n\0"), '\0');
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4910      	ldr	r1, [pc, #64]	; (8000f14 <System_u8ValidateAdminData+0x214>)
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f003 f9c1 	bl	800425c <USART_voidSendStringWithDelimiterSynch>
		Glob_LogginSeesionExpired = 1;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <System_u8ValidateAdminData+0x204>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
		LOC_u8Flag = 0 ;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	777b      	strb	r3, [r7, #29]
	}

	return LOC_u8Flag ;
 8000ee4:	7f7b      	ldrb	r3, [r7, #29]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000a0 	.word	0x200000a0
 8000ef4:	08004420 	.word	0x08004420
 8000ef8:	08004430 	.word	0x08004430
 8000efc:	2000013c 	.word	0x2000013c
 8000f00:	20000147 	.word	0x20000147
 8000f04:	20000000 	.word	0x20000000
 8000f08:	08004440 	.word	0x08004440
 8000f0c:	0800448c 	.word	0x0800448c
 8000f10:	08004498 	.word	0x08004498
 8000f14:	080044a4 	.word	0x080044a4
 8000f18:	080044f4 	.word	0x080044f4

08000f1c <System_voidAddNewUser>:


static void System_voidAddNewUser(void)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0


	if(MAX_SLOTS_IN_GARAGE > Glob_u8NumberOfCurrentUsers)
 8000f22:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <System_voidAddNewUser+0x1f8>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	f200 80d7 	bhi.w	80010da <System_voidAddNewUser+0x1be>
	{
		u16 LOC_u8ReceivedData = 0 ; u8 LOC_u8ArrayIndex ;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	80bb      	strh	r3, [r7, #4]
		u8 LOC_u8Counter = 0 ;
 8000f30:	2300      	movs	r3, #0
 8000f32:	71bb      	strb	r3, [r7, #6]
		// Get Free Array Index
		for(LOC_u8Counter = 0 ; LOC_u8Counter < MAX_SLOTS_IN_GARAGE ; LOC_u8Counter++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	71bb      	strb	r3, [r7, #6]
 8000f38:	e010      	b.n	8000f5c <System_voidAddNewUser+0x40>
		{
			if(Glob_u8DriverFreeIndex[LOC_u8Counter] == 1)
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	4a76      	ldr	r2, [pc, #472]	; (8001118 <System_voidAddNewUser+0x1fc>)
 8000f3e:	5cd3      	ldrb	r3, [r2, r3]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <System_voidAddNewUser+0x3a>
			{
				LOC_u8ArrayIndex = LOC_u8Counter;
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	71fb      	strb	r3, [r7, #7]
				Glob_u8DriverFreeIndex[LOC_u8Counter] = 0 ;
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	4a73      	ldr	r2, [pc, #460]	; (8001118 <System_voidAddNewUser+0x1fc>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	54d1      	strb	r1, [r2, r3]
				LOC_u8Counter = 0 ;
 8000f50:	2300      	movs	r3, #0
 8000f52:	71bb      	strb	r3, [r7, #6]
				break ;
 8000f54:	e005      	b.n	8000f62 <System_voidAddNewUser+0x46>
		for(LOC_u8Counter = 0 ; LOC_u8Counter < MAX_SLOTS_IN_GARAGE ; LOC_u8Counter++)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	71bb      	strb	r3, [r7, #6]
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d9eb      	bls.n	8000f3a <System_voidAddNewUser+0x1e>
			}
		}
		// Can Add new Driver
		LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8000f62:	210c      	movs	r1, #12
 8000f64:	486d      	ldr	r0, [pc, #436]	; (800111c <System_voidAddNewUser+0x200>)
 8000f66:	f001 f900 	bl	800216a <LCD_voidSetCursorType>
		LCD_voidClear(&myLCD);
 8000f6a:	486c      	ldr	r0, [pc, #432]	; (800111c <System_voidAddNewUser+0x200>)
 8000f6c:	f001 f941 	bl	80021f2 <LCD_voidClear>
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* Adding Driver Data ****************************** \r\n\0"), '\0');
 8000f70:	2200      	movs	r2, #0
 8000f72:	496b      	ldr	r1, [pc, #428]	; (8001120 <System_voidAddNewUser+0x204>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f003 f971 	bl	800425c <USART_voidSendStringWithDelimiterSynch>

		LCD_voidSendString(&myLCD,addString("Driver Username"));
 8000f7a:	496a      	ldr	r1, [pc, #424]	; (8001124 <System_voidAddNewUser+0x208>)
 8000f7c:	4867      	ldr	r0, [pc, #412]	; (800111c <System_voidAddNewUser+0x200>)
 8000f7e:	f001 f8d7 	bl	8002130 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,0,1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2100      	movs	r1, #0
 8000f86:	4865      	ldr	r0, [pc, #404]	; (800111c <System_voidAddNewUser+0x200>)
 8000f88:	f001 f8fe 	bl	8002188 <LCD_voidGotoXY>
		LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	4863      	ldr	r0, [pc, #396]	; (800111c <System_voidAddNewUser+0x200>)
 8000f90:	f001 f8eb 	bl	800216a <LCD_voidSetCursorType>

		// Take Name
		while((LOC_u8ReceivedData != UART_TERMINATE_CHAR) && LOC_u8Counter <= NAME_MAX_SIZE)
 8000f94:	e02a      	b.n	8000fec <System_voidAddNewUser+0xd0>
		{
			USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f002 fe9e 	bl	8003cdc <USART_voidReceiveDataSynch>

			if((LOC_u8ReceivedData >= 'a'  && LOC_u8ReceivedData <= 'z') || (LOC_u8ReceivedData >= 'A'  && LOC_u8ReceivedData <= 'Z'))
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	2b60      	cmp	r3, #96	; 0x60
 8000fa4:	d902      	bls.n	8000fac <System_voidAddNewUser+0x90>
 8000fa6:	88bb      	ldrh	r3, [r7, #4]
 8000fa8:	2b7a      	cmp	r3, #122	; 0x7a
 8000faa:	d905      	bls.n	8000fb8 <System_voidAddNewUser+0x9c>
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	2b40      	cmp	r3, #64	; 0x40
 8000fb0:	d91c      	bls.n	8000fec <System_voidAddNewUser+0xd0>
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	2b5a      	cmp	r3, #90	; 0x5a
 8000fb6:	d819      	bhi.n	8000fec <System_voidAddNewUser+0xd0>
			{
				USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f002 fe35 	bl	8003c2c <USART_voidSendDataSynch>
				LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4854      	ldr	r0, [pc, #336]	; (800111c <System_voidAddNewUser+0x200>)
 8000fca:	f000 ffd4 	bl	8001f76 <LCD_voidSendChar>
				// Save it on Array
				Glob_u8DriverArr[LOC_u8ArrayIndex][0][LOC_u8Counter] = (u8)LOC_u8ReceivedData ;
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	79fa      	ldrb	r2, [r7, #7]
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	b2cc      	uxtb	r4, r1
 8000fd6:	4954      	ldr	r1, [pc, #336]	; (8001128 <System_voidAddNewUser+0x20c>)
 8000fd8:	2016      	movs	r0, #22
 8000fda:	fb00 f202 	mul.w	r2, r0, r2
 8000fde:	440a      	add	r2, r1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	701a      	strb	r2, [r3, #0]
				LOC_u8Counter++ ;
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	71bb      	strb	r3, [r7, #6]
		while((LOC_u8ReceivedData != UART_TERMINATE_CHAR) && LOC_u8Counter <= NAME_MAX_SIZE)
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	2b0d      	cmp	r3, #13
 8000ff0:	d002      	beq.n	8000ff8 <System_voidAddNewUser+0xdc>
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	2b0a      	cmp	r3, #10
 8000ff6:	d9ce      	bls.n	8000f96 <System_voidAddNewUser+0x7a>
			else
			{
				// Unsupported
			}
		}
		Glob_u8DriverArr[LOC_u8ArrayIndex][0][++LOC_u8Counter] = (u8)'\0' ;
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	71bb      	strb	r3, [r7, #6]
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	4949      	ldr	r1, [pc, #292]	; (8001128 <System_voidAddNewUser+0x20c>)
 8001004:	2016      	movs	r0, #22
 8001006:	fb00 f202 	mul.w	r2, r0, r2
 800100a:	440a      	add	r2, r1
 800100c:	4413      	add	r3, r2
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
		// Take ID
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n\0"), '\0');
 8001012:	2200      	movs	r2, #0
 8001014:	4945      	ldr	r1, [pc, #276]	; (800112c <System_voidAddNewUser+0x210>)
 8001016:	2000      	movs	r0, #0
 8001018:	f003 f920 	bl	800425c <USART_voidSendStringWithDelimiterSynch>

		LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 800101c:	210c      	movs	r1, #12
 800101e:	483f      	ldr	r0, [pc, #252]	; (800111c <System_voidAddNewUser+0x200>)
 8001020:	f001 f8a3 	bl	800216a <LCD_voidSetCursorType>
		LCD_voidGotoXY(&myLCD,0,2);
 8001024:	2202      	movs	r2, #2
 8001026:	2100      	movs	r1, #0
 8001028:	483c      	ldr	r0, [pc, #240]	; (800111c <System_voidAddNewUser+0x200>)
 800102a:	f001 f8ad 	bl	8002188 <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD,addString("Driver ID"));
 800102e:	4940      	ldr	r1, [pc, #256]	; (8001130 <System_voidAddNewUser+0x214>)
 8001030:	483a      	ldr	r0, [pc, #232]	; (800111c <System_voidAddNewUser+0x200>)
 8001032:	f001 f87d 	bl	8002130 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,0,3);
 8001036:	2203      	movs	r2, #3
 8001038:	2100      	movs	r1, #0
 800103a:	4838      	ldr	r0, [pc, #224]	; (800111c <System_voidAddNewUser+0x200>)
 800103c:	f001 f8a4 	bl	8002188 <LCD_voidGotoXY>
		LOC_u8Counter = 0 ;
 8001040:	2300      	movs	r3, #0
 8001042:	71bb      	strb	r3, [r7, #6]
		LOC_u8ReceivedData = 0 ;
 8001044:	2300      	movs	r3, #0
 8001046:	80bb      	strh	r3, [r7, #4]

		LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8001048:	210f      	movs	r1, #15
 800104a:	4834      	ldr	r0, [pc, #208]	; (800111c <System_voidAddNewUser+0x200>)
 800104c:	f001 f88d 	bl	800216a <LCD_voidSetCursorType>

		do
		{
			USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	2000      	movs	r0, #0
 8001056:	f002 fe41 	bl	8003cdc <USART_voidReceiveDataSynch>
			if((LOC_u8ReceivedData >= '0'  && LOC_u8ReceivedData <= '9'))
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	2b2f      	cmp	r3, #47	; 0x2f
 800105e:	d91d      	bls.n	800109c <System_voidAddNewUser+0x180>
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	2b39      	cmp	r3, #57	; 0x39
 8001064:	d81a      	bhi.n	800109c <System_voidAddNewUser+0x180>
			{
				USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	2000      	movs	r0, #0
 800106c:	f002 fdde 	bl	8003c2c <USART_voidSendDataSynch>
				LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 8001070:	88bb      	ldrh	r3, [r7, #4]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	4829      	ldr	r0, [pc, #164]	; (800111c <System_voidAddNewUser+0x200>)
 8001078:	f000 ff7d 	bl	8001f76 <LCD_voidSendChar>
				// Save it on Array
				Glob_u8DriverArr[LOC_u8ArrayIndex][1][LOC_u8Counter] = (u8)LOC_u8ReceivedData ;
 800107c:	88b9      	ldrh	r1, [r7, #4]
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	b2cc      	uxtb	r4, r1
 8001084:	4928      	ldr	r1, [pc, #160]	; (8001128 <System_voidAddNewUser+0x20c>)
 8001086:	2016      	movs	r0, #22
 8001088:	fb00 f202 	mul.w	r2, r0, r2
 800108c:	440a      	add	r2, r1
 800108e:	4413      	add	r3, r2
 8001090:	330b      	adds	r3, #11
 8001092:	4622      	mov	r2, r4
 8001094:	701a      	strb	r2, [r3, #0]
				LOC_u8Counter++ ;
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	3301      	adds	r3, #1
 800109a:	71bb      	strb	r3, [r7, #6]
			else
			{
				// Unsupported
			}
		}
		while((ID_SIZE >= LOC_u8Counter) && (UART_TERMINATE_CHAR != LOC_u8ReceivedData));
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	2b07      	cmp	r3, #7
 80010a0:	d802      	bhi.n	80010a8 <System_voidAddNewUser+0x18c>
 80010a2:	88bb      	ldrh	r3, [r7, #4]
 80010a4:	2b0d      	cmp	r3, #13
 80010a6:	d1d3      	bne.n	8001050 <System_voidAddNewUser+0x134>
		Glob_u8DriverArr[LOC_u8ArrayIndex][1][LOC_u8Counter] = '\0' ;
 80010a8:	79fa      	ldrb	r2, [r7, #7]
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	491e      	ldr	r1, [pc, #120]	; (8001128 <System_voidAddNewUser+0x20c>)
 80010ae:	2016      	movs	r0, #22
 80010b0:	fb00 f202 	mul.w	r2, r0, r2
 80010b4:	440a      	add	r2, r1
 80010b6:	4413      	add	r3, r2
 80010b8:	330b      	adds	r3, #11
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]


		Glob_u8NumberOfCurrentUsers++ ;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <System_voidAddNewUser+0x1f8>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <System_voidAddNewUser+0x1f8>)
 80010c8:	701a      	strb	r2, [r3, #0]
		USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* DONE ****************************** \r\n\0"), '\0');
 80010ca:	2200      	movs	r2, #0
 80010cc:	4919      	ldr	r1, [pc, #100]	; (8001134 <System_voidAddNewUser+0x218>)
 80010ce:	2000      	movs	r0, #0
 80010d0:	f003 f8c4 	bl	800425c <USART_voidSendStringWithDelimiterSynch>
		LCD_AddDriver();
 80010d4:	f000 fc18 	bl	8001908 <LCD_AddDriver>
		LCD_voidMainScreen();
	}



}
 80010d8:	e018      	b.n	800110c <System_voidAddNewUser+0x1f0>
		LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 80010da:	210c      	movs	r1, #12
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <System_voidAddNewUser+0x200>)
 80010de:	f001 f844 	bl	800216a <LCD_voidSetCursorType>
		LCD_voidClear(&myLCD);
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <System_voidAddNewUser+0x200>)
 80010e4:	f001 f885 	bl	80021f2 <LCD_voidClear>
		LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 80010e8:	4913      	ldr	r1, [pc, #76]	; (8001138 <System_voidAddNewUser+0x21c>)
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <System_voidAddNewUser+0x200>)
 80010ec:	f001 f820 	bl	8002130 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,2,1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2102      	movs	r1, #2
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <System_voidAddNewUser+0x200>)
 80010f6:	f001 f847 	bl	8002188 <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD,addString("FULL CAPACITY"));
 80010fa:	4910      	ldr	r1, [pc, #64]	; (800113c <System_voidAddNewUser+0x220>)
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <System_voidAddNewUser+0x200>)
 80010fe:	f001 f817 	bl	8002130 <LCD_voidSendString>
		_delay_ms(200);
 8001102:	20c8      	movs	r0, #200	; 0xc8
 8001104:	f7ff fc22 	bl	800094c <xDelay>
		LCD_voidMainScreen();
 8001108:	f000 fb50 	bl	80017ac <LCD_voidMainScreen>
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	20000168 	.word	0x20000168
 8001118:	20000004 	.word	0x20000004
 800111c:	200000a0 	.word	0x200000a0
 8001120:	080044fc 	.word	0x080044fc
 8001124:	0800454c 	.word	0x0800454c
 8001128:	2000016c 	.word	0x2000016c
 800112c:	0800455c 	.word	0x0800455c
 8001130:	08004560 	.word	0x08004560
 8001134:	0800456c 	.word	0x0800456c
 8001138:	080045ac 	.word	0x080045ac
 800113c:	080045bc 	.word	0x080045bc

08001140 <System_VoidDeleteUser>:
static void System_VoidDeleteUser(DeletingDrivers_t copy_DeleteType)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]

	if(Glob_u8NumberOfCurrentUsers != 0)
 800114a:	4bbd      	ldr	r3, [pc, #756]	; (8001440 <System_VoidDeleteUser+0x300>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 814f 	beq.w	80013f2 <System_VoidDeleteUser+0x2b2>
	{
		u8 LOC_u8Counter = 0 ;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(copy_DeleteType == DELT_ONE_DRIVER)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	f040 812b 	bne.w	80013b8 <System_VoidDeleteUser+0x278>
		{
			// Search For Users
			LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8001162:	210c      	movs	r1, #12
 8001164:	48b7      	ldr	r0, [pc, #732]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001166:	f001 f800 	bl	800216a <LCD_voidSetCursorType>
			LCD_voidClear(&myLCD);
 800116a:	48b6      	ldr	r0, [pc, #728]	; (8001444 <System_VoidDeleteUser+0x304>)
 800116c:	f001 f841 	bl	80021f2 <LCD_voidClear>
			USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* Delete Driver ****************************** \r\n\0"), '\0');
 8001170:	2200      	movs	r2, #0
 8001172:	49b5      	ldr	r1, [pc, #724]	; (8001448 <System_VoidDeleteUser+0x308>)
 8001174:	2000      	movs	r0, #0
 8001176:	f003 f871 	bl	800425c <USART_voidSendStringWithDelimiterSynch>

			LCD_voidSendString(&myLCD,addString("Driver Username"));
 800117a:	49b4      	ldr	r1, [pc, #720]	; (800144c <System_VoidDeleteUser+0x30c>)
 800117c:	48b1      	ldr	r0, [pc, #708]	; (8001444 <System_VoidDeleteUser+0x304>)
 800117e:	f000 ffd7 	bl	8002130 <LCD_voidSendString>
			LCD_voidGotoXY(&myLCD,0,1);
 8001182:	2201      	movs	r2, #1
 8001184:	2100      	movs	r1, #0
 8001186:	48af      	ldr	r0, [pc, #700]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001188:	f000 fffe 	bl	8002188 <LCD_voidGotoXY>
			LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 800118c:	210f      	movs	r1, #15
 800118e:	48ad      	ldr	r0, [pc, #692]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001190:	f000 ffeb 	bl	800216a <LCD_voidSetCursorType>

			u8 LOC_u8username[NAME_MAX_SIZE+1];
			u8 LOC_u8ID[ID_SIZE+1];
			u16 LOC_u8ReceivedData = 0 ;
 8001194:	2300      	movs	r3, #0
 8001196:	81fb      	strh	r3, [r7, #14]

			// Take Name
			while((LOC_u8ReceivedData != UART_TERMINATE_CHAR) && LOC_u8Counter <= NAME_MAX_SIZE)
 8001198:	e02b      	b.n	80011f2 <System_VoidDeleteUser+0xb2>
			{
				USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 800119a:	f107 030e 	add.w	r3, r7, #14
 800119e:	4619      	mov	r1, r3
 80011a0:	2000      	movs	r0, #0
 80011a2:	f002 fd9b 	bl	8003cdc <USART_voidReceiveDataSynch>

				if((LOC_u8ReceivedData >= 'a'  && LOC_u8ReceivedData <= 'z') || (LOC_u8ReceivedData >= 'A'  && LOC_u8ReceivedData <= 'Z'))
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	2b60      	cmp	r3, #96	; 0x60
 80011aa:	d902      	bls.n	80011b2 <System_VoidDeleteUser+0x72>
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	2b7a      	cmp	r3, #122	; 0x7a
 80011b0:	d905      	bls.n	80011be <System_VoidDeleteUser+0x7e>
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	2b40      	cmp	r3, #64	; 0x40
 80011b6:	d91c      	bls.n	80011f2 <System_VoidDeleteUser+0xb2>
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	2b5a      	cmp	r3, #90	; 0x5a
 80011bc:	d819      	bhi.n	80011f2 <System_VoidDeleteUser+0xb2>
				{
					USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 80011be:	f107 030e 	add.w	r3, r7, #14
 80011c2:	4619      	mov	r1, r3
 80011c4:	2000      	movs	r0, #0
 80011c6:	f002 fd31 	bl	8003c2c <USART_voidSendDataSynch>
					LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	489c      	ldr	r0, [pc, #624]	; (8001444 <System_VoidDeleteUser+0x304>)
 80011d2:	f000 fed0 	bl	8001f76 <LCD_voidSendChar>
					// Save it on Array
					LOC_u8username[LOC_u8Counter] = (u8)LOC_u8ReceivedData ;
 80011d6:	89fa      	ldrh	r2, [r7, #14]
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011e2:	440b      	add	r3, r1
 80011e4:	f803 2c10 	strb.w	r2, [r3, #-16]
					LOC_u8Counter++ ;
 80011e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ec:	3301      	adds	r3, #1
 80011ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			while((LOC_u8ReceivedData != UART_TERMINATE_CHAR) && LOC_u8Counter <= NAME_MAX_SIZE)
 80011f2:	89fb      	ldrh	r3, [r7, #14]
 80011f4:	2b0d      	cmp	r3, #13
 80011f6:	d003      	beq.n	8001200 <System_VoidDeleteUser+0xc0>
 80011f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011fc:	2b0a      	cmp	r3, #10
 80011fe:	d9cc      	bls.n	800119a <System_VoidDeleteUser+0x5a>
				{
					// Unsupported
				}
			}

			LOC_u8username[LOC_u8Counter] = (u8)'\0' ;
 8001200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001204:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001208:	4413      	add	r3, r2
 800120a:	2200      	movs	r2, #0
 800120c:	f803 2c10 	strb.w	r2, [r3, #-16]
			LOC_u8ReceivedData = 0 ;
 8001210:	2300      	movs	r3, #0
 8001212:	81fb      	strh	r3, [r7, #14]
			LOC_u8Counter = 0 ;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n\0"), '\0');
 800121a:	2200      	movs	r2, #0
 800121c:	498c      	ldr	r1, [pc, #560]	; (8001450 <System_VoidDeleteUser+0x310>)
 800121e:	2000      	movs	r0, #0
 8001220:	f003 f81c 	bl	800425c <USART_voidSendStringWithDelimiterSynch>

			LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 8001224:	210c      	movs	r1, #12
 8001226:	4887      	ldr	r0, [pc, #540]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001228:	f000 ff9f 	bl	800216a <LCD_voidSetCursorType>
			LCD_voidGotoXY(&myLCD,0,2);
 800122c:	2202      	movs	r2, #2
 800122e:	2100      	movs	r1, #0
 8001230:	4884      	ldr	r0, [pc, #528]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001232:	f000 ffa9 	bl	8002188 <LCD_voidGotoXY>
			LCD_voidSendString(&myLCD,addString("Driver ID"));
 8001236:	4987      	ldr	r1, [pc, #540]	; (8001454 <System_VoidDeleteUser+0x314>)
 8001238:	4882      	ldr	r0, [pc, #520]	; (8001444 <System_VoidDeleteUser+0x304>)
 800123a:	f000 ff79 	bl	8002130 <LCD_voidSendString>
			LCD_voidGotoXY(&myLCD,0,3);
 800123e:	2203      	movs	r2, #3
 8001240:	2100      	movs	r1, #0
 8001242:	4880      	ldr	r0, [pc, #512]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001244:	f000 ffa0 	bl	8002188 <LCD_voidGotoXY>
			LOC_u8Counter = 0 ;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			LOC_u8ReceivedData = 0 ;
 800124e:	2300      	movs	r3, #0
 8001250:	81fb      	strh	r3, [r7, #14]

			LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK) ;
 8001252:	210f      	movs	r1, #15
 8001254:	487b      	ldr	r0, [pc, #492]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001256:	f000 ff88 	bl	800216a <LCD_voidSetCursorType>

			do
			{
				USART_voidReceiveDataSynch(USART_1, &LOC_u8ReceivedData);
 800125a:	f107 030e 	add.w	r3, r7, #14
 800125e:	4619      	mov	r1, r3
 8001260:	2000      	movs	r0, #0
 8001262:	f002 fd3b 	bl	8003cdc <USART_voidReceiveDataSynch>
				if((LOC_u8ReceivedData >= '0'  && LOC_u8ReceivedData <= '9'))
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	2b2f      	cmp	r3, #47	; 0x2f
 800126a:	d91c      	bls.n	80012a6 <System_VoidDeleteUser+0x166>
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	2b39      	cmp	r3, #57	; 0x39
 8001270:	d819      	bhi.n	80012a6 <System_VoidDeleteUser+0x166>
				{
					USART_voidSendDataSynch(USART_1, &LOC_u8ReceivedData);
 8001272:	f107 030e 	add.w	r3, r7, #14
 8001276:	4619      	mov	r1, r3
 8001278:	2000      	movs	r0, #0
 800127a:	f002 fcd7 	bl	8003c2c <USART_voidSendDataSynch>
					LCD_voidSendChar(&myLCD, (u8)LOC_u8ReceivedData );
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	486f      	ldr	r0, [pc, #444]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001286:	f000 fe76 	bl	8001f76 <LCD_voidSendChar>
					// Save it on Array
					LOC_u8ID[LOC_u8Counter] = (u8)LOC_u8ReceivedData ;
 800128a:	89fa      	ldrh	r2, [r7, #14]
 800128c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001296:	440b      	add	r3, r1
 8001298:	f803 2c18 	strb.w	r2, [r3, #-24]
					LOC_u8Counter++ ;
 800129c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a0:	3301      	adds	r3, #1
 80012a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				else
				{
					// Unsupported
				}
			}
			while((ID_SIZE >= LOC_u8Counter) && (UART_TERMINATE_CHAR != LOC_u8ReceivedData));
 80012a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012aa:	2b07      	cmp	r3, #7
 80012ac:	d802      	bhi.n	80012b4 <System_VoidDeleteUser+0x174>
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	2b0d      	cmp	r3, #13
 80012b2:	d1d2      	bne.n	800125a <System_VoidDeleteUser+0x11a>
			LOC_u8ID[LOC_u8Counter] = '\0' ;
 80012b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012bc:	4413      	add	r3, r2
 80012be:	2200      	movs	r2, #0
 80012c0:	f803 2c18 	strb.w	r2, [r3, #-24]

			/*	Searching	*/
			LOC_u8Counter = 0 ;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			u8 LOC_u8Result = 1 ;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			u8 DriverIndex = 10  ;
 80012d0:	230a      	movs	r3, #10
 80012d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			for(LOC_u8Counter = 0 ; LOC_u8Counter < Glob_u8NumberOfCurrentUsers ; LOC_u8Counter++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012dc:	e01d      	b.n	800131a <System_VoidDeleteUser+0x1da>
			{
				// Name Searching
				LOC_u8Result = compTwoStrings(LOC_u8username, &Glob_u8DriverArr[LOC_u8Counter][0][0]);
 80012de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e2:	2216      	movs	r2, #22
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	4a5b      	ldr	r2, [pc, #364]	; (8001458 <System_VoidDeleteUser+0x318>)
 80012ea:	441a      	add	r2, r3
 80012ec:	f107 0318 	add.w	r3, r7, #24
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f8c0 	bl	8001478 <compTwoStrings>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(LOC_u8Result == 0)
 80012fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001302:	2b00      	cmp	r3, #0
 8001304:	d104      	bne.n	8001310 <System_VoidDeleteUser+0x1d0>
				{
					DriverIndex = LOC_u8Counter ;
 8001306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800130a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					break ;
 800130e:	e00a      	b.n	8001326 <System_VoidDeleteUser+0x1e6>
			for(LOC_u8Counter = 0 ; LOC_u8Counter < Glob_u8NumberOfCurrentUsers ; LOC_u8Counter++)
 8001310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001314:	3301      	adds	r3, #1
 8001316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <System_VoidDeleteUser+0x300>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001322:	429a      	cmp	r2, r3
 8001324:	d3db      	bcc.n	80012de <System_VoidDeleteUser+0x19e>
				}

			}
			if(LOC_u8Result == 0 && DriverIndex >= Glob_u8NumberOfCurrentUsers)
 8001326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800132a:	2b00      	cmp	r3, #0
 800132c:	d119      	bne.n	8001362 <System_VoidDeleteUser+0x222>
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <System_VoidDeleteUser+0x300>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001336:	429a      	cmp	r2, r3
 8001338:	d313      	bcc.n	8001362 <System_VoidDeleteUser+0x222>
			{
				LOC_u8Result = 1 ;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				// ID Verify
				LOC_u8Result = compTwoStrings(LOC_u8ID, &Glob_u8DriverArr[DriverIndex][1][0]);
 8001340:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001344:	2216      	movs	r2, #22
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	330b      	adds	r3, #11
 800134c:	4a42      	ldr	r2, [pc, #264]	; (8001458 <System_VoidDeleteUser+0x318>)
 800134e:	441a      	add	r2, r3
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f88e 	bl	8001478 <compTwoStrings>
 800135c:	4603      	mov	r3, r0
 800135e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}

			if(LOC_u8Result == 0)
 8001362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001366:	2b00      	cmp	r3, #0
 8001368:	d112      	bne.n	8001390 <System_VoidDeleteUser+0x250>
			{
				// Valid Name and ID
				Glob_u8DriverFreeIndex[DriverIndex] = 1 ;
 800136a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800136e:	4a3b      	ldr	r2, [pc, #236]	; (800145c <System_VoidDeleteUser+0x31c>)
 8001370:	2101      	movs	r1, #1
 8001372:	54d1      	strb	r1, [r2, r3]
				Glob_u8NumberOfCurrentUsers-- ;
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <System_VoidDeleteUser+0x300>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	3b01      	subs	r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <System_VoidDeleteUser+0x300>)
 800137e:	701a      	strb	r2, [r3, #0]
				USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* SUCCESSFUL ****************************** \r\n\0"), '\0');
 8001380:	2200      	movs	r2, #0
 8001382:	4937      	ldr	r1, [pc, #220]	; (8001460 <System_VoidDeleteUser+0x320>)
 8001384:	2000      	movs	r0, #0
 8001386:	f002 ff69 	bl	800425c <USART_voidSendStringWithDelimiterSynch>
				LCD_voidDeleteDriver();
 800138a:	f000 fadd 	bl	8001948 <LCD_voidDeleteDriver>
		LCD_voidGotoXY(&myLCD,2,2);
		LCD_voidSendString(&myLCD,addString("Drivers Data"));
		_delay_ms(200);
		LCD_voidMainScreen();
	}
}
 800138e:	e052      	b.n	8001436 <System_VoidDeleteUser+0x2f6>
				LCD_voidClear(&myLCD);
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001392:	f000 ff2e 	bl	80021f2 <LCD_voidClear>
				LCD_voidGotoXY(&myLCD, 2, 2) ;
 8001396:	2202      	movs	r2, #2
 8001398:	2102      	movs	r1, #2
 800139a:	482a      	ldr	r0, [pc, #168]	; (8001444 <System_VoidDeleteUser+0x304>)
 800139c:	f000 fef4 	bl	8002188 <LCD_voidGotoXY>
				LCD_voidSendString(&myLCD, addString("UNSUCCESSFUL"));
 80013a0:	4930      	ldr	r1, [pc, #192]	; (8001464 <System_VoidDeleteUser+0x324>)
 80013a2:	4828      	ldr	r0, [pc, #160]	; (8001444 <System_VoidDeleteUser+0x304>)
 80013a4:	f000 fec4 	bl	8002130 <LCD_voidSendString>
				USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* UNSUCCESSFUL ****************************** \r\n\0"), '\0');
 80013a8:	2200      	movs	r2, #0
 80013aa:	492f      	ldr	r1, [pc, #188]	; (8001468 <System_VoidDeleteUser+0x328>)
 80013ac:	2000      	movs	r0, #0
 80013ae:	f002 ff55 	bl	800425c <USART_voidSendStringWithDelimiterSynch>
				LCD_voidMainScreen();
 80013b2:	f000 f9fb 	bl	80017ac <LCD_voidMainScreen>
}
 80013b6:	e03e      	b.n	8001436 <System_VoidDeleteUser+0x2f6>
			for(LOC_u8Counter = 0 ; LOC_u8Counter < MAX_SLOTS_IN_GARAGE ; LOC_u8Counter++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013be:	e009      	b.n	80013d4 <System_VoidDeleteUser+0x294>
				Glob_u8DriverFreeIndex[LOC_u8Counter] = 1 ;
 80013c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c4:	4a25      	ldr	r2, [pc, #148]	; (800145c <System_VoidDeleteUser+0x31c>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	54d1      	strb	r1, [r2, r3]
			for(LOC_u8Counter = 0 ; LOC_u8Counter < MAX_SLOTS_IN_GARAGE ; LOC_u8Counter++)
 80013ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ce:	3301      	adds	r3, #1
 80013d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d9f1      	bls.n	80013c0 <System_VoidDeleteUser+0x280>
			Glob_u8NumberOfCurrentUsers = 0 ;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <System_VoidDeleteUser+0x300>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
			USART_voidSendStringWithDelimiterSynch(USART_1, addString("\r\n********************* SUCCESSFUL ****************************** \r\n\0"), '\0');
 80013e2:	2200      	movs	r2, #0
 80013e4:	491e      	ldr	r1, [pc, #120]	; (8001460 <System_VoidDeleteUser+0x320>)
 80013e6:	2000      	movs	r0, #0
 80013e8:	f002 ff38 	bl	800425c <USART_voidSendStringWithDelimiterSynch>
			LCD_voidDeleteDriver();
 80013ec:	f000 faac 	bl	8001948 <LCD_voidDeleteDriver>
}
 80013f0:	e021      	b.n	8001436 <System_VoidDeleteUser+0x2f6>
		LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 80013f2:	210c      	movs	r1, #12
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <System_VoidDeleteUser+0x304>)
 80013f6:	f000 feb8 	bl	800216a <LCD_voidSetCursorType>
		LCD_voidClear(&myLCD);
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <System_VoidDeleteUser+0x304>)
 80013fc:	f000 fef9 	bl	80021f2 <LCD_voidClear>
		LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 8001400:	491a      	ldr	r1, [pc, #104]	; (800146c <System_VoidDeleteUser+0x32c>)
 8001402:	4810      	ldr	r0, [pc, #64]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001404:	f000 fe94 	bl	8002130 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,2,1);
 8001408:	2201      	movs	r2, #1
 800140a:	2102      	movs	r1, #2
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <System_VoidDeleteUser+0x304>)
 800140e:	f000 febb 	bl	8002188 <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD,addString("No Existence"));
 8001412:	4917      	ldr	r1, [pc, #92]	; (8001470 <System_VoidDeleteUser+0x330>)
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001416:	f000 fe8b 	bl	8002130 <LCD_voidSendString>
		LCD_voidGotoXY(&myLCD,2,2);
 800141a:	2202      	movs	r2, #2
 800141c:	2102      	movs	r1, #2
 800141e:	4809      	ldr	r0, [pc, #36]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001420:	f000 feb2 	bl	8002188 <LCD_voidGotoXY>
		LCD_voidSendString(&myLCD,addString("Drivers Data"));
 8001424:	4913      	ldr	r1, [pc, #76]	; (8001474 <System_VoidDeleteUser+0x334>)
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <System_VoidDeleteUser+0x304>)
 8001428:	f000 fe82 	bl	8002130 <LCD_voidSendString>
		_delay_ms(200);
 800142c:	20c8      	movs	r0, #200	; 0xc8
 800142e:	f7ff fa8d 	bl	800094c <xDelay>
		LCD_voidMainScreen();
 8001432:	f000 f9bb 	bl	80017ac <LCD_voidMainScreen>
}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000168 	.word	0x20000168
 8001444:	200000a0 	.word	0x200000a0
 8001448:	080045cc 	.word	0x080045cc
 800144c:	0800454c 	.word	0x0800454c
 8001450:	0800455c 	.word	0x0800455c
 8001454:	08004560 	.word	0x08004560
 8001458:	2000016c 	.word	0x2000016c
 800145c:	20000004 	.word	0x20000004
 8001460:	08004618 	.word	0x08004618
 8001464:	08004660 	.word	0x08004660
 8001468:	08004670 	.word	0x08004670
 800146c:	080045ac 	.word	0x080045ac
 8001470:	080046b8 	.word	0x080046b8
 8001474:	080046c8 	.word	0x080046c8

08001478 <compTwoStrings>:
/*********************************** END SYSTEM FCN	*************************/

u8 compTwoStrings (u8*string1 , u8*string2)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    u8 LOC_u8Counter=0 ;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
    u8 LOC_u8Flag = 0 ;
 8001486:	2300      	movs	r3, #0
 8001488:	73bb      	strb	r3, [r7, #14]
    while(string1[LOC_u8Counter] != '\0' &&string2[LOC_u8Counter] != '\0')
 800148a:	e00f      	b.n	80014ac <compTwoStrings+0x34>
    {
        if(string1[LOC_u8Counter] != string2[LOC_u8Counter])
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d002      	beq.n	80014a6 <compTwoStrings+0x2e>
        {
            LOC_u8Flag = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73bb      	strb	r3, [r7, #14]
            break;
 80014a4:	e00e      	b.n	80014c4 <compTwoStrings+0x4c>
        }
        LOC_u8Counter++;
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	3301      	adds	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
    while(string1[LOC_u8Counter] != '\0' &&string2[LOC_u8Counter] != '\0')
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <compTwoStrings+0x4c>
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e3      	bne.n	800148c <compTwoStrings+0x14>
    }
    return LOC_u8Flag ;
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <SPI_voidSetup>:

static SPI_config SPI1_Communication ;

static void SPI_voidSetup(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	GPIO_voidSetPinDirection(SPI1_PORT_PIN,GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 80014d4:	2202      	movs	r2, #2
 80014d6:	2104      	movs	r1, #4
 80014d8:	2002      	movs	r0, #2
 80014da:	f001 fed3 	bl	8003284 <GPIO_voidSetPinDirection>
	// Force the Slave Select (HIGH) for idle Mode
	GPIO_voidSetPinValue(SPI1_PORT_PIN, HIGH);
 80014de:	2201      	movs	r2, #1
 80014e0:	2104      	movs	r1, #4
 80014e2:	2002      	movs	r0, #2
 80014e4:	f001 ff94 	bl	8003410 <GPIO_voidSetPinValue>


	SPI1_Communication.SPI_CommMode = SPI_FULL_DOUPLEX ;
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <SPI_voidSetup+0x68>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	805a      	strh	r2, [r3, #2]
	SPI1_Communication.SPI_DataOrder = SPI_MSB_FIRST  ;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <SPI_voidSetup+0x68>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	711a      	strb	r2, [r3, #4]
	SPI1_Communication.SPI_DataSize =SPI_8_BIT_DATA  ;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <SPI_voidSetup+0x68>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	80da      	strh	r2, [r3, #6]
	SPI1_Communication.SPI_IdleLevel = SPI_IDLE_LOW ;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <SPI_voidSetup+0x68>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	721a      	strb	r2, [r3, #8]
	SPI1_Communication.SPI_DataSampling = SPI_LEADING_EDGE ;
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <SPI_voidSetup+0x68>)
 8001502:	2200      	movs	r2, #0
 8001504:	725a      	strb	r2, [r3, #9]
	SPI1_Communication.SPI_BuadRate = SPI_BUAD_PRESCALED_BY_16;
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <SPI_voidSetup+0x68>)
 8001508:	2218      	movs	r2, #24
 800150a:	731a      	strb	r2, [r3, #12]
	SPI1_Communication.SPI_Mode = SPI_MASTER ;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <SPI_voidSetup+0x68>)
 800150e:	2204      	movs	r2, #4
 8001510:	701a      	strb	r2, [r3, #0]
	SPI1_Communication.SPI_IRQ =SPI_IRQ_DISABLED ;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <SPI_voidSetup+0x68>)
 8001514:	2200      	movs	r2, #0
 8001516:	735a      	strb	r2, [r3, #13]
	SPI1_Communication.SPI_SlaveSelectMangment =SPI_SSM_SW_SLAVE_SET ;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <SPI_voidSetup+0x68>)
 800151a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800151e:	815a      	strh	r2, [r3, #10]
	SPI1_Communication.P_IRQ_CallBack = NULL ;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SPI_voidSetup+0x68>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
	SPI_voidInit(SPI_1, &SPI1_Communication) ;
 8001526:	4904      	ldr	r1, [pc, #16]	; (8001538 <SPI_voidSetup+0x68>)
 8001528:	2000      	movs	r0, #0
 800152a:	f002 f933 	bl	8003794 <SPI_voidInit>
	SPI_VoidGPIO_SetPins(SPI_1);
 800152e:	2000      	movs	r0, #0
 8001530:	f002 f9f8 	bl	8003924 <SPI_VoidGPIO_SetPins>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200000a8 	.word	0x200000a8

0800153c <LCD_voidSetup>:

/********************************************** Start of LCD fcn	********************************************************/
static 	USART_Config myUART ;

static void LCD_voidSetup(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	myLCD.LCD_SIZE_Rows = 4 ;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_voidSetup+0x5c>)
 8001542:	2204      	movs	r2, #4
 8001544:	701a      	strb	r2, [r3, #0]
	myLCD.LCD_SIZE_Cols = 16 ;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <LCD_voidSetup+0x5c>)
 8001548:	2210      	movs	r2, #16
 800154a:	705a      	strb	r2, [r3, #1]
	myLCD.LCD_PortPins = LCD_PortPin ;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <LCD_voidSetup+0x5c>)
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <LCD_voidSetup+0x60>)
 8001550:	605a      	str	r2, [r3, #4]
	LCD_voidInit(&myLCD);
 8001552:	4811      	ldr	r0, [pc, #68]	; (8001598 <LCD_voidSetup+0x5c>)
 8001554:	f000 fca9 	bl	8001eaa <LCD_voidInit>
	/* First time	*/
#if _APP_DEBUG_ == 0
	LCD_voidSendString(&myLCD, addString("Welcome"));
 8001558:	4911      	ldr	r1, [pc, #68]	; (80015a0 <LCD_voidSetup+0x64>)
 800155a:	480f      	ldr	r0, [pc, #60]	; (8001598 <LCD_voidSetup+0x5c>)
 800155c:	f000 fde8 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,4,1);
 8001560:	2201      	movs	r2, #1
 8001562:	2104      	movs	r1, #4
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <LCD_voidSetup+0x5c>)
 8001566:	f000 fe0f 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString(" Abnaby Wait"));
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LCD_voidSetup+0x68>)
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <LCD_voidSetup+0x5c>)
 800156e:	f000 fddf 	bl	8002130 <LCD_voidSendString>
	progressBar(&myLCD,100,0);
 8001572:	2200      	movs	r2, #0
 8001574:	2164      	movs	r1, #100	; 0x64
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <LCD_voidSetup+0x5c>)
 8001578:	f000 f84a 	bl	8001610 <progressBar>
	LCD_voidGotoXY(&myLCD,0,0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <LCD_voidSetup+0x5c>)
 8001582:	f000 fe01 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 8001586:	210c      	movs	r1, #12
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <LCD_voidSetup+0x5c>)
 800158a:	f000 fdee 	bl	800216a <LCD_voidSetCursorType>
	/*	Main Screen	*/
	LCD_voidMainScreen();
 800158e:	f000 f90d 	bl	80017ac <LCD_voidMainScreen>
#endif

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000a0 	.word	0x200000a0
 800159c:	20000008 	.word	0x20000008
 80015a0:	080046d8 	.word	0x080046d8
 80015a4:	080046e0 	.word	0x080046e0

080015a8 <UART_voidSetup>:

void UART_voidSetup(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	/*	GPIO	*/
	USART__VoidGPIO_SetPins(USART_1);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f002 fd01 	bl	8003fb4 <USART__VoidGPIO_SetPins>
	/*	UART	*/
	myUART.USART_OperationMode = USART_TRANCIVER ; ;
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <UART_voidSetup+0x60>)
 80015b4:	220c      	movs	r2, #12
 80015b6:	701a      	strb	r2, [r3, #0]
	myUART.USART_BuadRate = 9600 ;
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <UART_voidSetup+0x60>)
 80015ba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015be:	605a      	str	r2, [r3, #4]
	myUART.USART_DataLength = USART_8BIT ;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <UART_voidSetup+0x60>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	811a      	strh	r2, [r3, #8]
	myUART.USART_Parity =USART_DISABLE_PARITY ;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <UART_voidSetup+0x60>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	815a      	strh	r2, [r3, #10]
	myUART.USART_StopBit = USART_1_STOPBIT ;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <UART_voidSetup+0x60>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	819a      	strh	r2, [r3, #12]
	myUART.USART_HWFlowControl = USART_HW_FLOW_CONTROLLED_DISALBED ;
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <UART_voidSetup+0x60>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	81da      	strh	r2, [r3, #14]
	myUART.USART_IdleLevel     =USART_IDLE_LOW ;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <UART_voidSetup+0x60>)
 80015da:	2200      	movs	r2, #0
 80015dc:	821a      	strh	r2, [r3, #16]
	myUART.USART_DataSampling  = USART_LEADING_EDGE ;
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <UART_voidSetup+0x60>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	825a      	strh	r2, [r3, #18]
	myUART.P_IRQ_CallBack = NULL  ;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <UART_voidSetup+0x60>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
	myUART.USART_IRQ_t =  USART_DISABLE_IRQs ;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <UART_voidSetup+0x60>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	82da      	strh	r2, [r3, #22]
	USART_voidInit(USART_1, &myUART);
 80015f0:	4905      	ldr	r1, [pc, #20]	; (8001608 <UART_voidSetup+0x60>)
 80015f2:	2000      	movs	r0, #0
 80015f4:	f002 faa2 	bl	8003b3c <USART_voidInit>
	USART_voidSendStringWithDelimiterSynch(USART_1, addString("********************* ADMIN DASHBOARD ****************************** \r\n\0"), '\0');
 80015f8:	2200      	movs	r2, #0
 80015fa:	4904      	ldr	r1, [pc, #16]	; (800160c <UART_voidSetup+0x64>)
 80015fc:	2000      	movs	r0, #0
 80015fe:	f002 fe2d 	bl	800425c <USART_voidSendStringWithDelimiterSynch>

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200000bc 	.word	0x200000bc
 800160c:	080046f0 	.word	0x080046f0

08001610 <progressBar>:
static void progressBar(LCD_Config *myLCD, u8 prcentage, u16 delayOfBar)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
 800161c:	4613      	mov	r3, r2
 800161e:	803b      	strh	r3, [r7, #0]
	LCD_voidStoreCustomChar(myLCD ,LCD_ProgrssBarChar , 0);
 8001620:	2200      	movs	r2, #0
 8001622:	4914      	ldr	r1, [pc, #80]	; (8001674 <progressBar+0x64>)
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fdf7 	bl	8002218 <LCD_voidStoreCustomChar>
	LCD_voidGotoXY(myLCD,0,2);
 800162a:	2202      	movs	r2, #2
 800162c:	2100      	movs	r1, #0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 fdaa 	bl	8002188 <LCD_voidGotoXY>
	prcentage = (u8)((prcentage * 16 )/100) ;
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <progressBar+0x68>)
 800163a:	fb82 1203 	smull	r1, r2, r2, r3
 800163e:	1152      	asrs	r2, r2, #5
 8001640:	17db      	asrs	r3, r3, #31
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	70fb      	strb	r3, [r7, #3]
	for(int i = 0 ; i < prcentage ; i++)
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e00a      	b.n	8001662 <progressBar+0x52>
	{
		LCD_voidSendChar(myLCD,0);
 800164c:	2100      	movs	r1, #0
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fc91 	bl	8001f76 <LCD_voidSendChar>
		_delay_ms(delayOfBar);
 8001654:	883b      	ldrh	r3, [r7, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff f978 	bl	800094c <xDelay>
	for(int i = 0 ; i < prcentage ; i++)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	429a      	cmp	r2, r3
 8001668:	dbf0      	blt.n	800164c <progressBar+0x3c>
	}

}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000014 	.word	0x20000014
 8001678:	51eb851f 	.word	0x51eb851f

0800167c <DeletingBar>:
static void DeletingBar(LCD_Config *myLCD, u8 prcentage, u16 delayOfBar)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
 8001688:	4613      	mov	r3, r2
 800168a:	803b      	strh	r3, [r7, #0]
	LCD_voidStoreCustomChar(myLCD ,LCD_Deleting , 2);
 800168c:	2202      	movs	r2, #2
 800168e:	491d      	ldr	r1, [pc, #116]	; (8001704 <DeletingBar+0x88>)
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fdc1 	bl	8002218 <LCD_voidStoreCustomChar>
	LCD_voidGotoXY(myLCD,4,1);
 8001696:	2201      	movs	r2, #1
 8001698:	2104      	movs	r1, #4
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fd74 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("Deleting"));
 80016a0:	4919      	ldr	r1, [pc, #100]	; (8001708 <DeletingBar+0x8c>)
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fd44 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(myLCD,0,2);
 80016a8:	2202      	movs	r2, #2
 80016aa:	2100      	movs	r1, #0
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fd6b 	bl	8002188 <LCD_voidGotoXY>
	prcentage = (u8)((prcentage * 16 )/100) ;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <DeletingBar+0x90>)
 80016b8:	fb82 1203 	smull	r1, r2, r2, r3
 80016bc:	1152      	asrs	r2, r2, #5
 80016be:	17db      	asrs	r3, r3, #31
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	70fb      	strb	r3, [r7, #3]
	for(int i = 0 ; i < prcentage ; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e00a      	b.n	80016e0 <DeletingBar+0x64>
	{
		LCD_voidSendChar(myLCD,2);
 80016ca:	2102      	movs	r1, #2
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fc52 	bl	8001f76 <LCD_voidSendChar>
		_delay_ms(delayOfBar);
 80016d2:	883b      	ldrh	r3, [r7, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff f939 	bl	800094c <xDelay>
	for(int i = 0 ; i < prcentage ; i++)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3301      	adds	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf0      	blt.n	80016ca <DeletingBar+0x4e>
	}
	LCD_voidGotoXY(myLCD,6,3);
 80016e8:	2203      	movs	r2, #3
 80016ea:	2106      	movs	r1, #6
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fd4b 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("DONE"));
 80016f2:	4907      	ldr	r1, [pc, #28]	; (8001710 <DeletingBar+0x94>)
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fd1b 	bl	8002130 <LCD_voidSendString>
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000001c 	.word	0x2000001c
 8001708:	0800473c 	.word	0x0800473c
 800170c:	51eb851f 	.word	0x51eb851f
 8001710:	08004748 	.word	0x08004748

08001714 <AddinggBar>:
static void AddinggBar(LCD_Config *myLCD, u8 prcentage, u16 delayOfBar)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
 8001720:	4613      	mov	r3, r2
 8001722:	803b      	strh	r3, [r7, #0]
	LCD_voidStoreCustomChar(myLCD ,LCD_Adding , 4);
 8001724:	2204      	movs	r2, #4
 8001726:	491d      	ldr	r1, [pc, #116]	; (800179c <AddinggBar+0x88>)
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fd75 	bl	8002218 <LCD_voidStoreCustomChar>
	LCD_voidGotoXY(myLCD,5,1);
 800172e:	2201      	movs	r2, #1
 8001730:	2105      	movs	r1, #5
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fd28 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("Adding"));
 8001738:	4919      	ldr	r1, [pc, #100]	; (80017a0 <AddinggBar+0x8c>)
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fcf8 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(myLCD,0,2);
 8001740:	2202      	movs	r2, #2
 8001742:	2100      	movs	r1, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fd1f 	bl	8002188 <LCD_voidGotoXY>
	prcentage = (u8)((prcentage * 16 )/100) ;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <AddinggBar+0x90>)
 8001750:	fb82 1203 	smull	r1, r2, r2, r3
 8001754:	1152      	asrs	r2, r2, #5
 8001756:	17db      	asrs	r3, r3, #31
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0 ; i < prcentage ; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e00a      	b.n	8001778 <AddinggBar+0x64>
	{
		LCD_voidSendChar(myLCD,4);
 8001762:	2104      	movs	r1, #4
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 fc06 	bl	8001f76 <LCD_voidSendChar>
		_delay_ms(delayOfBar);
 800176a:	883b      	ldrh	r3, [r7, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff f8ed 	bl	800094c <xDelay>
	for(int i = 0 ; i < prcentage ; i++)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3301      	adds	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf0      	blt.n	8001762 <AddinggBar+0x4e>
	}
	LCD_voidGotoXY(myLCD,6,3);
 8001780:	2203      	movs	r2, #3
 8001782:	2106      	movs	r1, #6
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fcff 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(myLCD, addString("DONE"));
 800178a:	4907      	ldr	r1, [pc, #28]	; (80017a8 <AddinggBar+0x94>)
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fccf 	bl	8002130 <LCD_voidSendString>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000024 	.word	0x20000024
 80017a0:	08004750 	.word	0x08004750
 80017a4:	51eb851f 	.word	0x51eb851f
 80017a8:	08004748 	.word	0x08004748

080017ac <LCD_voidMainScreen>:

static void LCD_voidMainScreen(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 80017b0:	210c      	movs	r1, #12
 80017b2:	4813      	ldr	r0, [pc, #76]	; (8001800 <LCD_voidMainScreen+0x54>)
 80017b4:	f000 fcd9 	bl	800216a <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 80017b8:	4811      	ldr	r0, [pc, #68]	; (8001800 <LCD_voidMainScreen+0x54>)
 80017ba:	f000 fd1a 	bl	80021f2 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 80017be:	4911      	ldr	r1, [pc, #68]	; (8001804 <LCD_voidMainScreen+0x58>)
 80017c0:	480f      	ldr	r0, [pc, #60]	; (8001800 <LCD_voidMainScreen+0x54>)
 80017c2:	f000 fcb5 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2100      	movs	r1, #0
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <LCD_voidMainScreen+0x54>)
 80017cc:	f000 fcdc 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("Select one of : "));
 80017d0:	490d      	ldr	r1, [pc, #52]	; (8001808 <LCD_voidMainScreen+0x5c>)
 80017d2:	480b      	ldr	r0, [pc, #44]	; (8001800 <LCD_voidMainScreen+0x54>)
 80017d4:	f000 fcac 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,2);
 80017d8:	2202      	movs	r2, #2
 80017da:	2100      	movs	r1, #0
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <LCD_voidMainScreen+0x54>)
 80017de:	f000 fcd3 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("1-Admin Options"));
 80017e2:	490a      	ldr	r1, [pc, #40]	; (800180c <LCD_voidMainScreen+0x60>)
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <LCD_voidMainScreen+0x54>)
 80017e6:	f000 fca3 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,3);
 80017ea:	2203      	movs	r2, #3
 80017ec:	2100      	movs	r1, #0
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <LCD_voidMainScreen+0x54>)
 80017f0:	f000 fcca 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("2-Garage Statues"));
 80017f4:	4906      	ldr	r1, [pc, #24]	; (8001810 <LCD_voidMainScreen+0x64>)
 80017f6:	4802      	ldr	r0, [pc, #8]	; (8001800 <LCD_voidMainScreen+0x54>)
 80017f8:	f000 fc9a 	bl	8002130 <LCD_voidSendString>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200000a0 	.word	0x200000a0
 8001804:	080045ac 	.word	0x080045ac
 8001808:	08004758 	.word	0x08004758
 800180c:	0800476c 	.word	0x0800476c
 8001810:	0800477c 	.word	0x0800477c

08001814 <LCD_voidAdminOptions>:

static void LCD_voidAdminOptions(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 8001818:	210c      	movs	r1, #12
 800181a:	4815      	ldr	r0, [pc, #84]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 800181c:	f000 fca5 	bl	800216a <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8001820:	4813      	ldr	r0, [pc, #76]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 8001822:	f000 fce6 	bl	80021f2 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 8001826:	4913      	ldr	r1, [pc, #76]	; (8001874 <LCD_voidAdminOptions+0x60>)
 8001828:	4811      	ldr	r0, [pc, #68]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 800182a:	f000 fc81 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 800182e:	2201      	movs	r2, #1
 8001830:	2100      	movs	r1, #0
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 8001834:	f000 fca8 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("1- Add Driver"));
 8001838:	490f      	ldr	r1, [pc, #60]	; (8001878 <LCD_voidAdminOptions+0x64>)
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 800183c:	f000 fc78 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,2);
 8001840:	2202      	movs	r2, #2
 8001842:	2100      	movs	r1, #0
 8001844:	480a      	ldr	r0, [pc, #40]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 8001846:	f000 fc9f 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("2- Delete Driver"));
 800184a:	490c      	ldr	r1, [pc, #48]	; (800187c <LCD_voidAdminOptions+0x68>)
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 800184e:	f000 fc6f 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,3);
 8001852:	2203      	movs	r2, #3
 8001854:	2100      	movs	r1, #0
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 8001858:	f000 fc96 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("3- Edit Data"));
 800185c:	4908      	ldr	r1, [pc, #32]	; (8001880 <LCD_voidAdminOptions+0x6c>)
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 8001860:	f000 fc66 	bl	8002130 <LCD_voidSendString>
	LCD_voidSendString(&myLCD,addString("  <B"));
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <LCD_voidAdminOptions+0x70>)
 8001866:	4802      	ldr	r0, [pc, #8]	; (8001870 <LCD_voidAdminOptions+0x5c>)
 8001868:	f000 fc62 	bl	8002130 <LCD_voidSendString>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200000a0 	.word	0x200000a0
 8001874:	080045ac 	.word	0x080045ac
 8001878:	08004790 	.word	0x08004790
 800187c:	080047a0 	.word	0x080047a0
 8001880:	080047b4 	.word	0x080047b4
 8001884:	080047c4 	.word	0x080047c4

08001888 <LCD_voidStatusOptions>:

static void LCD_voidStatusOptions(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF ) ;
 800188c:	210c      	movs	r1, #12
 800188e:	4818      	ldr	r0, [pc, #96]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 8001890:	f000 fc6b 	bl	800216a <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8001894:	4816      	ldr	r0, [pc, #88]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 8001896:	f000 fcac 	bl	80021f2 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 800189a:	4916      	ldr	r1, [pc, #88]	; (80018f4 <LCD_voidStatusOptions+0x6c>)
 800189c:	4814      	ldr	r0, [pc, #80]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 800189e:	f000 fc47 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 80018a2:	2201      	movs	r2, #1
 80018a4:	2100      	movs	r1, #0
 80018a6:	4812      	ldr	r0, [pc, #72]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 80018a8:	f000 fc6e 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("-Available Slots"));
 80018ac:	4912      	ldr	r1, [pc, #72]	; (80018f8 <LCD_voidStatusOptions+0x70>)
 80018ae:	4810      	ldr	r0, [pc, #64]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 80018b0:	f000 fc3e 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,6,2);
 80018b4:	2202      	movs	r2, #2
 80018b6:	2106      	movs	r1, #6
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 80018ba:	f000 fc65 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString(" = "));
 80018be:	490f      	ldr	r1, [pc, #60]	; (80018fc <LCD_voidStatusOptions+0x74>)
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 80018c2:	f000 fc35 	bl	8002130 <LCD_voidSendString>
	LCD_voidSendNumber(&myLCD, Glob_u8NumberOfAvailableSlots) ;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <LCD_voidStatusOptions+0x78>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 80018ce:	f000 fcd4 	bl	800227a <LCD_voidSendNumber>


	LCD_voidGotoXY(&myLCD,11,3);
 80018d2:	2203      	movs	r2, #3
 80018d4:	210b      	movs	r1, #11
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 80018d8:	f000 fc56 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("<BACK"));
 80018dc:	4909      	ldr	r1, [pc, #36]	; (8001904 <LCD_voidStatusOptions+0x7c>)
 80018de:	4804      	ldr	r0, [pc, #16]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 80018e0:	f000 fc26 	bl	8002130 <LCD_voidSendString>
	LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK ) ;
 80018e4:	210f      	movs	r1, #15
 80018e6:	4802      	ldr	r0, [pc, #8]	; (80018f0 <LCD_voidStatusOptions+0x68>)
 80018e8:	f000 fc3f 	bl	800216a <LCD_voidSetCursorType>

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200000a0 	.word	0x200000a0
 80018f4:	080045ac 	.word	0x080045ac
 80018f8:	080047cc 	.word	0x080047cc
 80018fc:	080047e0 	.word	0x080047e0
 8001900:	20000001 	.word	0x20000001
 8001904:	080047e4 	.word	0x080047e4

08001908 <LCD_AddDriver>:



static void LCD_AddDriver(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 800190c:	210c      	movs	r1, #12
 800190e:	480c      	ldr	r0, [pc, #48]	; (8001940 <LCD_AddDriver+0x38>)
 8001910:	f000 fc2b 	bl	800216a <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <LCD_AddDriver+0x38>)
 8001916:	f000 fc6c 	bl	80021f2 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 800191a:	490a      	ldr	r1, [pc, #40]	; (8001944 <LCD_AddDriver+0x3c>)
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <LCD_AddDriver+0x38>)
 800191e:	f000 fc07 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 8001922:	2201      	movs	r2, #1
 8001924:	2100      	movs	r1, #0
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <LCD_AddDriver+0x38>)
 8001928:	f000 fc2e 	bl	8002188 <LCD_voidGotoXY>
	AddinggBar(&myLCD,100,1);
 800192c:	2201      	movs	r2, #1
 800192e:	2164      	movs	r1, #100	; 0x64
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <LCD_AddDriver+0x38>)
 8001932:	f7ff feef 	bl	8001714 <AddinggBar>
	LCD_voidMainScreen();
 8001936:	f7ff ff39 	bl	80017ac <LCD_voidMainScreen>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200000a0 	.word	0x200000a0
 8001944:	080045ac 	.word	0x080045ac

08001948 <LCD_voidDeleteDriver>:

static void LCD_voidDeleteDriver(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 800194c:	210c      	movs	r1, #12
 800194e:	480c      	ldr	r0, [pc, #48]	; (8001980 <LCD_voidDeleteDriver+0x38>)
 8001950:	f000 fc0b 	bl	800216a <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8001954:	480a      	ldr	r0, [pc, #40]	; (8001980 <LCD_voidDeleteDriver+0x38>)
 8001956:	f000 fc4c 	bl	80021f2 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 800195a:	490a      	ldr	r1, [pc, #40]	; (8001984 <LCD_voidDeleteDriver+0x3c>)
 800195c:	4808      	ldr	r0, [pc, #32]	; (8001980 <LCD_voidDeleteDriver+0x38>)
 800195e:	f000 fbe7 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 8001962:	2201      	movs	r2, #1
 8001964:	2100      	movs	r1, #0
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <LCD_voidDeleteDriver+0x38>)
 8001968:	f000 fc0e 	bl	8002188 <LCD_voidGotoXY>
	DeletingBar(&myLCD,100,1);
 800196c:	2201      	movs	r2, #1
 800196e:	2164      	movs	r1, #100	; 0x64
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <LCD_voidDeleteDriver+0x38>)
 8001972:	f7ff fe83 	bl	800167c <DeletingBar>
	LCD_voidMainScreen();
 8001976:	f7ff ff19 	bl	80017ac <LCD_voidMainScreen>

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200000a0 	.word	0x200000a0
 8001984:	080045ac 	.word	0x080045ac

08001988 <LCD_voidDeletingOptions>:
static void LCD_voidDeletingOptions(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	LCD_voidSetCursorType(&myLCD, CURS_OFF) ;
 800198c:	210c      	movs	r1, #12
 800198e:	4815      	ldr	r0, [pc, #84]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 8001990:	f000 fbeb 	bl	800216a <LCD_voidSetCursorType>
	LCD_voidClear(&myLCD);
 8001994:	4813      	ldr	r0, [pc, #76]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 8001996:	f000 fc2c 	bl	80021f2 <LCD_voidClear>
	LCD_voidSendString(&myLCD,addString("PARKING GARAGE"));
 800199a:	4913      	ldr	r1, [pc, #76]	; (80019e8 <LCD_voidDeletingOptions+0x60>)
 800199c:	4811      	ldr	r0, [pc, #68]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 800199e:	f000 fbc7 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2100      	movs	r1, #0
 80019a6:	480f      	ldr	r0, [pc, #60]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 80019a8:	f000 fbee 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("1- Delete Driver"));
 80019ac:	490f      	ldr	r1, [pc, #60]	; (80019ec <LCD_voidDeletingOptions+0x64>)
 80019ae:	480d      	ldr	r0, [pc, #52]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 80019b0:	f000 fbbe 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,0,2);
 80019b4:	2202      	movs	r2, #2
 80019b6:	2100      	movs	r1, #0
 80019b8:	480a      	ldr	r0, [pc, #40]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 80019ba:	f000 fbe5 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("2- Delete All"));
 80019be:	490c      	ldr	r1, [pc, #48]	; (80019f0 <LCD_voidDeletingOptions+0x68>)
 80019c0:	4808      	ldr	r0, [pc, #32]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 80019c2:	f000 fbb5 	bl	8002130 <LCD_voidSendString>
	LCD_voidGotoXY(&myLCD,3,3);
 80019c6:	2203      	movs	r2, #3
 80019c8:	2103      	movs	r1, #3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 80019cc:	f000 fbdc 	bl	8002188 <LCD_voidGotoXY>
	LCD_voidSendString(&myLCD,addString("<MAIN SCREEN"));
 80019d0:	4908      	ldr	r1, [pc, #32]	; (80019f4 <LCD_voidDeletingOptions+0x6c>)
 80019d2:	4804      	ldr	r0, [pc, #16]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 80019d4:	f000 fbac 	bl	8002130 <LCD_voidSendString>
	LCD_voidSetCursorType(&myLCD, CURS_ON_BLINK ) ;
 80019d8:	210f      	movs	r1, #15
 80019da:	4802      	ldr	r0, [pc, #8]	; (80019e4 <LCD_voidDeletingOptions+0x5c>)
 80019dc:	f000 fbc5 	bl	800216a <LCD_voidSetCursorType>
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200000a0 	.word	0x200000a0
 80019e8:	080045ac 	.word	0x080045ac
 80019ec:	080047ec 	.word	0x080047ec
 80019f0:	08004800 	.word	0x08004800
 80019f4:	08004810 	.word	0x08004810

080019f8 <keypad_voidSetup>:

/********************************************** End of LCD fcn	********************************************************/

/********************************************** Start of Keypad fcn	********************************************************/
static void keypad_voidSetup(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	/*	Keypad Init		*/
	myKeypad.NumOfRows = ROWS ;	// Output
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <keypad_voidSetup+0x2c>)
 80019fe:	2204      	movs	r2, #4
 8001a00:	701a      	strb	r2, [r3, #0]
	myKeypad.NumOfCols = COLS ;	//Input
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <keypad_voidSetup+0x2c>)
 8001a04:	2203      	movs	r2, #3
 8001a06:	705a      	strb	r2, [r3, #1]
	myKeypad.Port_Pin_Rows = RowsPins ;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <keypad_voidSetup+0x2c>)
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <keypad_voidSetup+0x30>)
 8001a0c:	605a      	str	r2, [r3, #4]
	myKeypad.Port_Pin_Cols = ColsPins ;
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <keypad_voidSetup+0x2c>)
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <keypad_voidSetup+0x34>)
 8001a12:	609a      	str	r2, [r3, #8]
	myKeypad.KeysPattern = newKeyMap(keys) ;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <keypad_voidSetup+0x2c>)
 8001a16:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <keypad_voidSetup+0x38>)
 8001a18:	60da      	str	r2, [r3, #12]
	HAL_KeyPadInit(&myKeypad);
 8001a1a:	4802      	ldr	r0, [pc, #8]	; (8001a24 <keypad_voidSetup+0x2c>)
 8001a1c:	f000 f92a 	bl	8001c74 <HAL_KeyPadInit>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000012c 	.word	0x2000012c
 8001a28:	20000038 	.word	0x20000038
 8001a2c:	20000040 	.word	0x20000040
 8001a30:	2000002c 	.word	0x2000002c

08001a34 <_7Segnent_voidSetup>:
/********************************************** End of Keypad fcn	********************************************************/

/********************************************** Start of Seven Segment fcn	********************************************************/
static _7Segment_Config mySegment = {COMN_ANODE , _7_SEG_4_PIN_IC } ;
void _7Segnent_voidSetup(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	mySegment._7SegmentMode = _7_SEG_4_PIN_IC ;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	705a      	strb	r2, [r3, #1]
	mySegment._7SegmentType = COMN_ANODE ;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
	/************** Set 7 Segment2 Pins ***********************/
	mySegment._7SegmentPins._7SEG_A_PORT = PORTA ;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a46:	2202      	movs	r2, #2
 8001a48:	709a      	strb	r2, [r3, #2]
	mySegment._7SegmentPins._7SEG_A_PIN  = PIN8;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	70da      	strb	r2, [r3, #3]
	mySegment._7SegmentPins._7SEG_B_PORT = PORTB ;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a52:	2203      	movs	r2, #3
 8001a54:	711a      	strb	r2, [r3, #4]
	mySegment._7SegmentPins._7SEG_B_PIN  = PIN10  ;
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a58:	220a      	movs	r2, #10
 8001a5a:	715a      	strb	r2, [r3, #5]
	mySegment._7SegmentPins._7SEG_C_PORT = PORTB ;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a5e:	2203      	movs	r2, #3
 8001a60:	719a      	strb	r2, [r3, #6]
	mySegment._7SegmentPins._7SEG_C_PIN  = PIN1 ;
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	71da      	strb	r2, [r3, #7]
	mySegment._7SegmentPins._7SEG_D_PORT = PORTA ;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	721a      	strb	r2, [r3, #8]
	mySegment._7SegmentPins._7SEG_D_PIN  = PIN3;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a70:	2203      	movs	r2, #3
 8001a72:	725a      	strb	r2, [r3, #9]

	/************** Set 7 Segment Init ***********************/
	HAL_7SegmentInit(&mySegment);
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a76:	f000 fcfb 	bl	8002470 <HAL_7SegmentInit>
	HAL_7SegmentWriteNumber(&mySegment, Glob_u8NumberOfAvailableSlots);
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <_7Segnent_voidSetup+0x5c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <_7Segnent_voidSetup+0x58>)
 8001a82:	f000 fd63 	bl	800254c <HAL_7SegmentWriteNumber>
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000048 	.word	0x20000048
 8001a90:	20000001 	.word	0x20000001

08001a94 <EXTI_voidSetup>:

/********************************************** End of Seven Segment fcn	********************************************************/
/********************************************** Start of EXTI fcn	********************************************************/
static void EXTI_voidSetup(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	// EXTI0
	NVIC_voidEnableInterrupt(6);
 8001a98:	2006      	movs	r0, #6
 8001a9a:	f001 fdc1 	bl	8003620 <NVIC_voidEnableInterrupt>
	AFIO_voidEXTIConfiguration(EXTI_LINE0, ECU1_EXTI_PORT);
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f001 fad9 	bl	8003058 <AFIO_voidEXTIConfiguration>
	EXTI_voidInitLine(EXTI_LINE0, EXTI_ON_CHANGE);
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f001 fb13 	bl	80030d4 <EXTI_voidInitLine>
	EXTI_voidSetCallBackFCN(EXTI_LINE0, ECU1_Callback);
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <EXTI_voidSetup+0x50>)
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f001 fb7b 	bl	80031ac <EXTI_voidSetCallBackFCN>
	EXTI_voidEnableEXTI(EXTI_LINE0);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f001 fb62 	bl	8003180 <EXTI_voidEnableEXTI>

	// EXTI1
	NVIC_voidEnableInterrupt(7);
 8001abc:	2007      	movs	r0, #7
 8001abe:	f001 fdaf 	bl	8003620 <NVIC_voidEnableInterrupt>
	AFIO_voidEXTIConfiguration(EXTI_LINE1, ECU3_EXTI_PORT);
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f001 fac7 	bl	8003058 <AFIO_voidEXTIConfiguration>
	EXTI_voidInitLine(EXTI_LINE1, EXTI_ON_CHANGE);
 8001aca:	2102      	movs	r1, #2
 8001acc:	2001      	movs	r0, #1
 8001ace:	f001 fb01 	bl	80030d4 <EXTI_voidInitLine>
	EXTI_voidSetCallBackFCN(EXTI_LINE1, ECU3_Callback);
 8001ad2:	4905      	ldr	r1, [pc, #20]	; (8001ae8 <EXTI_voidSetup+0x54>)
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f001 fb69 	bl	80031ac <EXTI_voidSetCallBackFCN>
	EXTI_voidEnableEXTI(EXTI_LINE1);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f001 fb50 	bl	8003180 <EXTI_voidEnableEXTI>





}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	08000985 	.word	0x08000985
 8001ae8:	08000b45 	.word	0x08000b45

08001aec <ECU3_Dashboard_APP_SETUP>:
*******************************************************************************/


/*				MAIN FCNs				*/
void ECU3_Dashboard_APP_SETUP(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	/*			Init MCU Clock			*/
	RCC_voidInitSysClocks();
 8001af0:	f001 fe02 	bl	80036f8 <RCC_voidInitSysClocks>
	RCC_voidEnableClock(RCC_APB2, PORTA);
 8001af4:	2102      	movs	r1, #2
 8001af6:	2002      	movs	r0, #2
 8001af8:	f001 fdbe 	bl	8003678 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2, PORTB);
 8001afc:	2103      	movs	r1, #3
 8001afe:	2002      	movs	r0, #2
 8001b00:	f001 fdba 	bl	8003678 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2,14 );		/*	USART1	*/
 8001b04:	210e      	movs	r1, #14
 8001b06:	2002      	movs	r0, #2
 8001b08:	f001 fdb6 	bl	8003678 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 0 );		/*	AFIO	*/
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f001 fdb2 	bl	8003678 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2,12 );		/*	SPI	*/
 8001b14:	210c      	movs	r1, #12
 8001b16:	2002      	movs	r0, #2
 8001b18:	f001 fdae 	bl	8003678 <RCC_voidEnableClock>
	

	/*			MCAL					*/
	UART_voidSetup();
 8001b1c:	f7ff fd44 	bl	80015a8 <UART_voidSetup>
	EXTI_voidSetup();
 8001b20:	f7ff ffb8 	bl	8001a94 <EXTI_voidSetup>
	SPI_voidSetup() ;
 8001b24:	f7ff fcd4 	bl	80014d0 <SPI_voidSetup>


	/*			HAL					*/
	keypad_voidSetup();
 8001b28:	f7ff ff66 	bl	80019f8 <keypad_voidSetup>
	_7Segnent_voidSetup();
 8001b2c:	f7ff ff82 	bl	8001a34 <_7Segnent_voidSetup>
	LCD_voidSetup();
 8001b30:	f7ff fd04 	bl	800153c <LCD_voidSetup>


	/*			General				*/
	System_voidFillAdminsData();
 8001b34:	f7ff f816 	bl	8000b64 <System_voidFillAdminsData>
	System_voidFillDriverssData();
 8001b38:	f7ff f878 	bl	8000c2c <System_voidFillDriverssData>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <ECU3_Dashboard_APP_LOOP>:

u8 Glob_u8Pressed_Key = KEYPAD_NOT_PRESSED_RETURN ;
void ECU3_Dashboard_APP_LOOP(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0

	do
	{
		Glob_u8Pressed_Key = HAL_KeyPadGetPressedKey(&myKeypad);
 8001b44:	4848      	ldr	r0, [pc, #288]	; (8001c68 <ECU3_Dashboard_APP_LOOP+0x128>)
 8001b46:	f000 f8f5 	bl	8001d34 <HAL_KeyPadGetPressedKey>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001b50:	701a      	strb	r2, [r3, #0]

	}while(!(Glob_u8Pressed_Key>= '1' && Glob_u8Pressed_Key <= '2'));
 8001b52:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b30      	cmp	r3, #48	; 0x30
 8001b58:	d9f4      	bls.n	8001b44 <ECU3_Dashboard_APP_LOOP+0x4>
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b32      	cmp	r3, #50	; 0x32
 8001b60:	d8f0      	bhi.n	8001b44 <ECU3_Dashboard_APP_LOOP+0x4>



	// Get Option
	if((u8)OPTION_ADMIN_SELECT == Glob_u8Pressed_Key)
 8001b62:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b31      	cmp	r3, #49	; 0x31
 8001b68:	d161      	bne.n	8001c2e <ECU3_Dashboard_APP_LOOP+0xee>
	{
		// Validate Admin username and password
		if(Glob_LogginSeesionExpired == 1)
 8001b6a:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <ECU3_Dashboard_APP_LOOP+0x130>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <ECU3_Dashboard_APP_LOOP+0x36>
		{
			System_u8ValidateAdminData() ;
 8001b72:	f7ff f8c5 	bl	8000d00 <System_u8ValidateAdminData>
		}

		if(Glob_LogginSeesionExpired == 0)
 8001b76:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <ECU3_Dashboard_APP_LOOP+0x130>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d154      	bne.n	8001c28 <ECU3_Dashboard_APP_LOOP+0xe8>
		{
			// admin privilege Screen
			LCD_voidAdminOptions();
 8001b7e:	f7ff fe49 	bl	8001814 <LCD_voidAdminOptions>
			do
			{
				Glob_u8Pressed_Key = HAL_KeyPadGetPressedKey(&myKeypad);
 8001b82:	4839      	ldr	r0, [pc, #228]	; (8001c68 <ECU3_Dashboard_APP_LOOP+0x128>)
 8001b84:	f000 f8d6 	bl	8001d34 <HAL_KeyPadGetPressedKey>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001b8e:	701a      	strb	r2, [r3, #0]

			}while(!((Glob_u8Pressed_Key>= '1' && Glob_u8Pressed_Key <= '3' ) || (Glob_u8Pressed_Key == (u8)KEYPAD_BACK_SYMBOL ))) ;
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b30      	cmp	r3, #48	; 0x30
 8001b96:	d903      	bls.n	8001ba0 <ECU3_Dashboard_APP_LOOP+0x60>
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b33      	cmp	r3, #51	; 0x33
 8001b9e:	d903      	bls.n	8001ba8 <ECU3_Dashboard_APP_LOOP+0x68>
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b23      	cmp	r3, #35	; 0x23
 8001ba6:	d1ec      	bne.n	8001b82 <ECU3_Dashboard_APP_LOOP+0x42>

			/* Check  Pressed Key */
			if(OPTION_ADD_USER == Glob_u8Pressed_Key)
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b31      	cmp	r3, #49	; 0x31
 8001bae:	d102      	bne.n	8001bb6 <ECU3_Dashboard_APP_LOOP+0x76>
			{
				// Add New User
				System_voidAddNewUser();
 8001bb0:	f7ff f9b4 	bl	8000f1c <System_voidAddNewUser>
		//<TODO ERROR> Wrong Main Screen Selection
		LCD_voidMainScreen();

	}

}
 8001bb4:	e056      	b.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
			else if(OPTION_DELETE_USER == Glob_u8Pressed_Key)
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b32      	cmp	r3, #50	; 0x32
 8001bbc:	d126      	bne.n	8001c0c <ECU3_Dashboard_APP_LOOP+0xcc>
				LCD_voidDeletingOptions();
 8001bbe:	f7ff fee3 	bl	8001988 <LCD_voidDeletingOptions>
					Glob_u8Pressed_Key = HAL_KeyPadGetPressedKey(&myKeypad);
 8001bc2:	4829      	ldr	r0, [pc, #164]	; (8001c68 <ECU3_Dashboard_APP_LOOP+0x128>)
 8001bc4:	f000 f8b6 	bl	8001d34 <HAL_KeyPadGetPressedKey>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001bce:	701a      	strb	r2, [r3, #0]
				}while(!((Glob_u8Pressed_Key>= '1' && Glob_u8Pressed_Key <= '2' ) || (Glob_u8Pressed_Key == (u8)KEYPAD_BACK_SYMBOL ))) ;
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b30      	cmp	r3, #48	; 0x30
 8001bd6:	d903      	bls.n	8001be0 <ECU3_Dashboard_APP_LOOP+0xa0>
 8001bd8:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b32      	cmp	r3, #50	; 0x32
 8001bde:	d903      	bls.n	8001be8 <ECU3_Dashboard_APP_LOOP+0xa8>
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b23      	cmp	r3, #35	; 0x23
 8001be6:	d1ec      	bne.n	8001bc2 <ECU3_Dashboard_APP_LOOP+0x82>
				switch(Glob_u8Pressed_Key)
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b31      	cmp	r3, #49	; 0x31
 8001bee:	d002      	beq.n	8001bf6 <ECU3_Dashboard_APP_LOOP+0xb6>
 8001bf0:	2b32      	cmp	r3, #50	; 0x32
 8001bf2:	d004      	beq.n	8001bfe <ECU3_Dashboard_APP_LOOP+0xbe>
 8001bf4:	e007      	b.n	8001c06 <ECU3_Dashboard_APP_LOOP+0xc6>
					case	'1' : System_VoidDeleteUser(DELT_ONE_DRIVER); break ;
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff faa2 	bl	8001140 <System_VoidDeleteUser>
 8001bfc:	e032      	b.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
					case	'2' : System_VoidDeleteUser(DELT_ALL_DRIVERS); break ;
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff fa9e 	bl	8001140 <System_VoidDeleteUser>
 8001c04:	e02e      	b.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
					default     : LCD_voidMainScreen();
 8001c06:	f7ff fdd1 	bl	80017ac <LCD_voidMainScreen>
}
 8001c0a:	e02b      	b.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
			else if(OPTION_EDIT_USER == Glob_u8Pressed_Key)
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b33      	cmp	r3, #51	; 0x33
 8001c12:	d027      	beq.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
			else if(KEYPAD_BACK_SYMBOL == Glob_u8Pressed_Key)
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b23      	cmp	r3, #35	; 0x23
 8001c1a:	d102      	bne.n	8001c22 <ECU3_Dashboard_APP_LOOP+0xe2>
				LCD_voidMainScreen();
 8001c1c:	f7ff fdc6 	bl	80017ac <LCD_voidMainScreen>
}
 8001c20:	e020      	b.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
				LCD_voidMainScreen();
 8001c22:	f7ff fdc3 	bl	80017ac <LCD_voidMainScreen>
}
 8001c26:	e01d      	b.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
			LCD_voidMainScreen();
 8001c28:	f7ff fdc0 	bl	80017ac <LCD_voidMainScreen>
}
 8001c2c:	e01a      	b.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
	else if ((u8)OPTION_GARAGE_SELECT == Glob_u8Pressed_Key)
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b32      	cmp	r3, #50	; 0x32
 8001c34:	d113      	bne.n	8001c5e <ECU3_Dashboard_APP_LOOP+0x11e>
		LCD_voidStatusOptions() ;
 8001c36:	f7ff fe27 	bl	8001888 <LCD_voidStatusOptions>
			Glob_u8Pressed_Key = HAL_KeyPadGetPressedKey(&myKeypad);
 8001c3a:	480b      	ldr	r0, [pc, #44]	; (8001c68 <ECU3_Dashboard_APP_LOOP+0x128>)
 8001c3c:	f000 f87a 	bl	8001d34 <HAL_KeyPadGetPressedKey>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001c46:	701a      	strb	r2, [r3, #0]
		}while(!(Glob_u8Pressed_Key == (u8)KEYPAD_BACK_SYMBOL ))  ;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b23      	cmp	r3, #35	; 0x23
 8001c4e:	d1f4      	bne.n	8001c3a <ECU3_Dashboard_APP_LOOP+0xfa>
		if(KEYPAD_BACK_SYMBOL == Glob_u8Pressed_Key)
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <ECU3_Dashboard_APP_LOOP+0x12c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b23      	cmp	r3, #35	; 0x23
 8001c56:	d105      	bne.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
			LCD_voidMainScreen();
 8001c58:	f7ff fda8 	bl	80017ac <LCD_voidMainScreen>
}
 8001c5c:	e002      	b.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
		LCD_voidMainScreen();
 8001c5e:	f7ff fda5 	bl	80017ac <LCD_voidMainScreen>
}
 8001c62:	e7ff      	b.n	8001c64 <ECU3_Dashboard_APP_LOOP+0x124>
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000012c 	.word	0x2000012c
 8001c6c:	20000058 	.word	0x20000058
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_KeyPadInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void HAL_KeyPadInit(KeyPad_cnfg* ptr_keyPadCfg)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
    u8 LOC_u8Counter = 0 ; 
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
    u8 LOC_u8GetPort = 0 ; 
 8001c80:	2300      	movs	r3, #0
 8001c82:	73bb      	strb	r3, [r7, #14]
    u8 LOC_u8GetPin = 0 ; 
 8001c84:	2300      	movs	r3, #0
 8001c86:	737b      	strb	r3, [r7, #13]
	u8 LOC_u8NumOfRow = ACCESS_STRUCT(ptr_keyPadCfg,NumOfRows) +  ACCESS_STRUCT(ptr_keyPadCfg,NumOfRows); 
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	733b      	strb	r3, [r7, #12]
	u8 LOC_u8NumOfCols = ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols)+  ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols); 
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	785b      	ldrb	r3, [r3, #1]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	72fb      	strb	r3, [r7, #11]
	
    /*          INIT GPIOs  ROWs GPIO_OUTPUT_10MHZ_PUSH_PULL     */
    for(LOC_u8Counter = 0 ; LOC_u8Counter < LOC_u8NumOfRow ; LOC_u8Counter++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e01d      	b.n	8001cda <HAL_KeyPadInit+0x66>
    {        
       LOC_u8GetPort =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8Counter];   // PORT
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	73bb      	strb	r3, [r7, #14]
       LOC_u8Counter++ ; 
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	3301      	adds	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
       LOC_u8GetPin  =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8Counter];   // PIN
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	737b      	strb	r3, [r7, #13]
       GPIO_voidSetPinDirection(LOC_u8GetPort,LOC_u8GetPin,GPIO_OUTPUT_10MHZ_PUSH_PULL);
 8001cbc:	7b79      	ldrb	r1, [r7, #13]
 8001cbe:	7bbb      	ldrb	r3, [r7, #14]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 fade 	bl	8003284 <GPIO_voidSetPinDirection>
	   GPIO_voidSetPinValue(LOC_u8GetPort,LOC_u8GetPin,HIGH);
 8001cc8:	7b79      	ldrb	r1, [r7, #13]
 8001cca:	7bbb      	ldrb	r3, [r7, #14]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 fb9e 	bl	8003410 <GPIO_voidSetPinValue>
    for(LOC_u8Counter = 0 ; LOC_u8Counter < LOC_u8NumOfRow ; LOC_u8Counter++)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	7b3b      	ldrb	r3, [r7, #12]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3dd      	bcc.n	8001c9e <HAL_KeyPadInit+0x2a>
    }
    /*         Init GPIOs COLs Input        */
    for(LOC_u8Counter = 0 ; LOC_u8Counter < LOC_u8NumOfCols ; LOC_u8Counter++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	e01d      	b.n	8001d24 <HAL_KeyPadInit+0xb0>
    {        
       LOC_u8GetPort =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Cols)[LOC_u8Counter];   // PORT
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	4413      	add	r3, r2
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	73bb      	strb	r3, [r7, #14]
       LOC_u8Counter++ ; 
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
       LOC_u8GetPin  =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Cols)[LOC_u8Counter];   // PIN
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	737b      	strb	r3, [r7, #13]
       GPIO_voidSetPinDirection(LOC_u8GetPort,LOC_u8GetPin,GPIO_PULLUP_PULLDOWN);
 8001d06:	7b79      	ldrb	r1, [r7, #13]
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fab9 	bl	8003284 <GPIO_voidSetPinDirection>
       GPIO_u8ChoosePullMode(LOC_u8GetPort,LOC_u8GetPin,GPIO_PULL_UP);
 8001d12:	7b79      	ldrb	r1, [r7, #13]
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	2201      	movs	r2, #1
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fc0b 	bl	8003534 <GPIO_u8ChoosePullMode>
    for(LOC_u8Counter = 0 ; LOC_u8Counter < LOC_u8NumOfCols ; LOC_u8Counter++)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	3301      	adds	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d3dd      	bcc.n	8001ce8 <HAL_KeyPadInit+0x74>
    }

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_KeyPadGetPressedKey>:

u8 HAL_KeyPadGetPressedKey(KeyPad_cnfg* ptr_keyPadCfg)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    u8 LOC_u8CounterRows = 0 ;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	75fb      	strb	r3, [r7, #23]
    u8 LOC_u8CounterCols = 0 ;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75bb      	strb	r3, [r7, #22]
    u8 LOC_u8GetPort = 0 ;
 8001d44:	2300      	movs	r3, #0
 8001d46:	757b      	strb	r3, [r7, #21]
    u8 LOC_u8GetPin = 0 ;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	74bb      	strb	r3, [r7, #18]
    u8 LOC_u8PressedFlag = 0 ;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	753b      	strb	r3, [r7, #20]
    u8 LOC_u8ReturnValue = (u8)KEYPAD_NOT_PRESSED_RETURN ;
 8001d50:	230a      	movs	r3, #10
 8001d52:	74fb      	strb	r3, [r7, #19]
	u8 LOC_u8Index = 0 ;
 8001d54:	2300      	movs	r3, #0
 8001d56:	747b      	strb	r3, [r7, #17]
	u8 LOC_u8IndexRow = 0 ;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	743b      	strb	r3, [r7, #16]
	u8 LOC_u8IndexCol = 0 ;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]

	u8 LOC_u8NumOfRow = ACCESS_STRUCT(ptr_keyPadCfg,NumOfRows) +  ACCESS_STRUCT(ptr_keyPadCfg,NumOfRows);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	73bb      	strb	r3, [r7, #14]
	u8 LOC_u8NumOfCols = ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols)+  ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	737b      	strb	r3, [r7, #13]

    /*          LOOP IN ROWS        */
    for(LOC_u8CounterRows = 0 ; LOC_u8CounterRows < LOC_u8NumOfRow ;  LOC_u8CounterRows++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	75fb      	strb	r3, [r7, #23]
 8001d74:	e073      	b.n	8001e5e <HAL_KeyPadGetPressedKey+0x12a>
    {
        /*              GET PORT AND PIN        */
        LOC_u8GetPort =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8CounterRows];   // PORT
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	757b      	strb	r3, [r7, #21]
        LOC_u8CounterRows++ ;
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	3301      	adds	r3, #1
 8001d86:	75fb      	strb	r3, [r7, #23]
        LOC_u8GetPin  =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8CounterRows];   // PIN
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	74bb      	strb	r3, [r7, #18]
        /*               Enable Row Number LOC_u8CounterRows */
        ENABLE_ROW(LOC_u8GetPort,LOC_u8GetPin);
 8001d94:	7cb9      	ldrb	r1, [r7, #18]
 8001d96:	7d7b      	ldrb	r3, [r7, #21]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 fb38 	bl	8003410 <GPIO_voidSetPinValue>
        /*   Check Whats Pressed In This Row         */
        for(LOC_u8CounterCols = 0 ; LOC_u8CounterCols < LOC_u8NumOfCols ; LOC_u8CounterCols++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	75bb      	strb	r3, [r7, #22]
 8001da4:	e043      	b.n	8001e2e <HAL_KeyPadGetPressedKey+0xfa>
        {
            LOC_u8GetPort =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Cols)[LOC_u8CounterCols];   // PORT
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	7dbb      	ldrb	r3, [r7, #22]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	757b      	strb	r3, [r7, #21]
            LOC_u8CounterCols++ ;
 8001db2:	7dbb      	ldrb	r3, [r7, #22]
 8001db4:	3301      	adds	r3, #1
 8001db6:	75bb      	strb	r3, [r7, #22]
            LOC_u8GetPin  =  ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Cols)[LOC_u8CounterCols];   // PIN
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	7dbb      	ldrb	r3, [r7, #22]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	74bb      	strb	r3, [r7, #18]
            IS_KYBD_PRESSED(LOC_u8GetPort,LOC_u8GetPin)
 8001dc4:	7cba      	ldrb	r2, [r7, #18]
 8001dc6:	7d7b      	ldrb	r3, [r7, #21]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 fb76 	bl	80034bc <GPIO_u8GetPinValue>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d128      	bne.n	8001e28 <HAL_KeyPadGetPressedKey+0xf4>
            {
                /*  Set Pressed Flag    */
                LOC_u8PressedFlag = 1 ;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	753b      	strb	r3, [r7, #20]
                /*  Key Is Pressed */
                IGNORE_CONT_PRESSINGS(LOC_u8GetPort,LOC_u8GetPin){asm("NOP");};
 8001dda:	e000      	b.n	8001dde <HAL_KeyPadGetPressedKey+0xaa>
 8001ddc:	bf00      	nop
 8001dde:	7cba      	ldrb	r2, [r7, #18]
 8001de0:	7d7b      	ldrb	r3, [r7, #21]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 fb69 	bl	80034bc <GPIO_u8GetPinValue>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f5      	beq.n	8001ddc <HAL_KeyPadGetPressedKey+0xa8>
				/*	Get Right Index For 2D Array	*/
				LOC_u8IndexRow = (LOC_u8CounterRows-1)/2;
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	0fda      	lsrs	r2, r3, #31
 8001df6:	4413      	add	r3, r2
 8001df8:	105b      	asrs	r3, r3, #1
 8001dfa:	743b      	strb	r3, [r7, #16]
				LOC_u8IndexCol =(LOC_u8CounterCols-1)/2;
 8001dfc:	7dbb      	ldrb	r3, [r7, #22]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	0fda      	lsrs	r2, r3, #31
 8001e02:	4413      	add	r3, r2
 8001e04:	105b      	asrs	r3, r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
				/*	Conv. 2D Index to 1D Index	*/
				LOC_u8Index = _2D_INDEX_TO_1D_INDEX(ACCESS_STRUCT(ptr_keyPadCfg,NumOfCols),LOC_u8IndexRow,LOC_u8IndexCol);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	785b      	ldrb	r3, [r3, #1]
 8001e0c:	7c3a      	ldrb	r2, [r7, #16]
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	4413      	add	r3, r2
 8001e18:	747b      	strb	r3, [r7, #17]
                /*	Get Value	*/
				LOC_u8ReturnValue = ACCESS_STRUCT(ptr_keyPadCfg,KeysPattern)[LOC_u8Index] ;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	7c7b      	ldrb	r3, [r7, #17]
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	74fb      	strb	r3, [r7, #19]
				/*  Break From Inner Loop   */
                break;
 8001e26:	e006      	b.n	8001e36 <HAL_KeyPadGetPressedKey+0x102>
        for(LOC_u8CounterCols = 0 ; LOC_u8CounterCols < LOC_u8NumOfCols ; LOC_u8CounterCols++)
 8001e28:	7dbb      	ldrb	r3, [r7, #22]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	75bb      	strb	r3, [r7, #22]
 8001e2e:	7dba      	ldrb	r2, [r7, #22]
 8001e30:	7b7b      	ldrb	r3, [r7, #13]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3b7      	bcc.n	8001da6 <HAL_KeyPadGetPressedKey+0x72>
            }
        }
		LOC_u8GetPin = ACCESS_STRUCT(ptr_keyPadCfg,Port_Pin_Rows)[LOC_u8CounterRows] ;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	74bb      	strb	r3, [r7, #18]
			/*               Disable Row Number LOC_u8CounterRows */
			DISABLE_ROW(LOC_u8GetPort,LOC_u8GetPin);
 8001e42:	7cb9      	ldrb	r1, [r7, #18]
 8001e44:	7d7b      	ldrb	r3, [r7, #21]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f001 fae1 	bl	8003410 <GPIO_voidSetPinValue>
			/*              Chk Pressed Flag        */
			if(LOC_u8PressedFlag != 0)
 8001e4e:	7d3b      	ldrb	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_KeyPadGetPressedKey+0x134>
				// Pressed so break from outer loop
				break;
			}
			else
			{
				LOC_u8ReturnValue = (u8)KEYPAD_NOT_PRESSED_RETURN ;
 8001e54:	230a      	movs	r3, #10
 8001e56:	74fb      	strb	r3, [r7, #19]
    for(LOC_u8CounterRows = 0 ; LOC_u8CounterRows < LOC_u8NumOfRow ;  LOC_u8CounterRows++)
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
 8001e5e:	7dfa      	ldrb	r2, [r7, #23]
 8001e60:	7bbb      	ldrb	r3, [r7, #14]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d387      	bcc.n	8001d76 <HAL_KeyPadGetPressedKey+0x42>
 8001e66:	e000      	b.n	8001e6a <HAL_KeyPadGetPressedKey+0x136>
				break;
 8001e68:	bf00      	nop
			}


    }
    return LOC_u8ReturnValue ;
 8001e6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <xDelay>:
#define WAIT_MS(x) xDelay(x)



static void xDelay(u32 time)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	u32 i;
	u32 j;
	for(i = time;i > 0;i--)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e00b      	b.n	8001e9a <xDelay+0x26>
		for(j = 10;j > 0;j--);
 8001e82:	230a      	movs	r3, #10
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	e002      	b.n	8001e8e <xDelay+0x1a>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <xDelay+0x14>
	for(i = time;i > 0;i--)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <xDelay+0xe>

}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <LCD_voidInit>:
* Function Definitions
*******************************************************************************/


void LCD_voidInit(LCD_Config* ptr_cfg)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
		LCD_voidWriteCmd(ptr_cfg , LCD_BEGIN_AT_FIRST_ROW) ;
		
        /********************************** END OF INITILIZATION *****************************************************/      
	#elif LCD_Mode == _4_WIRE_MODE
        // Init D3 --> D7 
        GPIO_voidSetPinDirection(_4_D4_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB4
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	7818      	ldrb	r0, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	3305      	adds	r3, #5
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f001 f9dd 	bl	8003284 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D5_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB5
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	3306      	adds	r3, #6
 8001ed0:	7818      	ldrb	r0, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	3307      	adds	r3, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2202      	movs	r2, #2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f001 f9d1 	bl	8003284 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D6_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB6
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	3308      	adds	r3, #8
 8001ee8:	7818      	ldrb	r0, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	3309      	adds	r3, #9
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f001 f9c5 	bl	8003284 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(_4_D7_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //DB7
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	330a      	adds	r3, #10
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	330b      	adds	r3, #11
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f001 f9b9 	bl	8003284 <GPIO_voidSetPinDirection>
		 
        GPIO_voidSetPinDirection(RS_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //RS
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	3302      	adds	r3, #2
 8001f18:	7818      	ldrb	r0, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	3303      	adds	r3, #3
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2202      	movs	r2, #2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f001 f9ad 	bl	8003284 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection(EN_PORT_PIN(ptr_cfg),GPIO_OUTPUT_2MHZ_PUSH_PULL);  //EN
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	7818      	ldrb	r0, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	3301      	adds	r3, #1
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f001 f9a2 	bl	8003284 <GPIO_voidSetPinDirection>
		
		LCD_voidWriteCmd(ptr_cfg , LCD_RETURN_HOME) ;
 8001f40:	2102      	movs	r1, #2
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f9b7 	bl	80022b6 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_FUNCTION_4BIT_2LINES) ;
 8001f48:	2128      	movs	r1, #40	; 0x28
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f9b3 	bl	80022b6 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_CLEAR_SCREEN) ;
 8001f50:	2101      	movs	r1, #1
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f9af 	bl	80022b6 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_DISP_ON_CURSOR_BLINK) ;
 8001f58:	210f      	movs	r1, #15
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f9ab 	bl	80022b6 <LCD_voidWriteCmd>
		LCD_voidWriteCmd(ptr_cfg , LCD_BEGIN_AT_FIRST_ROW) ;
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f9a7 	bl	80022b6 <LCD_voidWriteCmd>
		/********************************** END OF INITILIZATION *****************************************************/    
	#endif
	WAIT_MS(2);
 8001f68:	2002      	movs	r0, #2
 8001f6a:	f7ff ff83 	bl	8001e74 <xDelay>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <LCD_voidSendChar>:
void LCD_voidSendChar(LCD_Config* ptrCnfg , u8 copy_u8data)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	70fb      	strb	r3, [r7, #3]
        GPIO_voidSetPinValue(_8_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,7));  //DB7 
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
		WRITE_DATA_TO_LCD(ptrCnfg);
#elif LCD_Mode == _4_WIRE_MODE
		// Add data in Data Line
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,4));  //DB4
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	7818      	ldrb	r0, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	3305      	adds	r3, #5
 8001f90:	7819      	ldrb	r1, [r3, #0]
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f001 fa36 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,5));  //DB5
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	3306      	adds	r3, #6
 8001faa:	7818      	ldrb	r0, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	3307      	adds	r3, #7
 8001fb2:	7819      	ldrb	r1, [r3, #0]
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f001 fa25 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,6));  //DB6
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	3308      	adds	r3, #8
 8001fcc:	7818      	ldrb	r0, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	3309      	adds	r3, #9
 8001fd4:	7819      	ldrb	r1, [r3, #0]
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f001 fa14 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,7));  //DB7 
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	330a      	adds	r3, #10
 8001fee:	7818      	ldrb	r0, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	330b      	adds	r3, #11
 8001ff6:	7819      	ldrb	r1, [r3, #0]
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	09db      	lsrs	r3, r3, #7
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	f001 fa06 	bl	8003410 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	3302      	adds	r3, #2
 800200a:	7818      	ldrb	r0, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	3303      	adds	r3, #3
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2201      	movs	r2, #1
 8002016:	4619      	mov	r1, r3
 8002018:	f001 f9fa 	bl	8003410 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(ptrCnfg);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	7818      	ldrb	r0, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	3301      	adds	r3, #1
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2201      	movs	r2, #1
 800202c:	4619      	mov	r1, r3
 800202e:	f001 f9ef 	bl	8003410 <GPIO_voidSetPinValue>
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff ff1e 	bl	8001e74 <xDelay>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	7818      	ldrb	r0, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	3301      	adds	r3, #1
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	4619      	mov	r1, r3
 800204a:	f001 f9e1 	bl	8003410 <GPIO_voidSetPinValue>
 800204e:	2014      	movs	r0, #20
 8002050:	f7ff ff10 	bl	8001e74 <xDelay>
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,0));  //DB4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	7818      	ldrb	r0, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	3305      	adds	r3, #5
 8002062:	7819      	ldrb	r1, [r3, #0]
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	f001 f9cf 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,1));  //DB5
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	3306      	adds	r3, #6
 8002078:	7818      	ldrb	r0, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	3307      	adds	r3, #7
 8002080:	7819      	ldrb	r1, [r3, #0]
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	f001 f9be 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,2));  //DB6
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	3308      	adds	r3, #8
 800209a:	7818      	ldrb	r0, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	3309      	adds	r3, #9
 80020a2:	7819      	ldrb	r1, [r3, #0]
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	f001 f9ad 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(ptrCnfg),GET_BIT(copy_u8data,3));  //DB7 
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	330a      	adds	r3, #10
 80020bc:	7818      	ldrb	r0, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	330b      	adds	r3, #11
 80020c4:	7819      	ldrb	r1, [r3, #0]
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	08db      	lsrs	r3, r3, #3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	f001 f99c 	bl	8003410 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(ptrCnfg) , HIGH) ;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	3302      	adds	r3, #2
 80020de:	7818      	ldrb	r0, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	3303      	adds	r3, #3
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4619      	mov	r1, r3
 80020ec:	f001 f990 	bl	8003410 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(ptrCnfg);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	7818      	ldrb	r0, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	3301      	adds	r3, #1
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	4619      	mov	r1, r3
 8002102:	f001 f985 	bl	8003410 <GPIO_voidSetPinValue>
 8002106:	2001      	movs	r0, #1
 8002108:	f7ff feb4 	bl	8001e74 <xDelay>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	7818      	ldrb	r0, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	3301      	adds	r3, #1
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	4619      	mov	r1, r3
 800211e:	f001 f977 	bl	8003410 <GPIO_voidSetPinValue>
 8002122:	2014      	movs	r0, #20
 8002124:	f7ff fea6 	bl	8001e74 <xDelay>
#endif
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <LCD_voidSendString>:

void LCD_voidSendString(LCD_Config* ptrCnfg , u8* ptr_u8data)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	u8 index =0 ; 
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
	while(ptr_u8data[index] != '\0')
 800213e:	e00a      	b.n	8002156 <LCD_voidSendString+0x26>
	{
		LCD_voidSendChar(ptrCnfg,ptr_u8data[index]);
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ff13 	bl	8001f76 <LCD_voidSendChar>
		index++;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	3301      	adds	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
	while(ptr_u8data[index] != '\0')
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ee      	bne.n	8002140 <LCD_voidSendString+0x10>
	}
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <LCD_voidSetCursorType>:
{
	
		
}
void LCD_voidSetCursorType(LCD_Config*  ptrLCD ,cursorType copy_cursorType)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
	LCD_voidWriteCmd(ptrLCD, copy_cursorType) ;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f89b 	bl	80022b6 <LCD_voidWriteCmd>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <LCD_voidGotoXY>:
	}
			
		
}
void LCD_voidGotoXY(LCD_Config* ptrCnfg , u8 x , u8 y)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
 8002194:	4613      	mov	r3, r2
 8002196:	70bb      	strb	r3, [r7, #2]
	 | DDRAM     | 0x40
	 |           |			for Row 1 and in between 0x40 -> 0x4f select Col
	 |           |	
	 |           | 0x4f	
	*/
	u8 address = 0 ; 
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
	if( y < ACCESS_STRUCT(ptrCnfg,LCD_SIZE_Rows) && x < ACCESS_STRUCT(ptrCnfg,LCD_SIZE_Cols) )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	78ba      	ldrb	r2, [r7, #2]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d221      	bcs.n	80021ea <LCD_voidGotoXY+0x62>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d21c      	bcs.n	80021ea <LCD_voidGotoXY+0x62>
		 *	RS 0
		 *  RW 0 --> 0 by default
		 *  D7 1
		 * ADD
		 */	
		if(y  < 2 )
 80021b0:	78bb      	ldrb	r3, [r7, #2]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d806      	bhi.n	80021c4 <LCD_voidGotoXY+0x3c>
		{
			 address = y * 0x40 + x;		/*	If 0 --> Row 1 , If 0x40 Row 2	*/
 80021b6:	78bb      	ldrb	r3, [r7, #2]
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	4413      	add	r3, r2
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	e009      	b.n	80021d8 <LCD_voidGotoXY+0x50>
		}
		else
		{
			address = (y-2) * 0x40 + 0x10  + x;
 80021c4:	78bb      	ldrb	r3, [r7, #2]
 80021c6:	3302      	adds	r3, #2
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	019b      	lsls	r3, r3, #6
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	4413      	add	r3, r2
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	3310      	adds	r3, #16
 80021d6:	73fb      	strb	r3, [r7, #15]

		}
		address |= (1 << 7) ;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021de:	73fb      	strb	r3, [r7, #15]


		LCD_voidWriteCmd(ptrCnfg , address);
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f866 	bl	80022b6 <LCD_voidWriteCmd>

		
	}

}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <LCD_voidClear>:
void LCD_voidClear(LCD_Config* x)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
	LCD_voidWriteCmd(x,LCD_CLEAR_SCREEN);	
 80021fa:	2101      	movs	r1, #1
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f85a 	bl	80022b6 <LCD_voidWriteCmd>
	WAIT_MS(1);		
 8002202:	2001      	movs	r0, #1
 8002204:	f7ff fe36 	bl	8001e74 <xDelay>
	LCD_voidWriteCmd(x , LCD_BEGIN_AT_FIRST_ROW) ;
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f853 	bl	80022b6 <LCD_voidWriteCmd>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <LCD_voidStoreCustomChar>:
void LCD_voidStoreCustomChar(LCD_Config*  ptrLCD ,u8* ptrToArray, u8 copy_u8CharIndex)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	71fb      	strb	r3, [r7, #7]
	u8 address = 0 ,index ; 
 8002226:	2300      	movs	r3, #0
 8002228:	75bb      	strb	r3, [r7, #22]
	/*		Have 8 Places Only for Custom Char Can Store in CGRAM	*/
	if(copy_u8CharIndex < 8 )
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b07      	cmp	r3, #7
 800222e:	d820      	bhi.n	8002272 <LCD_voidStoreCustomChar+0x5a>
	{
		address = copy_u8CharIndex * 0x08 ;
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	75bb      	strb	r3, [r7, #22]
		*		RW = 0 
		*		D7 = 0 
		*		D6 = 1
		*		D0:D6 Address
		*/
		address |= (1<<6) ; 
 8002236:	7dbb      	ldrb	r3, [r7, #22]
 8002238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223c:	75bb      	strb	r3, [r7, #22]
		LCD_voidWriteCmd(ptrLCD,address);
 800223e:	7dbb      	ldrb	r3, [r7, #22]
 8002240:	4619      	mov	r1, r3
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f837 	bl	80022b6 <LCD_voidWriteCmd>
		for(index = 0 ; index < 8 ; index++)
 8002248:	2300      	movs	r3, #0
 800224a:	75fb      	strb	r3, [r7, #23]
 800224c:	e00a      	b.n	8002264 <LCD_voidStoreCustomChar+0x4c>
		{
			LCD_voidSendChar(ptrLCD,ptrToArray[index]);
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4619      	mov	r1, r3
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff fe8c 	bl	8001f76 <LCD_voidSendChar>
		for(index = 0 ; index < 8 ; index++)
 800225e:	7dfb      	ldrb	r3, [r7, #23]
 8002260:	3301      	adds	r3, #1
 8002262:	75fb      	strb	r3, [r7, #23]
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b07      	cmp	r3, #7
 8002268:	d9f1      	bls.n	800224e <LCD_voidStoreCustomChar+0x36>
		}
		// Restore point to DDRAM OPTIONAL by default display from DDRAM
		LCD_voidWriteCmd(ptrLCD,LCD_RETURN_HOME);
 800226a:	2102      	movs	r1, #2
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f822 	bl	80022b6 <LCD_voidWriteCmd>
		
	}
	
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <LCD_voidSendNumber>:

void LCD_voidSendNumber(LCD_Config*  ptrLCD , u32 copy_u32Number)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b088      	sub	sp, #32
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
	u8 Buffer[17] = {0} ;
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	741a      	strb	r2, [r3, #16]
	itoa(copy_u32Number,Buffer,10) ;
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	220a      	movs	r2, #10
 800229a:	4619      	mov	r1, r3
 800229c:	6838      	ldr	r0, [r7, #0]
 800229e:	f002 f86b 	bl	8004378 <itoa>
	LCD_voidSendString(ptrLCD , Buffer);
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff41 	bl	8002130 <LCD_voidSendString>

}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <LCD_voidWriteCmd>:



/************************************ Static FCNs**********************************/
void LCD_voidWriteCmd(LCD_Config* x , u8 copy_u8Cmd)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
		 

#elif LCD_Mode == _4_WIRE_MODE
		// Add CMD in Data Line

        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,4));  //DB4
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	7818      	ldrb	r0, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	3305      	adds	r3, #5
 80022d0:	7819      	ldrb	r1, [r3, #0]
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	f001 f896 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,5));  //DB5
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	3306      	adds	r3, #6
 80022ea:	7818      	ldrb	r0, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	3307      	adds	r3, #7
 80022f2:	7819      	ldrb	r1, [r3, #0]
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	f001 f885 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,6));  //DB6
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	3308      	adds	r3, #8
 800230c:	7818      	ldrb	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	3309      	adds	r3, #9
 8002314:	7819      	ldrb	r1, [r3, #0]
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	f001 f874 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,7));  //DB7 
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	330a      	adds	r3, #10
 800232e:	7818      	ldrb	r0, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	330b      	adds	r3, #11
 8002336:	7819      	ldrb	r1, [r3, #0]
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	09db      	lsrs	r3, r3, #7
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	f001 f866 	bl	8003410 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	3302      	adds	r3, #2
 800234a:	7818      	ldrb	r0, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	3303      	adds	r3, #3
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	4619      	mov	r1, r3
 8002358:	f001 f85a 	bl	8003410 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	7818      	ldrb	r0, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	3301      	adds	r3, #1
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	4619      	mov	r1, r3
 800236e:	f001 f84f 	bl	8003410 <GPIO_voidSetPinValue>
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff fd7e 	bl	8001e74 <xDelay>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	7818      	ldrb	r0, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	3301      	adds	r3, #1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	4619      	mov	r1, r3
 800238a:	f001 f841 	bl	8003410 <GPIO_voidSetPinValue>
 800238e:	2014      	movs	r0, #20
 8002390:	f7ff fd70 	bl	8001e74 <xDelay>
        GPIO_voidSetPinValue(_4_D4_PORT_PIN(x),GET_BIT(copy_u8Cmd,0));  //DB4
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	7818      	ldrb	r0, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	3305      	adds	r3, #5
 80023a2:	7819      	ldrb	r1, [r3, #0]
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	f001 f82f 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D5_PORT_PIN(x),GET_BIT(copy_u8Cmd,1));  //DB5
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	3306      	adds	r3, #6
 80023b8:	7818      	ldrb	r0, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	3307      	adds	r3, #7
 80023c0:	7819      	ldrb	r1, [r3, #0]
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	f001 f81e 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D6_PORT_PIN(x),GET_BIT(copy_u8Cmd,2));  //DB6
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	3308      	adds	r3, #8
 80023da:	7818      	ldrb	r0, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	3309      	adds	r3, #9
 80023e2:	7819      	ldrb	r1, [r3, #0]
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	f001 f80d 	bl	8003410 <GPIO_voidSetPinValue>
        GPIO_voidSetPinValue(_4_D7_PORT_PIN(x),GET_BIT(copy_u8Cmd,3));  //DB7 	
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	330a      	adds	r3, #10
 80023fc:	7818      	ldrb	r0, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	330b      	adds	r3, #11
 8002404:	7819      	ldrb	r1, [r3, #0]
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	f000 fffc 	bl	8003410 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(RS_PORT_PIN(x) , LOW) ;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	3302      	adds	r3, #2
 800241e:	7818      	ldrb	r0, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	3303      	adds	r3, #3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	4619      	mov	r1, r3
 800242c:	f000 fff0 	bl	8003410 <GPIO_voidSetPinValue>
		WRITE_DATA_TO_LCD(x);		
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	7818      	ldrb	r0, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	3301      	adds	r3, #1
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2201      	movs	r2, #1
 8002440:	4619      	mov	r1, r3
 8002442:	f000 ffe5 	bl	8003410 <GPIO_voidSetPinValue>
 8002446:	2001      	movs	r0, #1
 8002448:	f7ff fd14 	bl	8001e74 <xDelay>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	7818      	ldrb	r0, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	3301      	adds	r3, #1
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	4619      	mov	r1, r3
 800245e:	f000 ffd7 	bl	8003410 <GPIO_voidSetPinValue>
 8002462:	2014      	movs	r0, #20
 8002464:	f7ff fd06 	bl	8001e74 <xDelay>

#endif
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_7SegmentInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
_7Segment_ReturnState HAL_7SegmentInit(_7Segment_Config* ptr_config)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

	u8 LOC_u8Return = NO_ERROR; 
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
	/*			GPIO Init					*/

	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	785b      	ldrb	r3, [r3, #1]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_7SegmentInit+0x1a>
 8002484:	2b01      	cmp	r3, #1
 8002486:	d039      	beq.n	80024fc <HAL_7SegmentInit+0x8c>
 8002488:	e059      	b.n	800253e <HAL_7SegmentInit+0xce>
	{
		case _7_SEG_NORMAL_MODE :
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7898      	ldrb	r0, [r3, #2]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	78db      	ldrb	r3, [r3, #3]
 8002492:	2202      	movs	r2, #2
 8002494:	4619      	mov	r1, r3
 8002496:	f000 fef5 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7918      	ldrb	r0, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	795b      	ldrb	r3, [r3, #5]
 80024a2:	2202      	movs	r2, #2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f000 feed 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7998      	ldrb	r0, [r3, #6]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	79db      	ldrb	r3, [r3, #7]
 80024b2:	2202      	movs	r2, #2
 80024b4:	4619      	mov	r1, r3
 80024b6:	f000 fee5 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7a18      	ldrb	r0, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7a5b      	ldrb	r3, [r3, #9]
 80024c2:	2202      	movs	r2, #2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f000 fedd 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7a98      	ldrb	r0, [r3, #10]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7adb      	ldrb	r3, [r3, #11]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f000 fed5 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7b18      	ldrb	r0, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7b5b      	ldrb	r3, [r3, #13]
 80024e2:	2202      	movs	r2, #2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f000 fecd 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7b98      	ldrb	r0, [r3, #14]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7bdb      	ldrb	r3, [r3, #15]
 80024f2:	2202      	movs	r2, #2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f000 fec5 	bl	8003284 <GPIO_voidSetPinDirection>
		break ; 
 80024fa:	e022      	b.n	8002542 <HAL_7SegmentInit+0xd2>
		case _7_SEG_4_PIN_IC:
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7898      	ldrb	r0, [r3, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	78db      	ldrb	r3, [r3, #3]
 8002504:	2202      	movs	r2, #2
 8002506:	4619      	mov	r1, r3
 8002508:	f000 febc 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7918      	ldrb	r0, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	795b      	ldrb	r3, [r3, #5]
 8002514:	2202      	movs	r2, #2
 8002516:	4619      	mov	r1, r3
 8002518:	f000 feb4 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7998      	ldrb	r0, [r3, #6]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	79db      	ldrb	r3, [r3, #7]
 8002524:	2202      	movs	r2, #2
 8002526:	4619      	mov	r1, r3
 8002528:	f000 feac 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, GPIO_OUTPUT_2MHZ_PUSH_PULL) ;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7a18      	ldrb	r0, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7a5b      	ldrb	r3, [r3, #9]
 8002534:	2202      	movs	r2, #2
 8002536:	4619      	mov	r1, r3
 8002538:	f000 fea4 	bl	8003284 <GPIO_voidSetPinDirection>
		break;
 800253c:	e001      	b.n	8002542 <HAL_7SegmentInit+0xd2>
		default:
			LOC_u8Return= ERROR_OPRTION_MODE_SLCTION ; 
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
	}


	return 	LOC_u8Return ; 
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_7SegmentWriteNumber>:

_7Segment_ReturnState HAL_7SegmentWriteNumber(_7Segment_Config* ptr_config, u8 copy_u8Number)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
	u8 LOC_u8Return = NO_ERROR; 
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
	LOC_u8Return = _7sevenSegmentErrorChecking(ptr_config) ; 
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f821 	bl	80025a4 <_7sevenSegmentErrorChecking>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
	/*		ERROR CHECKER		*/
	if(LOC_u8Return != NO_ERROR)
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_7SegmentWriteNumber+0x24>
	{
		return LOC_u8Return; 
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	e012      	b.n	8002596 <HAL_7SegmentWriteNumber+0x4a>
	}
	/*		GOTO FUNC			*/
	if(copy_u8Number >= 48 && copy_u8Number <= 57)
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	2b2f      	cmp	r3, #47	; 0x2f
 8002574:	d906      	bls.n	8002584 <HAL_7SegmentWriteNumber+0x38>
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	2b39      	cmp	r3, #57	; 0x39
 800257a:	d803      	bhi.n	8002584 <HAL_7SegmentWriteNumber+0x38>
	{
		copy_u8Number = copy_u8Number - 48 ;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	3b30      	subs	r3, #48	; 0x30
 8002580:	70fb      	strb	r3, [r7, #3]
 8002582:	e001      	b.n	8002588 <HAL_7SegmentWriteNumber+0x3c>
	}
	else if (copy_u8Number >= 0 && copy_u8Number <= 9)
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	2b09      	cmp	r3, #9
	}
	else
	{
		// <!TODO ERROR> Wrong Input
	}
   (*arr_ofFunctions[copy_u8Number])(ptr_config);
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <HAL_7SegmentWriteNumber+0x54>)
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3

	/*		Return Value		*/	
	return LOC_u8Return; 
 8002594:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000005c 	.word	0x2000005c

080025a4 <_7sevenSegmentErrorChecking>:




_7Segment_ReturnState _7sevenSegmentErrorChecking(_7Segment_Config* ptr_errorConfig)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	if (ACCESS_STRUCT(ptr_errorConfig,_7SegmentType) != COMN_ANODE && ACCESS_STRUCT(ptr_errorConfig,_7SegmentType) != COMN_CATHOD) 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <_7sevenSegmentErrorChecking+0x1c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d001      	beq.n	80025c0 <_7sevenSegmentErrorChecking+0x1c>
	{
		return ERROR_TYPE_SLCTION ;
 80025bc:	2302      	movs	r3, #2
 80025be:	e00a      	b.n	80025d6 <_7sevenSegmentErrorChecking+0x32>
	}
	else if(ACCESS_STRUCT(ptr_errorConfig,_7SegmentMode) != _7_SEG_NORMAL_MODE &&  ACCESS_STRUCT(ptr_errorConfig,_7SegmentMode) != _7_SEG_4_PIN_IC) 
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <_7sevenSegmentErrorChecking+0x30>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d001      	beq.n	80025d4 <_7sevenSegmentErrorChecking+0x30>
	{
		return ERROR_OPRTION_MODE_SLCTION ; 
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <_7sevenSegmentErrorChecking+0x32>
	}
	else
	{
		return NO_ERROR; 	
 80025d4:	2300      	movs	r3, #0
	}
	return NO_ERROR; 
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <_7SegZero>:

static void _7SegZero  (_7Segment_Config* ptr_config)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <_7SegZero+0x16>
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d045      	beq.n	8002680 <_7SegZero+0xa0>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			break;
	}
}
 80025f4:	e069      	b.n	80026ca <_7SegZero+0xea>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7898      	ldrb	r0, [r3, #2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	78d9      	ldrb	r1, [r3, #3]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	f000 ff04 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7918      	ldrb	r0, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7959      	ldrb	r1, [r3, #5]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	f000 fefb 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7998      	ldrb	r0, [r3, #6]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	79d9      	ldrb	r1, [r3, #7]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	f000 fef2 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7a18      	ldrb	r0, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7a59      	ldrb	r1, [r3, #9]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	f000 fee9 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7a98      	ldrb	r0, [r3, #10]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7ad9      	ldrb	r1, [r3, #11]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	f000 fee0 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		 
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7b18      	ldrb	r0, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7b59      	ldrb	r1, [r3, #13]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	f000 fed7 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 				
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7b98      	ldrb	r0, [r3, #14]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7bd9      	ldrb	r1, [r3, #15]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	f000 fec9 	bl	8003410 <GPIO_voidSetPinValue>
			break ;		 
 800267e:	e024      	b.n	80026ca <_7SegZero+0xea>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7898      	ldrb	r0, [r3, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	78d9      	ldrb	r1, [r3, #3]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	f000 febf 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7918      	ldrb	r0, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7959      	ldrb	r1, [r3, #5]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	f000 feb6 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7998      	ldrb	r0, [r3, #6]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	79d9      	ldrb	r1, [r3, #7]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f000 fead 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7a18      	ldrb	r0, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7a59      	ldrb	r1, [r3, #9]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f000 fea4 	bl	8003410 <GPIO_voidSetPinValue>
			break;
 80026c8:	bf00      	nop
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_7SegOne>:
static void _7SegOne   (_7Segment_Config* ptr_config) 
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	785b      	ldrb	r3, [r3, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <_7SegOne+0x16>
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d059      	beq.n	800279a <_7SegOne+0xc8>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
		break;
	}
}
 80026e6:	e082      	b.n	80027ee <_7SegOne+0x11c>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7898      	ldrb	r0, [r3, #2]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	78d9      	ldrb	r1, [r3, #3]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	f000 fe86 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7918      	ldrb	r0, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7959      	ldrb	r1, [r3, #5]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	f000 fe7d 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7998      	ldrb	r0, [r3, #6]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	79d9      	ldrb	r1, [r3, #7]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	f000 fe74 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7a18      	ldrb	r0, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7a59      	ldrb	r1, [r3, #9]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	f000 fe66 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7a98      	ldrb	r0, [r3, #10]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7ad9      	ldrb	r1, [r3, #11]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	f000 fe58 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		 
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7b18      	ldrb	r0, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7b59      	ldrb	r1, [r3, #13]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	f000 fe4a 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7b98      	ldrb	r0, [r3, #14]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7bd9      	ldrb	r1, [r3, #15]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	f000 fe3c 	bl	8003410 <GPIO_voidSetPinValue>
		 break ;	 
 8002798:	e029      	b.n	80027ee <_7SegOne+0x11c>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7898      	ldrb	r0, [r3, #2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	78d9      	ldrb	r1, [r3, #3]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	f000 fe2d 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7918      	ldrb	r0, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7959      	ldrb	r1, [r3, #5]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f000 fe24 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7998      	ldrb	r0, [r3, #6]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	79d9      	ldrb	r1, [r3, #7]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	f000 fe1b 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7a18      	ldrb	r0, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7a59      	ldrb	r1, [r3, #9]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f000 fe12 	bl	8003410 <GPIO_voidSetPinValue>
		break;
 80027ec:	bf00      	nop
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_7SegTwo>:
static void _7SegTwo   (_7Segment_Config* ptr_config) 
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <_7SegTwo+0x16>
 8002806:	2b01      	cmp	r3, #1
 8002808:	d04a      	beq.n	80028a0 <_7SegTwo+0xaa>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
		break;
	}
}
 800280a:	e073      	b.n	80028f4 <_7SegTwo+0xfe>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// A ON 
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7898      	ldrb	r0, [r3, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	78d9      	ldrb	r1, [r3, #3]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	f000 fdf9 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// B ON
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7918      	ldrb	r0, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7959      	ldrb	r1, [r3, #5]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	f000 fdf0 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;	// C OFF
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7998      	ldrb	r0, [r3, #6]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	79d9      	ldrb	r1, [r3, #7]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	f000 fde2 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// D ON
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7a18      	ldrb	r0, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7a59      	ldrb	r1, [r3, #9]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	f000 fdd9 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// E ON
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7a98      	ldrb	r0, [r3, #10]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7ad9      	ldrb	r1, [r3, #11]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 fdd0 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// F OFF
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7b18      	ldrb	r0, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7b59      	ldrb	r1, [r3, #13]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	f000 fdc2 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// G ON
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7b98      	ldrb	r0, [r3, #14]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7bd9      	ldrb	r1, [r3, #15]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	f000 fdb9 	bl	8003410 <GPIO_voidSetPinValue>
		 break ;
 800289e:	e029      	b.n	80028f4 <_7SegTwo+0xfe>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7898      	ldrb	r0, [r3, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	78d9      	ldrb	r1, [r3, #3]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	f000 fdaf 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7918      	ldrb	r0, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7959      	ldrb	r1, [r3, #5]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	f000 fda1 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7998      	ldrb	r0, [r3, #6]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	79d9      	ldrb	r1, [r3, #7]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 fd98 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7a18      	ldrb	r0, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7a59      	ldrb	r1, [r3, #9]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	f000 fd8f 	bl	8003410 <GPIO_voidSetPinValue>
		break;
 80028f2:	bf00      	nop
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_7SegThree>:
static void _7SegThree (_7Segment_Config* ptr_config) 
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <_7SegThree+0x16>
 800290c:	2b01      	cmp	r3, #1
 800290e:	d04a      	beq.n	80029a6 <_7SegThree+0xaa>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
		break;
	}
}
 8002910:	e078      	b.n	8002a04 <_7SegThree+0x108>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// A ON 
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7898      	ldrb	r0, [r3, #2]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	78d9      	ldrb	r1, [r3, #3]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	f000 fd76 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// B ON
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7918      	ldrb	r0, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7959      	ldrb	r1, [r3, #5]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	f000 fd6d 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// C ON
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7998      	ldrb	r0, [r3, #6]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	79d9      	ldrb	r1, [r3, #7]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	f000 fd64 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// D on
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7a18      	ldrb	r0, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7a59      	ldrb	r1, [r3, #9]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	f000 fd5b 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// E OFF
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7a98      	ldrb	r0, [r3, #10]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7ad9      	ldrb	r1, [r3, #11]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	f000 fd4d 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// F OFF
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7b18      	ldrb	r0, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7b59      	ldrb	r1, [r3, #13]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	f000 fd3f 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// G ON
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7b98      	ldrb	r0, [r3, #14]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7bd9      	ldrb	r1, [r3, #15]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	f000 fd36 	bl	8003410 <GPIO_voidSetPinValue>
		 break ;
 80029a4:	e02e      	b.n	8002a04 <_7SegThree+0x108>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	7898      	ldrb	r0, [r3, #2]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	78d9      	ldrb	r1, [r3, #3]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	f000 fd27 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7918      	ldrb	r0, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7959      	ldrb	r1, [r3, #5]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf0c      	ite	eq
 80029d2:	2301      	moveq	r3, #1
 80029d4:	2300      	movne	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	f000 fd19 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7998      	ldrb	r0, [r3, #6]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	79d9      	ldrb	r1, [r3, #7]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 fd10 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7a18      	ldrb	r0, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7a59      	ldrb	r1, [r3, #9]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	f000 fd07 	bl	8003410 <GPIO_voidSetPinValue>
		break;
 8002a02:	bf00      	nop
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_7SegFour>:
static void _7SegFour  (_7Segment_Config* ptr_config) 
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	785b      	ldrb	r3, [r3, #1]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <_7SegFour+0x16>
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d04f      	beq.n	8002ac0 <_7SegFour+0xb4>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
		break;
	}
}
 8002a20:	e078      	b.n	8002b14 <_7SegFour+0x108>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// A OFF
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7898      	ldrb	r0, [r3, #2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	78d9      	ldrb	r1, [r3, #3]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f000 fce9 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// B ON
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7918      	ldrb	r0, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7959      	ldrb	r1, [r3, #5]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f000 fce0 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;	// C ON
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7998      	ldrb	r0, [r3, #6]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	79d9      	ldrb	r1, [r3, #7]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f000 fcd7 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// D OFF
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7a18      	ldrb	r0, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7a59      	ldrb	r1, [r3, #9]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f000 fcc9 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// E OFF
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7a98      	ldrb	r0, [r3, #10]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7ad9      	ldrb	r1, [r3, #11]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	f000 fcbb 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// F ON
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7b18      	ldrb	r0, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7b59      	ldrb	r1, [r3, #13]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 fcb2 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// G ON
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7b98      	ldrb	r0, [r3, #14]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	7bd9      	ldrb	r1, [r3, #15]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f000 fca9 	bl	8003410 <GPIO_voidSetPinValue>
		break ;
 8002abe:	e029      	b.n	8002b14 <_7SegFour+0x108>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7898      	ldrb	r0, [r3, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	78d9      	ldrb	r1, [r3, #3]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f000 fc9f 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7918      	ldrb	r0, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7959      	ldrb	r1, [r3, #5]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f000 fc96 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7998      	ldrb	r0, [r3, #6]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	79d9      	ldrb	r1, [r3, #7]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	f000 fc88 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7a18      	ldrb	r0, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7a59      	ldrb	r1, [r3, #9]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f000 fc7f 	bl	8003410 <GPIO_voidSetPinValue>
		break;
 8002b12:	bf00      	nop
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_7SegFive>:
static void _7SegFive  (_7Segment_Config* ptr_config) 
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	785b      	ldrb	r3, [r3, #1]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <_7SegFive+0x16>
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d04a      	beq.n	8002bc6 <_7SegFive+0xaa>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
		break;
	}
}
 8002b30:	e078      	b.n	8002c24 <_7SegFive+0x108>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// A ON 
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7898      	ldrb	r0, [r3, #2]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	78d9      	ldrb	r1, [r3, #3]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f000 fc66 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// B OFF
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7918      	ldrb	r0, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7959      	ldrb	r1, [r3, #5]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f000 fc58 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;	// C ON
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7998      	ldrb	r0, [r3, #6]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	79d9      	ldrb	r1, [r3, #7]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f000 fc4f 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// D ON
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7a18      	ldrb	r0, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7a59      	ldrb	r1, [r3, #9]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f000 fc46 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// E OFF
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7a98      	ldrb	r0, [r3, #10]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7ad9      	ldrb	r1, [r3, #11]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f000 fc38 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// F ON
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7b18      	ldrb	r0, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7b59      	ldrb	r1, [r3, #13]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	f000 fc2f 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// G ON
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	7b98      	ldrb	r0, [r3, #14]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7bd9      	ldrb	r1, [r3, #15]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f000 fc26 	bl	8003410 <GPIO_voidSetPinValue>
		break ;
 8002bc4:	e02e      	b.n	8002c24 <_7SegFive+0x108>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7898      	ldrb	r0, [r3, #2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	78d9      	ldrb	r1, [r3, #3]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f000 fc17 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7918      	ldrb	r0, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7959      	ldrb	r1, [r3, #5]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 fc0e 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7998      	ldrb	r0, [r3, #6]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	79d9      	ldrb	r1, [r3, #7]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f000 fc00 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7a18      	ldrb	r0, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7a59      	ldrb	r1, [r3, #9]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f000 fbf7 	bl	8003410 <GPIO_voidSetPinValue>
		break;
 8002c22:	bf00      	nop
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_7SegSix>:
static void _7SegSix   (_7Segment_Config* ptr_config) 
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <_7SegSix+0x16>
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d045      	beq.n	8002ccc <_7SegSix+0xa0>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
		
		break;
	}
}
 8002c40:	e073      	b.n	8002d2a <_7SegSix+0xfe>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// A ON 
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7898      	ldrb	r0, [r3, #2]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	78d9      	ldrb	r1, [r3, #3]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f000 fbde 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// B OFF
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7918      	ldrb	r0, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7959      	ldrb	r1, [r3, #5]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 fbd0 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;	// C ON
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7998      	ldrb	r0, [r3, #6]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	79d9      	ldrb	r1, [r3, #7]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f000 fbc7 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// D ON
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7a18      	ldrb	r0, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7a59      	ldrb	r1, [r3, #9]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 fbbe 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// E ON
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7a98      	ldrb	r0, [r3, #10]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7ad9      	ldrb	r1, [r3, #11]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f000 fbb5 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// F ON
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7b18      	ldrb	r0, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7b59      	ldrb	r1, [r3, #13]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f000 fbac 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// G ON
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7b98      	ldrb	r0, [r3, #14]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7bd9      	ldrb	r1, [r3, #15]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f000 fba3 	bl	8003410 <GPIO_voidSetPinValue>
		break ;
 8002cca:	e02e      	b.n	8002d2a <_7SegSix+0xfe>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7898      	ldrb	r0, [r3, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	78d9      	ldrb	r1, [r3, #3]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f000 fb99 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7918      	ldrb	r0, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7959      	ldrb	r1, [r3, #5]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f000 fb8b 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7998      	ldrb	r0, [r3, #6]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	79d9      	ldrb	r1, [r3, #7]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	f000 fb7d 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7a18      	ldrb	r0, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7a59      	ldrb	r1, [r3, #9]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 fb74 	bl	8003410 <GPIO_voidSetPinValue>
		break;
 8002d28:	bf00      	nop
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_7SegSeven>:
static void _7SegSeven (_7Segment_Config* ptr_config) 
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <_7SegSeven+0x16>
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d054      	beq.n	8002df0 <_7SegSeven+0xbe>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
		
		break;
	}
}
 8002d46:	e087      	b.n	8002e58 <_7SegSeven+0x126>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// A ON 
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7898      	ldrb	r0, [r3, #2]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	78d9      	ldrb	r1, [r3, #3]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	f000 fb5b 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// B ON
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7918      	ldrb	r0, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7959      	ldrb	r1, [r3, #5]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f000 fb52 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;	// C ON
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7998      	ldrb	r0, [r3, #6]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	79d9      	ldrb	r1, [r3, #7]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f000 fb49 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// D OFF
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7a18      	ldrb	r0, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7a59      	ldrb	r1, [r3, #9]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	f000 fb3b 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// E OFF
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7a98      	ldrb	r0, [r3, #10]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7ad9      	ldrb	r1, [r3, #11]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	f000 fb2d 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// F OFF
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7b18      	ldrb	r0, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7b59      	ldrb	r1, [r3, #13]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f000 fb1f 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// G OFF
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7b98      	ldrb	r0, [r3, #14]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	7bd9      	ldrb	r1, [r3, #15]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	f000 fb11 	bl	8003410 <GPIO_voidSetPinValue>
		break ;
 8002dee:	e033      	b.n	8002e58 <_7SegSeven+0x126>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7898      	ldrb	r0, [r3, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	78d9      	ldrb	r1, [r3, #3]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	f000 fb02 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7918      	ldrb	r0, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7959      	ldrb	r1, [r3, #5]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	f000 faf4 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7998      	ldrb	r0, [r3, #6]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	79d9      	ldrb	r1, [r3, #7]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 fae6 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7a18      	ldrb	r0, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7a59      	ldrb	r1, [r3, #9]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f000 fadd 	bl	8003410 <GPIO_voidSetPinValue>
		break;
 8002e56:	bf00      	nop
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_7SegEight>:
static void _7SegEight (_7Segment_Config* ptr_config) 
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <_7SegEight+0x16>
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d040      	beq.n	8002ef6 <_7SegEight+0x96>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
		
		break;
	}
}
 8002e74:	e069      	b.n	8002f4a <_7SegEight+0xea>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// A ON 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7898      	ldrb	r0, [r3, #2]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	78d9      	ldrb	r1, [r3, #3]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f000 fac4 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// B ON
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7918      	ldrb	r0, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7959      	ldrb	r1, [r3, #5]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	f000 fabb 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;	// C ON
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7998      	ldrb	r0, [r3, #6]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	79d9      	ldrb	r1, [r3, #7]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f000 fab2 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// D ON
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7a18      	ldrb	r0, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7a59      	ldrb	r1, [r3, #9]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f000 faa9 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// E ON
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7a98      	ldrb	r0, [r3, #10]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7ad9      	ldrb	r1, [r3, #11]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f000 faa0 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// F ON
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7b18      	ldrb	r0, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7b59      	ldrb	r1, [r3, #13]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	f000 fa97 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// G ON
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7b98      	ldrb	r0, [r3, #14]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7bd9      	ldrb	r1, [r3, #15]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f000 fa8e 	bl	8003410 <GPIO_voidSetPinValue>
		break ;
 8002ef4:	e029      	b.n	8002f4a <_7SegEight+0xea>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7898      	ldrb	r0, [r3, #2]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	78d9      	ldrb	r1, [r3, #3]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	f000 fa84 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7918      	ldrb	r0, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7959      	ldrb	r1, [r3, #5]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	f000 fa7b 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7998      	ldrb	r0, [r3, #6]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	79d9      	ldrb	r1, [r3, #7]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	f000 fa72 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7a18      	ldrb	r0, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7a59      	ldrb	r1, [r3, #9]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 fa64 	bl	8003410 <GPIO_voidSetPinValue>
		break;
 8002f48:	bf00      	nop
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_7SegNine>:
static void _7SegNine  (_7Segment_Config* ptr_config) 
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
	switch(ACCESS_STRUCT(ptr_config,_7SegmentMode))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	785b      	ldrb	r3, [r3, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <_7SegNine+0x16>
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d045      	beq.n	8002ff2 <_7SegNine+0xa0>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
		
		break;
	}
}
 8002f66:	e073      	b.n	8003050 <_7SegNine+0xfe>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// A ON 
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7898      	ldrb	r0, [r3, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	78d9      	ldrb	r1, [r3, #3]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	f000 fa4b 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// B ON
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7918      	ldrb	r0, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7959      	ldrb	r1, [r3, #5]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f000 fa42 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;	// C ON
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7998      	ldrb	r0, [r3, #6]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	79d9      	ldrb	r1, [r3, #7]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f000 fa39 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// D ON
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7a18      	ldrb	r0, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7a59      	ldrb	r1, [r3, #9]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 fa30 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_E_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ;		// E OFF
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7a98      	ldrb	r0, [r3, #10]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7ad9      	ldrb	r1, [r3, #11]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f000 fa22 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_F_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// F ON
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7b18      	ldrb	r0, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7b59      	ldrb	r1, [r3, #13]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f000 fa19 	bl	8003410 <GPIO_voidSetPinValue>
		 GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_G_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 	// G ON
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7b98      	ldrb	r0, [r3, #14]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7bd9      	ldrb	r1, [r3, #15]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f000 fa10 	bl	8003410 <GPIO_voidSetPinValue>
		break ;
 8002ff0:	e02e      	b.n	8003050 <_7SegNine+0xfe>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_A_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7898      	ldrb	r0, [r3, #2]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	78d9      	ldrb	r1, [r3, #3]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	f000 fa01 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_B_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7918      	ldrb	r0, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7959      	ldrb	r1, [r3, #5]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	f000 f9f8 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_C_PIN, ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7998      	ldrb	r0, [r3, #6]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	79d9      	ldrb	r1, [r3, #7]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	f000 f9ef 	bl	8003410 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PORT, ACCESS_STRUCT(ptr_config,_7SegmentPins)._7SEG_D_PIN, !ACCESS_STRUCT(ptr_config,_7SegmentType)) ; 		
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7a18      	ldrb	r0, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7a59      	ldrb	r1, [r3, #9]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	f000 f9e1 	bl	8003410 <GPIO_voidSetPinValue>
		break;
 800304e:	bf00      	nop
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <AFIO_voidEXTIConfiguration>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void AFIO_voidEXTIConfiguration(EXTI_Lines Copy_LineID , u8 Copy_u8PortNumber)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	460a      	mov	r2, r1
 8003062:	71fb      	strb	r3, [r7, #7]
 8003064:	4613      	mov	r3, r2
 8003066:	71bb      	strb	r3, [r7, #6]
    Copy_u8PortNumber = Copy_u8PortNumber - PORTA ; // Ex PORTB = 3 = 3 - 2 = 1 
 8003068:	79bb      	ldrb	r3, [r7, #6]
 800306a:	3b02      	subs	r3, #2
 800306c:	71bb      	strb	r3, [r7, #6]
    u8 LOC_u8IntIndex = 0  ; 
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
    u8 LOC_u8LinePosition = 0  ; 
 8003072:	2300      	movs	r3, #0
 8003074:	73bb      	strb	r3, [r7, #14]
    LOC_u8IntIndex = Copy_LineID / 4 ;
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	73fb      	strb	r3, [r7, #15]
    LOC_u8LinePosition = Copy_LineID % 4 ;  
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	73bb      	strb	r3, [r7, #14]
    /*			RESET		*/
	AFIO -> AFIO_EXTICR[LOC_u8IntIndex] &=~((0b1111)<<(LOC_u8LinePosition));
 8003084:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <AFIO_voidEXTIConfiguration+0x78>)
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	3302      	adds	r3, #2
 800308a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800308e:	7bbb      	ldrb	r3, [r7, #14]
 8003090:	210f      	movs	r1, #15
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	4618      	mov	r0, r3
 800309a:	490d      	ldr	r1, [pc, #52]	; (80030d0 <AFIO_voidEXTIConfiguration+0x78>)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	4002      	ands	r2, r0
 80030a0:	3302      	adds	r3, #2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*			ASSIGN		*/
	AFIO -> AFIO_EXTICR[LOC_u8IntIndex]  |= ((Copy_u8PortNumber)<<(LOC_u8LinePosition));
 80030a6:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <AFIO_voidEXTIConfiguration+0x78>)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	3302      	adds	r3, #2
 80030ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030b0:	79b9      	ldrb	r1, [r7, #6]
 80030b2:	7bbb      	ldrb	r3, [r7, #14]
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	4905      	ldr	r1, [pc, #20]	; (80030d0 <AFIO_voidEXTIConfiguration+0x78>)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	4302      	orrs	r2, r0
 80030c0:	3302      	adds	r3, #2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	40010400 	.word	0x40010400

080030d4 <EXTI_voidInitLine>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void EXTI_voidInitLine(EXTI_Lines copy_LineID , EXTI_CapturingMode copy_SetModeOfIRQ)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	460a      	mov	r2, r1
 80030de:	71fb      	strb	r3, [r7, #7]
 80030e0:	4613      	mov	r3, r2
 80030e2:	71bb      	strb	r3, [r7, #6]
    switch (copy_SetModeOfIRQ)
 80030e4:	79bb      	ldrb	r3, [r7, #6]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d019      	beq.n	800311e <EXTI_voidInitLine+0x4a>
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d02c      	beq.n	8003148 <EXTI_voidInitLine+0x74>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d000      	beq.n	80030f4 <EXTI_voidInitLine+0x20>
    case EXTI_ON_CHANGE: 
    SET_BIT(EXTI->RTSR , copy_LineID);
    SET_BIT(EXTI->FTSR , copy_LineID);
    default:
        // <TODO> ERROR
        break;
 80030f2:	e03d      	b.n	8003170 <EXTI_voidInitLine+0x9c>
    CLR_BIT(EXTI->FTSR , copy_LineID);
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <EXTI_voidInitLine+0xa8>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	79fa      	ldrb	r2, [r7, #7]
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	43d2      	mvns	r2, r2
 8003102:	4611      	mov	r1, r2
 8003104:	4a1d      	ldr	r2, [pc, #116]	; (800317c <EXTI_voidInitLine+0xa8>)
 8003106:	400b      	ands	r3, r1
 8003108:	60d3      	str	r3, [r2, #12]
    SET_BIT(EXTI->RTSR , copy_LineID);
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <EXTI_voidInitLine+0xa8>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	79fa      	ldrb	r2, [r7, #7]
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4611      	mov	r1, r2
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <EXTI_voidInitLine+0xa8>)
 800311a:	430b      	orrs	r3, r1
 800311c:	6093      	str	r3, [r2, #8]
    SET_BIT(EXTI->FTSR , copy_LineID);
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <EXTI_voidInitLine+0xa8>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	79fa      	ldrb	r2, [r7, #7]
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4611      	mov	r1, r2
 800312c:	4a13      	ldr	r2, [pc, #76]	; (800317c <EXTI_voidInitLine+0xa8>)
 800312e:	430b      	orrs	r3, r1
 8003130:	60d3      	str	r3, [r2, #12]
    CLR_BIT(EXTI->RTSR , copy_LineID);
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <EXTI_voidInitLine+0xa8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	79fa      	ldrb	r2, [r7, #7]
 8003138:	2101      	movs	r1, #1
 800313a:	fa01 f202 	lsl.w	r2, r1, r2
 800313e:	43d2      	mvns	r2, r2
 8003140:	4611      	mov	r1, r2
 8003142:	4a0e      	ldr	r2, [pc, #56]	; (800317c <EXTI_voidInitLine+0xa8>)
 8003144:	400b      	ands	r3, r1
 8003146:	6093      	str	r3, [r2, #8]
    SET_BIT(EXTI->RTSR , copy_LineID);
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <EXTI_voidInitLine+0xa8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	79fa      	ldrb	r2, [r7, #7]
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	4611      	mov	r1, r2
 8003156:	4a09      	ldr	r2, [pc, #36]	; (800317c <EXTI_voidInitLine+0xa8>)
 8003158:	430b      	orrs	r3, r1
 800315a:	6093      	str	r3, [r2, #8]
    SET_BIT(EXTI->FTSR , copy_LineID);
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <EXTI_voidInitLine+0xa8>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	79fa      	ldrb	r2, [r7, #7]
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	4611      	mov	r1, r2
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <EXTI_voidInitLine+0xa8>)
 800316c:	430b      	orrs	r3, r1
 800316e:	60d3      	str	r3, [r2, #12]
        break;
 8003170:	bf00      	nop
    }
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40010400 	.word	0x40010400

08003180 <EXTI_voidEnableEXTI>:


void EXTI_voidEnableEXTI(EXTI_Lines copy_LineID)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
    SET_BIT((EXTI->IMR) , copy_LineID );
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <EXTI_voidEnableEXTI+0x28>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	79fa      	ldrb	r2, [r7, #7]
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	4611      	mov	r1, r2
 8003198:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <EXTI_voidEnableEXTI+0x28>)
 800319a:	430b      	orrs	r3, r1
 800319c:	6013      	str	r3, [r2, #0]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	40010400 	.word	0x40010400

080031ac <EXTI_voidSetCallBackFCN>:
{
    EXTI_voidInitLine(copy_LineID,copy_SetModeOfIRQ);
}

void EXTI_voidSetCallBackFCN(EXTI_Lines copy_LineID , EXTI_voidPtrToFunction ptr_ISRFunc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
    EXTI_PtrFunction[copy_LineID] = ptr_ISRFunc ; 
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	4904      	ldr	r1, [pc, #16]	; (80031cc <EXTI_voidSetCallBackFCN+0x20>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	200000d8 	.word	0x200000d8

080031d0 <EXTI0_IRQHandler>:

/************************************* Callback Functions   ********************************/
   void EXTI0_IRQHandler(void)
  {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[0]();
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <EXTI0_IRQHandler+0x1c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<0);
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <EXTI0_IRQHandler+0x20>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <EXTI0_IRQHandler+0x20>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6153      	str	r3, [r2, #20]

  }
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200000d8 	.word	0x200000d8
 80031f0:	40010400 	.word	0x40010400

080031f4 <EXTI1_IRQHandler>:
   void EXTI1_IRQHandler(void)
  {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[1]();
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <EXTI1_IRQHandler+0x1c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<1);
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <EXTI1_IRQHandler+0x20>)
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4a04      	ldr	r2, [pc, #16]	; (8003214 <EXTI1_IRQHandler+0x20>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	6153      	str	r3, [r2, #20]
  }
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200000d8 	.word	0x200000d8
 8003214:	40010400 	.word	0x40010400

08003218 <EXTI2_IRQHandler>:
   void EXTI2_IRQHandler(void)
  {
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[2]();
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <EXTI2_IRQHandler+0x1c>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<2);
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <EXTI2_IRQHandler+0x20>)
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	4a04      	ldr	r2, [pc, #16]	; (8003238 <EXTI2_IRQHandler+0x20>)
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	6153      	str	r3, [r2, #20]
  }
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	200000d8 	.word	0x200000d8
 8003238:	40010400 	.word	0x40010400

0800323c <EXTI3_IRQHandler>:
   void EXTI3_IRQHandler(void)
  {
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[3]();
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <EXTI3_IRQHandler+0x1c>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<3);
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <EXTI3_IRQHandler+0x20>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <EXTI3_IRQHandler+0x20>)
 800324c:	f043 0308 	orr.w	r3, r3, #8
 8003250:	6153      	str	r3, [r2, #20]
  }
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200000d8 	.word	0x200000d8
 800325c:	40010400 	.word	0x40010400

08003260 <EXTI4_IRQHandler>:
   void EXTI4_IRQHandler(void)
  {
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
    EXTI_PtrFunction[4]();
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <EXTI4_IRQHandler+0x1c>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	4798      	blx	r3
    /*	CLR Pending Flag	*/
    EXTI->PR |= (1<<4);
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <EXTI4_IRQHandler+0x20>)
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4a04      	ldr	r2, [pc, #16]	; (8003280 <EXTI4_IRQHandler+0x20>)
 8003270:	f043 0310 	orr.w	r3, r3, #16
 8003274:	6153      	str	r3, [r2, #20]
  }
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200000d8 	.word	0x200000d8
 8003280:	40010400 	.word	0x40010400

08003284 <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
 800328e:	460b      	mov	r3, r1
 8003290:	71bb      	strb	r3, [r7, #6]
 8003292:	4613      	mov	r3, r2
 8003294:	717b      	strb	r3, [r7, #5]
    switch(Copy_u8Port)
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d03e      	beq.n	800331a <GPIO_voidSetPinDirection+0x96>
 800329c:	2b04      	cmp	r3, #4
 800329e:	d075      	beq.n	800338c <GPIO_voidSetPinDirection+0x108>
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d000      	beq.n	80032a6 <GPIO_voidSetPinDirection+0x22>
			else 
			{
				/* error */ 
			}
			break;
		default : break ;	
 80032a4:	e0a9      	b.n	80033fa <GPIO_voidSetPinDirection+0x176>
			if(Copy_Pin <= 7)
 80032a6:	79bb      	ldrb	r3, [r7, #6]
 80032a8:	2b07      	cmp	r3, #7
 80032aa:	d817      	bhi.n	80032dc <GPIO_voidSetPinDirection+0x58>
				GPIOA->CRL &= ~(0b1111<<(Copy_Pin*4));
 80032ac:	4b55      	ldr	r3, [pc, #340]	; (8003404 <GPIO_voidSetPinDirection+0x180>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	79ba      	ldrb	r2, [r7, #6]
 80032b2:	0092      	lsls	r2, r2, #2
 80032b4:	210f      	movs	r1, #15
 80032b6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ba:	43d2      	mvns	r2, r2
 80032bc:	4611      	mov	r1, r2
 80032be:	4a51      	ldr	r2, [pc, #324]	; (8003404 <GPIO_voidSetPinDirection+0x180>)
 80032c0:	400b      	ands	r3, r1
 80032c2:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= ((Copy_u8Mode)<< (4*Copy_Pin));
 80032c4:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <GPIO_voidSetPinDirection+0x180>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	7979      	ldrb	r1, [r7, #5]
 80032ca:	79ba      	ldrb	r2, [r7, #6]
 80032cc:	0092      	lsls	r2, r2, #2
 80032ce:	fa01 f202 	lsl.w	r2, r1, r2
 80032d2:	4611      	mov	r1, r2
 80032d4:	4a4b      	ldr	r2, [pc, #300]	; (8003404 <GPIO_voidSetPinDirection+0x180>)
 80032d6:	430b      	orrs	r3, r1
 80032d8:	6013      	str	r3, [r2, #0]
			break;
 80032da:	e089      	b.n	80033f0 <GPIO_voidSetPinDirection+0x16c>
			else if (Copy_Pin <= 15 )
 80032dc:	79bb      	ldrb	r3, [r7, #6]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	f200 8086 	bhi.w	80033f0 <GPIO_voidSetPinDirection+0x16c>
				Copy_Pin = Copy_Pin - 8 ;
 80032e4:	79bb      	ldrb	r3, [r7, #6]
 80032e6:	3b08      	subs	r3, #8
 80032e8:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~(0b1111<<(Copy_Pin*4));
 80032ea:	4b46      	ldr	r3, [pc, #280]	; (8003404 <GPIO_voidSetPinDirection+0x180>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	79ba      	ldrb	r2, [r7, #6]
 80032f0:	0092      	lsls	r2, r2, #2
 80032f2:	210f      	movs	r1, #15
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	43d2      	mvns	r2, r2
 80032fa:	4611      	mov	r1, r2
 80032fc:	4a41      	ldr	r2, [pc, #260]	; (8003404 <GPIO_voidSetPinDirection+0x180>)
 80032fe:	400b      	ands	r3, r1
 8003300:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <GPIO_voidSetPinDirection+0x180>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	7979      	ldrb	r1, [r7, #5]
 8003308:	79ba      	ldrb	r2, [r7, #6]
 800330a:	0092      	lsls	r2, r2, #2
 800330c:	fa01 f202 	lsl.w	r2, r1, r2
 8003310:	4611      	mov	r1, r2
 8003312:	4a3c      	ldr	r2, [pc, #240]	; (8003404 <GPIO_voidSetPinDirection+0x180>)
 8003314:	430b      	orrs	r3, r1
 8003316:	6053      	str	r3, [r2, #4]
			break;
 8003318:	e06a      	b.n	80033f0 <GPIO_voidSetPinDirection+0x16c>
			if(Copy_Pin <= 7)
 800331a:	79bb      	ldrb	r3, [r7, #6]
 800331c:	2b07      	cmp	r3, #7
 800331e:	d817      	bhi.n	8003350 <GPIO_voidSetPinDirection+0xcc>
				GPIOB->CRL &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <GPIO_voidSetPinDirection+0x184>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	79ba      	ldrb	r2, [r7, #6]
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	210f      	movs	r1, #15
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	43d2      	mvns	r2, r2
 8003330:	4611      	mov	r1, r2
 8003332:	4a35      	ldr	r2, [pc, #212]	; (8003408 <GPIO_voidSetPinDirection+0x184>)
 8003334:	400b      	ands	r3, r1
 8003336:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 8003338:	4b33      	ldr	r3, [pc, #204]	; (8003408 <GPIO_voidSetPinDirection+0x184>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	7979      	ldrb	r1, [r7, #5]
 800333e:	79ba      	ldrb	r2, [r7, #6]
 8003340:	0092      	lsls	r2, r2, #2
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	4611      	mov	r1, r2
 8003348:	4a2f      	ldr	r2, [pc, #188]	; (8003408 <GPIO_voidSetPinDirection+0x184>)
 800334a:	430b      	orrs	r3, r1
 800334c:	6013      	str	r3, [r2, #0]
			break;
 800334e:	e051      	b.n	80033f4 <GPIO_voidSetPinDirection+0x170>
			else if (Copy_Pin <= 15 )
 8003350:	79bb      	ldrb	r3, [r7, #6]
 8003352:	2b0f      	cmp	r3, #15
 8003354:	d84e      	bhi.n	80033f4 <GPIO_voidSetPinDirection+0x170>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 8003356:	79bb      	ldrb	r3, [r7, #6]
 8003358:	3b08      	subs	r3, #8
 800335a:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~(0b1111<<(Copy_Pin*4));
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <GPIO_voidSetPinDirection+0x184>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	79ba      	ldrb	r2, [r7, #6]
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	210f      	movs	r1, #15
 8003366:	fa01 f202 	lsl.w	r2, r1, r2
 800336a:	43d2      	mvns	r2, r2
 800336c:	4611      	mov	r1, r2
 800336e:	4a26      	ldr	r2, [pc, #152]	; (8003408 <GPIO_voidSetPinDirection+0x184>)
 8003370:	400b      	ands	r3, r1
 8003372:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <GPIO_voidSetPinDirection+0x184>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	7979      	ldrb	r1, [r7, #5]
 800337a:	79ba      	ldrb	r2, [r7, #6]
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	fa01 f202 	lsl.w	r2, r1, r2
 8003382:	4611      	mov	r1, r2
 8003384:	4a20      	ldr	r2, [pc, #128]	; (8003408 <GPIO_voidSetPinDirection+0x184>)
 8003386:	430b      	orrs	r3, r1
 8003388:	6053      	str	r3, [r2, #4]
			break;
 800338a:	e033      	b.n	80033f4 <GPIO_voidSetPinDirection+0x170>
			if(Copy_Pin <= 7)
 800338c:	79bb      	ldrb	r3, [r7, #6]
 800338e:	2b07      	cmp	r3, #7
 8003390:	d810      	bhi.n	80033b4 <GPIO_voidSetPinDirection+0x130>
				GPIOC->CRL &= ((0b0000)     << ( 4 * Copy_Pin)) ; // to reset pin
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <GPIO_voidSetPinDirection+0x188>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <GPIO_voidSetPinDirection+0x188>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
				GPIOC->CRL |= ((Copy_u8Mode)<< ( 4 * Copy_Pin));
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <GPIO_voidSetPinDirection+0x188>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	7979      	ldrb	r1, [r7, #5]
 80033a2:	79ba      	ldrb	r2, [r7, #6]
 80033a4:	0092      	lsls	r2, r2, #2
 80033a6:	fa01 f202 	lsl.w	r2, r1, r2
 80033aa:	4611      	mov	r1, r2
 80033ac:	4a17      	ldr	r2, [pc, #92]	; (800340c <GPIO_voidSetPinDirection+0x188>)
 80033ae:	430b      	orrs	r3, r1
 80033b0:	6013      	str	r3, [r2, #0]
			break;
 80033b2:	e021      	b.n	80033f8 <GPIO_voidSetPinDirection+0x174>
			else if (Copy_Pin <= 15 )
 80033b4:	79bb      	ldrb	r3, [r7, #6]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	d81e      	bhi.n	80033f8 <GPIO_voidSetPinDirection+0x174>
				Copy_Pin = Copy_Pin - 8 ; //TO REPRESENT PIN 8 IN FIRST 4 BITS IN CRH REGESTER
 80033ba:	79bb      	ldrb	r3, [r7, #6]
 80033bc:	3b08      	subs	r3, #8
 80033be:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~(0b1111<<(Copy_Pin*4)); // to reset pin
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <GPIO_voidSetPinDirection+0x188>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	79ba      	ldrb	r2, [r7, #6]
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	210f      	movs	r1, #15
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	43d2      	mvns	r2, r2
 80033d0:	4611      	mov	r1, r2
 80033d2:	4a0e      	ldr	r2, [pc, #56]	; (800340c <GPIO_voidSetPinDirection+0x188>)
 80033d4:	400b      	ands	r3, r1
 80033d6:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= ((Copy_u8Mode)<< (4*Copy_Pin));
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <GPIO_voidSetPinDirection+0x188>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	7979      	ldrb	r1, [r7, #5]
 80033de:	79ba      	ldrb	r2, [r7, #6]
 80033e0:	0092      	lsls	r2, r2, #2
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	4611      	mov	r1, r2
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <GPIO_voidSetPinDirection+0x188>)
 80033ea:	430b      	orrs	r3, r1
 80033ec:	6053      	str	r3, [r2, #4]
			break;
 80033ee:	e003      	b.n	80033f8 <GPIO_voidSetPinDirection+0x174>
			break;
 80033f0:	bf00      	nop
 80033f2:	e002      	b.n	80033fa <GPIO_voidSetPinDirection+0x176>
			break;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <GPIO_voidSetPinDirection+0x176>
			break;
 80033f8:	bf00      	nop
	}

}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	40010800 	.word	0x40010800
 8003408:	40010c00 	.word	0x40010c00
 800340c:	40011000 	.word	0x40011000

08003410 <GPIO_voidSetPinValue>:
		default :  break ;
	}

}
void GPIO_voidSetPinValue(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Value)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
 800341a:	460b      	mov	r3, r1
 800341c:	71bb      	strb	r3, [r7, #6]
 800341e:	4613      	mov	r3, r2
 8003420:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d017      	beq.n	8003458 <GPIO_voidSetPinValue+0x48>
 8003428:	2b04      	cmp	r3, #4
 800342a:	d028      	beq.n	800347e <GPIO_voidSetPinValue+0x6e>
 800342c:	2b02      	cmp	r3, #2
 800342e:	d000      	beq.n	8003432 <GPIO_voidSetPinValue+0x22>
					break ; 
			}	
			break ;
		default :
		//error
			break ;
 8003430:	e038      	b.n	80034a4 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8003432:	797b      	ldrb	r3, [r7, #5]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <GPIO_voidSetPinValue+0x3a>
 8003438:	2b01      	cmp	r3, #1
 800343a:	d000      	beq.n	800343e <GPIO_voidSetPinValue+0x2e>
					break ; 
 800343c:	e00b      	b.n	8003456 <GPIO_voidSetPinValue+0x46>
					GPIOA->BSRR = (1 << Copy_Pin);
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	2201      	movs	r2, #1
 8003442:	409a      	lsls	r2, r3
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <GPIO_voidSetPinValue+0xa0>)
 8003446:	611a      	str	r2, [r3, #16]
					break ;
 8003448:	e005      	b.n	8003456 <GPIO_voidSetPinValue+0x46>
					GPIOA->BRR = (1 << Copy_Pin);
 800344a:	79bb      	ldrb	r3, [r7, #6]
 800344c:	2201      	movs	r2, #1
 800344e:	409a      	lsls	r2, r3
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <GPIO_voidSetPinValue+0xa0>)
 8003452:	615a      	str	r2, [r3, #20]
					break ;
 8003454:	bf00      	nop
			break ; 
 8003456:	e025      	b.n	80034a4 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 8003458:	797b      	ldrb	r3, [r7, #5]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <GPIO_voidSetPinValue+0x60>
 800345e:	2b01      	cmp	r3, #1
 8003460:	d000      	beq.n	8003464 <GPIO_voidSetPinValue+0x54>
					break ; 
 8003462:	e00b      	b.n	800347c <GPIO_voidSetPinValue+0x6c>
					GPIOB->BSRR = (1 << Copy_Pin);
 8003464:	79bb      	ldrb	r3, [r7, #6]
 8003466:	2201      	movs	r2, #1
 8003468:	409a      	lsls	r2, r3
 800346a:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <GPIO_voidSetPinValue+0xa4>)
 800346c:	611a      	str	r2, [r3, #16]
					break ;
 800346e:	e005      	b.n	800347c <GPIO_voidSetPinValue+0x6c>
					GPIOB->BRR = (1 << Copy_Pin);
 8003470:	79bb      	ldrb	r3, [r7, #6]
 8003472:	2201      	movs	r2, #1
 8003474:	409a      	lsls	r2, r3
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <GPIO_voidSetPinValue+0xa4>)
 8003478:	615a      	str	r2, [r3, #20]
					break ;
 800347a:	bf00      	nop
			break ;
 800347c:	e012      	b.n	80034a4 <GPIO_voidSetPinValue+0x94>
			switch (Copy_u8Value)
 800347e:	797b      	ldrb	r3, [r7, #5]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <GPIO_voidSetPinValue+0x86>
 8003484:	2b01      	cmp	r3, #1
 8003486:	d000      	beq.n	800348a <GPIO_voidSetPinValue+0x7a>
					break ; 
 8003488:	e00b      	b.n	80034a2 <GPIO_voidSetPinValue+0x92>
					GPIOC->BSRR = (1 << Copy_Pin);
 800348a:	79bb      	ldrb	r3, [r7, #6]
 800348c:	2201      	movs	r2, #1
 800348e:	409a      	lsls	r2, r3
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <GPIO_voidSetPinValue+0xa8>)
 8003492:	611a      	str	r2, [r3, #16]
					break ;
 8003494:	e005      	b.n	80034a2 <GPIO_voidSetPinValue+0x92>
					GPIOC->BRR = (1 << Copy_Pin);
 8003496:	79bb      	ldrb	r3, [r7, #6]
 8003498:	2201      	movs	r2, #1
 800349a:	409a      	lsls	r2, r3
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <GPIO_voidSetPinValue+0xa8>)
 800349e:	615a      	str	r2, [r3, #20]
					break ;
 80034a0:	bf00      	nop
			break ;
 80034a2:	bf00      	nop
	}

}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010800 	.word	0x40010800
 80034b4:	40010c00 	.word	0x40010c00
 80034b8:	40011000 	.word	0x40011000

080034bc <GPIO_u8GetPinValue>:


}

u8 GPIO_u8GetPinValue (u8 Copy_u8Port, Pin_t Copy_Pin)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	460a      	mov	r2, r1
 80034c6:	71fb      	strb	r3, [r7, #7]
 80034c8:	4613      	mov	r3, r2
 80034ca:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
	if(Copy_Pin > 15)
	{
		/* error */
	}
	switch(Copy_u8Port)
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d00e      	beq.n	80034f4 <GPIO_u8GetPinValue+0x38>
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d016      	beq.n	8003508 <GPIO_u8GetPinValue+0x4c>
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d000      	beq.n	80034e0 <GPIO_u8GetPinValue+0x24>
		case PORTC :
			LOC_u8Result  = GET_BIT(GPIOC->IDR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 80034de:	e01d      	b.n	800351c <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOA->IDR , Copy_Pin ) ;
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <GPIO_u8GetPinValue+0x6c>)
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	79bb      	ldrb	r3, [r7, #6]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
			break ;
 80034f2:	e013      	b.n	800351c <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOB->IDR , Copy_Pin ) ;
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <GPIO_u8GetPinValue+0x70>)
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	79bb      	ldrb	r3, [r7, #6]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
			break ;
 8003506:	e009      	b.n	800351c <GPIO_u8GetPinValue+0x60>
			LOC_u8Result  = GET_BIT(GPIOC->IDR , Copy_Pin ) ;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <GPIO_u8GetPinValue+0x74>)
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	79bb      	ldrb	r3, [r7, #6]
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
			break ;
 800351a:	bf00      	nop
	}
	return LOC_u8Result ;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	40010800 	.word	0x40010800
 800352c:	40010c00 	.word	0x40010c00
 8003530:	40011000 	.word	0x40011000

08003534 <GPIO_u8ChoosePullMode>:

void GPIO_u8ChoosePullMode(u8 Copy_u8Port, Pin_t Copy_Pin, GPIO_PULL_MODE_t Copy_Mode)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
 800353e:	460b      	mov	r3, r1
 8003540:	71bb      	strb	r3, [r7, #6]
 8003542:	4613      	mov	r3, r2
 8003544:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	2b03      	cmp	r3, #3
 800354a:	d022      	beq.n	8003592 <GPIO_u8ChoosePullMode+0x5e>
 800354c:	2b04      	cmp	r3, #4
 800354e:	d03e      	beq.n	80035ce <GPIO_u8ChoosePullMode+0x9a>
 8003550:	2b02      	cmp	r3, #2
 8003552:	d000      	beq.n	8003556 <GPIO_u8ChoosePullMode+0x22>
                case GPIO_PULL_UP   : SET_BIT(GPIOC->ODR, Copy_Pin);break;
                default : /*!<TODO: Error Code*/break;
            }			break ;
		default :
			/* error */
			break ;
 8003554:	e059      	b.n	800360a <GPIO_u8ChoosePullMode+0xd6>
            switch(Copy_Mode)
 8003556:	797b      	ldrb	r3, [r7, #5]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <GPIO_u8ChoosePullMode+0x2e>
 800355c:	2b01      	cmp	r3, #1
 800355e:	d00c      	beq.n	800357a <GPIO_u8ChoosePullMode+0x46>
                default : /*!<TODO: Error Code*/break;
 8003560:	e016      	b.n	8003590 <GPIO_u8ChoosePullMode+0x5c>
                case GPIO_PULL_DOWN : CLR_BIT(GPIOA->ODR, Copy_Pin);break;
 8003562:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <GPIO_u8ChoosePullMode+0xe0>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	79ba      	ldrb	r2, [r7, #6]
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f202 	lsl.w	r2, r1, r2
 800356e:	43d2      	mvns	r2, r2
 8003570:	4611      	mov	r1, r2
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <GPIO_u8ChoosePullMode+0xe0>)
 8003574:	400b      	ands	r3, r1
 8003576:	60d3      	str	r3, [r2, #12]
 8003578:	e00a      	b.n	8003590 <GPIO_u8ChoosePullMode+0x5c>
                case GPIO_PULL_UP   : SET_BIT(GPIOA->ODR, Copy_Pin);break;
 800357a:	4b26      	ldr	r3, [pc, #152]	; (8003614 <GPIO_u8ChoosePullMode+0xe0>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	79ba      	ldrb	r2, [r7, #6]
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	4611      	mov	r1, r2
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <GPIO_u8ChoosePullMode+0xe0>)
 800358a:	430b      	orrs	r3, r1
 800358c:	60d3      	str	r3, [r2, #12]
 800358e:	bf00      	nop
            }			break ;
 8003590:	e03b      	b.n	800360a <GPIO_u8ChoosePullMode+0xd6>
            switch(Copy_Mode)
 8003592:	797b      	ldrb	r3, [r7, #5]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <GPIO_u8ChoosePullMode+0x6a>
 8003598:	2b01      	cmp	r3, #1
 800359a:	d00c      	beq.n	80035b6 <GPIO_u8ChoosePullMode+0x82>
                default : /*!<TODO: Error Code*/break;
 800359c:	e016      	b.n	80035cc <GPIO_u8ChoosePullMode+0x98>
                case GPIO_PULL_DOWN : CLR_BIT(GPIOB->ODR, Copy_Pin);break;
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <GPIO_u8ChoosePullMode+0xe4>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	79ba      	ldrb	r2, [r7, #6]
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	43d2      	mvns	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <GPIO_u8ChoosePullMode+0xe4>)
 80035b0:	400b      	ands	r3, r1
 80035b2:	60d3      	str	r3, [r2, #12]
 80035b4:	e00a      	b.n	80035cc <GPIO_u8ChoosePullMode+0x98>
                case GPIO_PULL_UP   : SET_BIT(GPIOB->ODR, Copy_Pin);break;
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <GPIO_u8ChoosePullMode+0xe4>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	79ba      	ldrb	r2, [r7, #6]
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f202 	lsl.w	r2, r1, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4a14      	ldr	r2, [pc, #80]	; (8003618 <GPIO_u8ChoosePullMode+0xe4>)
 80035c6:	430b      	orrs	r3, r1
 80035c8:	60d3      	str	r3, [r2, #12]
 80035ca:	bf00      	nop
            }			break ;
 80035cc:	e01d      	b.n	800360a <GPIO_u8ChoosePullMode+0xd6>
            switch(Copy_Mode)
 80035ce:	797b      	ldrb	r3, [r7, #5]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <GPIO_u8ChoosePullMode+0xa6>
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d00c      	beq.n	80035f2 <GPIO_u8ChoosePullMode+0xbe>
                default : /*!<TODO: Error Code*/break;
 80035d8:	e016      	b.n	8003608 <GPIO_u8ChoosePullMode+0xd4>
                case GPIO_PULL_DOWN : CLR_BIT(GPIOC->ODR, Copy_Pin);break;
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <GPIO_u8ChoosePullMode+0xe8>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	79ba      	ldrb	r2, [r7, #6]
 80035e0:	2101      	movs	r1, #1
 80035e2:	fa01 f202 	lsl.w	r2, r1, r2
 80035e6:	43d2      	mvns	r2, r2
 80035e8:	4611      	mov	r1, r2
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <GPIO_u8ChoosePullMode+0xe8>)
 80035ec:	400b      	ands	r3, r1
 80035ee:	60d3      	str	r3, [r2, #12]
 80035f0:	e00a      	b.n	8003608 <GPIO_u8ChoosePullMode+0xd4>
                case GPIO_PULL_UP   : SET_BIT(GPIOC->ODR, Copy_Pin);break;
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <GPIO_u8ChoosePullMode+0xe8>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	79ba      	ldrb	r2, [r7, #6]
 80035f8:	2101      	movs	r1, #1
 80035fa:	fa01 f202 	lsl.w	r2, r1, r2
 80035fe:	4611      	mov	r1, r2
 8003600:	4a06      	ldr	r2, [pc, #24]	; (800361c <GPIO_u8ChoosePullMode+0xe8>)
 8003602:	430b      	orrs	r3, r1
 8003604:	60d3      	str	r3, [r2, #12]
 8003606:	bf00      	nop
            }			break ;
 8003608:	bf00      	nop
	}

}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	40010800 	.word	0x40010800
 8003618:	40010c00 	.word	0x40010c00
 800361c:	40011000 	.word	0x40011000

08003620 <NVIC_voidEnableInterrupt>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void NVIC_voidEnableInterrupt  ( u8 Copy_u8IntNumber )
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8IntNumber <= 31)
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	2b1f      	cmp	r3, #31
 800362e:	d80a      	bhi.n	8003646 <NVIC_voidEnableInterrupt+0x26>
	{
		SET_BIT(NVIC_ISER[0] , Copy_u8IntNumber ); 
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <NVIC_voidEnableInterrupt+0x50>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	79fa      	ldrb	r2, [r7, #7]
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	4611      	mov	r1, r2
 800363e:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <NVIC_voidEnableInterrupt+0x50>)
 8003640:	430b      	orrs	r3, r1
 8003642:	6013      	str	r3, [r2, #0]
	}
	else 
	{
		/*	 <TODO> ERROR OUT OF INTERRUPT NUMBERS	*/
	}
}
 8003644:	e00f      	b.n	8003666 <NVIC_voidEnableInterrupt+0x46>
	else if (Copy_u8IntNumber <= 59 )
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	2b3b      	cmp	r3, #59	; 0x3b
 800364a:	d80c      	bhi.n	8003666 <NVIC_voidEnableInterrupt+0x46>
		Copy_u8IntNumber -= 32 ; 
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	3b20      	subs	r3, #32
 8003650:	71fb      	strb	r3, [r7, #7]
		SET_BIT(NVIC_ISER[1] , Copy_u8IntNumber ); 
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <NVIC_voidEnableInterrupt+0x54>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	79fa      	ldrb	r2, [r7, #7]
 8003658:	2101      	movs	r1, #1
 800365a:	fa01 f202 	lsl.w	r2, r1, r2
 800365e:	4611      	mov	r1, r2
 8003660:	4a04      	ldr	r2, [pc, #16]	; (8003674 <NVIC_voidEnableInterrupt+0x54>)
 8003662:	430b      	orrs	r3, r1
 8003664:	6013      	str	r3, [r2, #0]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	e000e100 	.word	0xe000e100
 8003674:	e000e104 	.word	0xe000e104

08003678 <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	460a      	mov	r2, r1
 8003682:	71fb      	strb	r3, [r7, #7]
 8003684:	4613      	mov	r3, r2
 8003686:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 8003688:	79bb      	ldrb	r3, [r7, #6]
 800368a:	2b1f      	cmp	r3, #31
 800368c:	d828      	bhi.n	80036e0 <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d00f      	beq.n	80036b4 <RCC_voidEnableClock+0x3c>
 8003694:	2b02      	cmp	r3, #2
 8003696:	d018      	beq.n	80036ca <RCC_voidEnableClock+0x52>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d000      	beq.n	800369e <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 800369c:	e020      	b.n	80036e0 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <RCC_voidEnableClock+0x74>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	79ba      	ldrb	r2, [r7, #6]
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	4611      	mov	r1, r2
 80036ac:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <RCC_voidEnableClock+0x74>)
 80036ae:	430b      	orrs	r3, r1
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e015      	b.n	80036e0 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <RCC_voidEnableClock+0x78>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	79ba      	ldrb	r2, [r7, #6]
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f202 	lsl.w	r2, r1, r2
 80036c0:	4611      	mov	r1, r2
 80036c2:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <RCC_voidEnableClock+0x78>)
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e00a      	b.n	80036e0 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <RCC_voidEnableClock+0x7c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	79ba      	ldrb	r2, [r7, #6]
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f202 	lsl.w	r2, r1, r2
 80036d6:	4611      	mov	r1, r2
 80036d8:	4a06      	ldr	r2, [pc, #24]	; (80036f4 <RCC_voidEnableClock+0x7c>)
 80036da:	430b      	orrs	r3, r1
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	bf00      	nop
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40021014 	.word	0x40021014
 80036f0:	4002101c 	.word	0x4002101c
 80036f4:	40021018 	.word	0x40021018

080036f8 <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <RCC_voidInitSysClocks+0x94>)
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 8003702:	4b23      	ldr	r3, [pc, #140]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
			   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
			#endif
			RCC_CFGR |= RCC_CFGR_PLLXTPRE_HSE_Div2;
		#elif RCC_PLL_INPUT == RCC_PLL_IN_HSE
				#if   RCC_PLL_HSE == RCC_PLL_HSE_CRYSTAL
					SET_BIT(RCC_CR, RCC_CR_CSSON);
 8003708:	4b20      	ldr	r3, [pc, #128]	; (800378c <RCC_voidInitSysClocks+0x94>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1f      	ldr	r2, [pc, #124]	; (800378c <RCC_voidInitSysClocks+0x94>)
 800370e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003712:	6013      	str	r3, [r2, #0]
					SET_BIT(RCC_CR, RCC_CR_HSEON);
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <RCC_voidInitSysClocks+0x94>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1c      	ldr	r2, [pc, #112]	; (800378c <RCC_voidInitSysClocks+0x94>)
 800371a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
					while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
 8003720:	bf00      	nop
 8003722:	4b1a      	ldr	r3, [pc, #104]	; (800378c <RCC_voidInitSysClocks+0x94>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0c5b      	lsrs	r3, r3, #17
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f8      	beq.n	8003722 <RCC_voidInitSysClocks+0x2a>
				   #warning("Wrong PLL input from HSE...Crystal is default")
				   SET_BIT(RCC_CR, RCC_CR_CSSON);
				   SET_BIT(RCC_CR, RCC_CR_HSEON);
				   while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
				#endif
				RCC_CFGR |= RCC_CFGR_PLLSRC_HSE;
 8003730:	4b17      	ldr	r3, [pc, #92]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a16      	ldr	r2, [pc, #88]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
		#endif
			/***************************** SET MUX VAL	***********************************/
				RCC_CFGR |= RCC_PLL_MUL_VAL ;
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 800373e:	4a14      	ldr	r2, [pc, #80]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CR, RCC_CR_PLLON);
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <RCC_voidInitSysClocks+0x94>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a10      	ldr	r2, [pc, #64]	; (800378c <RCC_voidInitSysClocks+0x94>)
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374e:	6013      	str	r3, [r2, #0]
			while(!(GET_BIT(RCC_CR, RCC_CR_PLLRDY)));
 8003750:	bf00      	nop
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <RCC_voidInitSysClocks+0x94>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	0e5b      	lsrs	r3, r3, #25
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f8      	beq.n	8003752 <RCC_voidInitSysClocks+0x5a>
			RCC_CFGR |= RCC_CFGR_SW_PLL;
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 800376e:	4a08      	ldr	r2, [pc, #32]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003776:	4a06      	ldr	r2, [pc, #24]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <RCC_voidInitSysClocks+0x98>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40021000 	.word	0x40021000
 8003790:	40021004 	.word	0x40021004

08003794 <SPI_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void SPI_voidInit(SPI_Select_t SPI_Number , SPI_config* SPI_UsrConfig)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
	u16 LOC_u16Reg_CR1 = 0 ;
 80037a0:	2300      	movs	r3, #0
 80037a2:	81fb      	strh	r3, [r7, #14]
	u16 LOC_u16Reg_CR2 = 0 ;
 80037a4:	2300      	movs	r3, #0
 80037a6:	81bb      	strh	r3, [r7, #12]

	/*	Enable SPI	*/
	LOC_u16Reg_CR1  = (1<<6) ;
 80037a8:	2340      	movs	r3, #64	; 0x40
 80037aa:	81fb      	strh	r3, [r7, #14]
	/* Configuration Master/Slave	*/
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_Mode ;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	89fb      	ldrh	r3, [r7, #14]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	81fb      	strh	r3, [r7, #14]
	/* Comm Mode	*/
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_CommMode ;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	885a      	ldrh	r2, [r3, #2]
 80037bc:	89fb      	ldrh	r3, [r7, #14]
 80037be:	4313      	orrs	r3, r2
 80037c0:	81fb      	strh	r3, [r7, #14]
	/* Frame Format	*/
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_DataSize ;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	88da      	ldrh	r2, [r3, #6]
 80037c6:	89fb      	ldrh	r3, [r7, #14]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	81fb      	strh	r3, [r7, #14]
	/* Clock Polarity/Phase	*/
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_IdleLevel ;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	7a1b      	ldrb	r3, [r3, #8]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	89fb      	ldrh	r3, [r7, #14]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	81fb      	strh	r3, [r7, #14]
	LOC_u16Reg_CR1  |= SPI_UsrConfig->SPI_DataSampling ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	7a5b      	ldrb	r3, [r3, #9]
 80037dc:	b29a      	uxth	r2, r3
 80037de:	89fb      	ldrh	r3, [r7, #14]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	81fb      	strh	r3, [r7, #14]
	/*	NSS	*/
	if(SPI_UsrConfig->SPI_SlaveSelectMangment == SPI_SSM_HW_MASTER_SS_EN)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d108      	bne.n	8003800 <SPI_voidInit+0x6c>
	{
		LOC_u16Reg_CR2 |= SPI_UsrConfig->SPI_SlaveSelectMangment ;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80037f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	81bb      	strh	r3, [r7, #12]
 80037fe:	e016      	b.n	800382e <SPI_voidInit+0x9a>
	}
	else if(SPI_UsrConfig->SPI_SlaveSelectMangment == SPI_SSM_HW_MASTER_SS_DISABLED)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003806:	f113 0f05 	cmn.w	r3, #5
 800380a:	d108      	bne.n	800381e <SPI_voidInit+0x8a>
	{
		LOC_u16Reg_CR2 &= SPI_UsrConfig->SPI_SlaveSelectMangment ;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8003812:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003816:	4013      	ands	r3, r2
 8003818:	b21b      	sxth	r3, r3
 800381a:	81bb      	strh	r3, [r7, #12]
 800381c:	e007      	b.n	800382e <SPI_voidInit+0x9a>
	}
	else
	{
		LOC_u16Reg_CR1 |= SPI_UsrConfig->SPI_SlaveSelectMangment ;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8003824:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003828:	4313      	orrs	r3, r2
 800382a:	b21b      	sxth	r3, r3
 800382c:	81fb      	strh	r3, [r7, #14]
	}
	/* Buad Rate	*/
	LOC_u16Reg_CR1 |= SPI_UsrConfig->SPI_BuadRate ;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	7b1b      	ldrb	r3, [r3, #12]
 8003832:	b29a      	uxth	r2, r3
 8003834:	89fb      	ldrh	r3, [r7, #14]
 8003836:	4313      	orrs	r3, r2
 8003838:	81fb      	strh	r3, [r7, #14]

	/*	Interrupt	*/
	if(SPI_UsrConfig->SPI_IRQ != SPI_IRQ_DISABLED)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	7b5b      	ldrb	r3, [r3, #13]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <SPI_voidInit+0xba>
	{
		LOC_u16Reg_CR2 |= SPI_UsrConfig->SPI_IRQ;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	7b5b      	ldrb	r3, [r3, #13]
 8003846:	b29a      	uxth	r2, r3
 8003848:	89bb      	ldrh	r3, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	81bb      	strh	r3, [r7, #12]
	}

	if(SPI_Number == SPI_1)
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <SPI_voidInit+0xd4>
	{
		Global_SPI_Config[0] = SPI_UsrConfig ;
 8003854:	4a0d      	ldr	r2, [pc, #52]	; (800388c <SPI_voidInit+0xf8>)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6013      	str	r3, [r2, #0]
		SPI1->CR1 = LOC_u16Reg_CR1 ;
 800385a:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <SPI_voidInit+0xfc>)
 800385c:	89fb      	ldrh	r3, [r7, #14]
 800385e:	6013      	str	r3, [r2, #0]
		SPI1->CR2 = LOC_u16Reg_CR2 ;
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <SPI_voidInit+0xfc>)
 8003862:	89bb      	ldrh	r3, [r7, #12]
 8003864:	6053      	str	r3, [r2, #4]
	else
	{
		// <!TODO> Error in Init
	}

}
 8003866:	e00b      	b.n	8003880 <SPI_voidInit+0xec>
	else if(SPI_Number == SPI_2)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <SPI_voidInit+0xec>
		Global_SPI_Config[1] = SPI_UsrConfig ;
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <SPI_voidInit+0xf8>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6053      	str	r3, [r2, #4]
		SPI2->CR1 = LOC_u16Reg_CR1 ;
 8003874:	4a07      	ldr	r2, [pc, #28]	; (8003894 <SPI_voidInit+0x100>)
 8003876:	89fb      	ldrh	r3, [r7, #14]
 8003878:	6013      	str	r3, [r2, #0]
		SPI2->CR2 = LOC_u16Reg_CR2 ;
 800387a:	4a06      	ldr	r2, [pc, #24]	; (8003894 <SPI_voidInit+0x100>)
 800387c:	89bb      	ldrh	r3, [r7, #12]
 800387e:	6053      	str	r3, [r2, #4]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000118 	.word	0x20000118
 8003890:	40013000 	.word	0x40013000
 8003894:	40003800 	.word	0x40003800

08003898 <SPI_voidSend_RecieveDataSynch>:
		// <!TODO> Error in Init
	}
}

void SPI_voidSend_RecieveDataSynch(SPI_Select_t SPI_Number , u16 *pTxBuffer, u16 *pRxBuffer)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	73fb      	strb	r3, [r7, #15]
	if(SPI_Number == SPI_1)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d117      	bne.n	80038dc <SPI_voidSend_RecieveDataSynch+0x44>
	{
		SPI_WAIT_TX_EMPTY(SPI1);
 80038ac:	bf00      	nop
 80038ae:	4b1b      	ldr	r3, [pc, #108]	; (800391c <SPI_voidSend_RecieveDataSynch+0x84>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f9      	beq.n	80038ae <SPI_voidSend_RecieveDataSynch+0x16>
		SPI1->DR = *pTxBuffer ;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <SPI_voidSend_RecieveDataSynch+0x84>)
 80038c0:	60da      	str	r2, [r3, #12]
		SPI_WAIT_RX_EMPTY(SPI1);
 80038c2:	bf00      	nop
 80038c4:	4b15      	ldr	r3, [pc, #84]	; (800391c <SPI_voidSend_RecieveDataSynch+0x84>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f9      	beq.n	80038c4 <SPI_voidSend_RecieveDataSynch+0x2c>
		*pRxBuffer = SPI1->DR  ;
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <SPI_voidSend_RecieveDataSynch+0x84>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		// <!TODO> Error in Init
	}
}
 80038da:	e019      	b.n	8003910 <SPI_voidSend_RecieveDataSynch+0x78>
	else if(SPI_Number == SPI_2)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d116      	bne.n	8003910 <SPI_voidSend_RecieveDataSynch+0x78>
		SPI_WAIT_TX_EMPTY(SPI2);
 80038e2:	bf00      	nop
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <SPI_voidSend_RecieveDataSynch+0x88>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f9      	beq.n	80038e4 <SPI_voidSend_RecieveDataSynch+0x4c>
		SPI2->DR = *pTxBuffer ;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	881a      	ldrh	r2, [r3, #0]
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <SPI_voidSend_RecieveDataSynch+0x88>)
 80038f6:	60da      	str	r2, [r3, #12]
		SPI_WAIT_RX_EMPTY(SPI2);
 80038f8:	bf00      	nop
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <SPI_voidSend_RecieveDataSynch+0x88>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f9      	beq.n	80038fa <SPI_voidSend_RecieveDataSynch+0x62>
		*pRxBuffer = SPI2->DR  ;
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <SPI_voidSend_RecieveDataSynch+0x88>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	801a      	strh	r2, [r3, #0]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40013000 	.word	0x40013000
 8003920:	40003800 	.word	0x40003800

08003924 <SPI_VoidGPIO_SetPins>:

void SPI_VoidGPIO_SetPins(SPI_Select_t SPI_Number)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
	if(SPI_Number == SPI_1)
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d14f      	bne.n	80039d4 <SPI_VoidGPIO_SetPins+0xb0>
		//   	PA4 : SPI1_NSS
		//   	PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//   	PA7 : SPI1_MOSI
		// =========================== Master ====================================
		if(Global_SPI_Config[0]->SPI_Mode == SPI_MASTER)
 8003934:	4b52      	ldr	r3, [pc, #328]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d12a      	bne.n	8003994 <SPI_VoidGPIO_SetPins+0x70>
		{
			// PA4 Chek
			switch(Global_SPI_Config[0]->SPI_SlaveSelectMangment)
 800393e:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003946:	f113 0f05 	cmn.w	r3, #5
 800394a:	d002      	beq.n	8003952 <SPI_VoidGPIO_SetPins+0x2e>
 800394c:	2b04      	cmp	r3, #4
 800394e:	d006      	beq.n	800395e <SPI_VoidGPIO_SetPins+0x3a>
			{
				case SPI_SSM_HW_MASTER_SS_DISABLED : GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_INPUT_FLOATING); 			  break ; 		// LIKE MULTIMASTER
				case SPI_SSM_HW_MASTER_SS_EN	   : GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL); break ;
				default: break ;
 8003950:	e00b      	b.n	800396a <SPI_VoidGPIO_SetPins+0x46>
				case SPI_SSM_HW_MASTER_SS_DISABLED : GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_INPUT_FLOATING); 			  break ; 		// LIKE MULTIMASTER
 8003952:	2204      	movs	r2, #4
 8003954:	2104      	movs	r1, #4
 8003956:	2002      	movs	r0, #2
 8003958:	f7ff fc94 	bl	8003284 <GPIO_voidSetPinDirection>
 800395c:	e005      	b.n	800396a <SPI_VoidGPIO_SetPins+0x46>
				case SPI_SSM_HW_MASTER_SS_EN	   : GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL); break ;
 800395e:	2209      	movs	r2, #9
 8003960:	2104      	movs	r1, #4
 8003962:	2002      	movs	r0, #2
 8003964:	f7ff fc8e 	bl	8003284 <GPIO_voidSetPinDirection>
 8003968:	bf00      	nop
			}
			// PA5 : SPI1_SCK : OUTPUT AF
			GPIO_voidSetPinDirection(PORTA,PIN5,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 800396a:	2209      	movs	r2, #9
 800396c:	2105      	movs	r1, #5
 800396e:	2002      	movs	r0, #2
 8003970:	f7ff fc88 	bl	8003284 <GPIO_voidSetPinDirection>
			// MISO AND MOSI
			if(Global_SPI_Config[0]->SPI_CommMode == SPI_FULL_DOUPLEX)
 8003974:	4b42      	ldr	r3, [pc, #264]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	885b      	ldrh	r3, [r3, #2]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d17c      	bne.n	8003a78 <SPI_VoidGPIO_SetPins+0x154>
			{
				// PA6  : SPI1_MISO
				GPIO_voidSetPinDirection(PORTA,PIN6,GPIO_INPUT_FLOATING);
 800397e:	2204      	movs	r2, #4
 8003980:	2106      	movs	r1, #6
 8003982:	2002      	movs	r0, #2
 8003984:	f7ff fc7e 	bl	8003284 <GPIO_voidSetPinDirection>
				// PA7 : SPI1_MOSI
				GPIO_voidSetPinDirection(PORTA,PIN7,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8003988:	2209      	movs	r2, #9
 800398a:	2107      	movs	r1, #7
 800398c:	2002      	movs	r0, #2
 800398e:	f7ff fc79 	bl	8003284 <GPIO_voidSetPinDirection>
	}
	else
	{
		// <!TODO> Error in Init
	}
}
 8003992:	e071      	b.n	8003a78 <SPI_VoidGPIO_SetPins+0x154>
			if(Global_SPI_Config[0]->SPI_SlaveSelectMangment == SPI_SSM_HW_SLAVE)
 8003994:	4b3a      	ldr	r3, [pc, #232]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <SPI_VoidGPIO_SetPins+0x86>
				GPIO_voidSetPinDirection(PORTA,PIN4,GPIO_INPUT_FLOATING);
 80039a0:	2204      	movs	r2, #4
 80039a2:	2104      	movs	r1, #4
 80039a4:	2002      	movs	r0, #2
 80039a6:	f7ff fc6d 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA,PIN5,GPIO_INPUT_FLOATING);
 80039aa:	2204      	movs	r2, #4
 80039ac:	2105      	movs	r1, #5
 80039ae:	2002      	movs	r0, #2
 80039b0:	f7ff fc68 	bl	8003284 <GPIO_voidSetPinDirection>
			if(Global_SPI_Config[0]->SPI_CommMode == SPI_FULL_DOUPLEX)
 80039b4:	4b32      	ldr	r3, [pc, #200]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	885b      	ldrh	r3, [r3, #2]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d15c      	bne.n	8003a78 <SPI_VoidGPIO_SetPins+0x154>
				GPIO_voidSetPinDirection(PORTA,PIN6,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 80039be:	2209      	movs	r2, #9
 80039c0:	2106      	movs	r1, #6
 80039c2:	2002      	movs	r0, #2
 80039c4:	f7ff fc5e 	bl	8003284 <GPIO_voidSetPinDirection>
				GPIO_voidSetPinDirection(PORTA,PIN7,GPIO_INPUT_FLOATING);
 80039c8:	2204      	movs	r2, #4
 80039ca:	2107      	movs	r1, #7
 80039cc:	2002      	movs	r0, #2
 80039ce:	f7ff fc59 	bl	8003284 <GPIO_voidSetPinDirection>
}
 80039d2:	e051      	b.n	8003a78 <SPI_VoidGPIO_SetPins+0x154>
	else if(SPI_Number == SPI_2)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d14e      	bne.n	8003a78 <SPI_VoidGPIO_SetPins+0x154>
			if(Global_SPI_Config[1]->SPI_Mode == SPI_MASTER)
 80039da:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d12a      	bne.n	8003a3a <SPI_VoidGPIO_SetPins+0x116>
				switch(Global_SPI_Config[1]->SPI_SlaveSelectMangment)
 80039e4:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80039ec:	f113 0f05 	cmn.w	r3, #5
 80039f0:	d002      	beq.n	80039f8 <SPI_VoidGPIO_SetPins+0xd4>
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d006      	beq.n	8003a04 <SPI_VoidGPIO_SetPins+0xe0>
					default: break ;
 80039f6:	e00b      	b.n	8003a10 <SPI_VoidGPIO_SetPins+0xec>
					case SPI_SSM_HW_MASTER_SS_DISABLED : GPIO_voidSetPinDirection(PORTB,PIN12,GPIO_INPUT_FLOATING); 			  break ; 		// LIKE MULTIMASTER
 80039f8:	2204      	movs	r2, #4
 80039fa:	210c      	movs	r1, #12
 80039fc:	2003      	movs	r0, #3
 80039fe:	f7ff fc41 	bl	8003284 <GPIO_voidSetPinDirection>
 8003a02:	e005      	b.n	8003a10 <SPI_VoidGPIO_SetPins+0xec>
					case SPI_SSM_HW_MASTER_SS_EN	   : GPIO_voidSetPinDirection(PORTB,PIN12,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL); break ;
 8003a04:	2209      	movs	r2, #9
 8003a06:	210c      	movs	r1, #12
 8003a08:	2003      	movs	r0, #3
 8003a0a:	f7ff fc3b 	bl	8003284 <GPIO_voidSetPinDirection>
 8003a0e:	bf00      	nop
				GPIO_voidSetPinDirection(PORTB,PIN13,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8003a10:	2209      	movs	r2, #9
 8003a12:	210d      	movs	r1, #13
 8003a14:	2003      	movs	r0, #3
 8003a16:	f7ff fc35 	bl	8003284 <GPIO_voidSetPinDirection>
				if(Global_SPI_Config[1]->SPI_CommMode == SPI_FULL_DOUPLEX)
 8003a1a:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	885b      	ldrh	r3, [r3, #2]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d129      	bne.n	8003a78 <SPI_VoidGPIO_SetPins+0x154>
					GPIO_voidSetPinDirection(PORTB,PIN14,GPIO_INPUT_FLOATING);
 8003a24:	2204      	movs	r2, #4
 8003a26:	210e      	movs	r1, #14
 8003a28:	2003      	movs	r0, #3
 8003a2a:	f7ff fc2b 	bl	8003284 <GPIO_voidSetPinDirection>
					GPIO_voidSetPinDirection(PORTB,PIN14,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8003a2e:	2209      	movs	r2, #9
 8003a30:	210e      	movs	r1, #14
 8003a32:	2003      	movs	r0, #3
 8003a34:	f7ff fc26 	bl	8003284 <GPIO_voidSetPinDirection>
}
 8003a38:	e01e      	b.n	8003a78 <SPI_VoidGPIO_SetPins+0x154>
				if(Global_SPI_Config[1]->SPI_SlaveSelectMangment == SPI_SSM_HW_SLAVE)
 8003a3a:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <SPI_VoidGPIO_SetPins+0x12c>
					GPIO_voidSetPinDirection(PORTB,PIN12,GPIO_INPUT_FLOATING);
 8003a46:	2204      	movs	r2, #4
 8003a48:	210c      	movs	r1, #12
 8003a4a:	2003      	movs	r0, #3
 8003a4c:	f7ff fc1a 	bl	8003284 <GPIO_voidSetPinDirection>
				GPIO_voidSetPinDirection(PORTB,PIN13,GPIO_INPUT_FLOATING);
 8003a50:	2204      	movs	r2, #4
 8003a52:	210d      	movs	r1, #13
 8003a54:	2003      	movs	r0, #3
 8003a56:	f7ff fc15 	bl	8003284 <GPIO_voidSetPinDirection>
				if(Global_SPI_Config[1]->SPI_CommMode == SPI_FULL_DOUPLEX)
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <SPI_VoidGPIO_SetPins+0x15c>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	885b      	ldrh	r3, [r3, #2]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <SPI_VoidGPIO_SetPins+0x154>
					GPIO_voidSetPinDirection(PORTB,PIN14,GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8003a64:	2209      	movs	r2, #9
 8003a66:	210e      	movs	r1, #14
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f7ff fc0b 	bl	8003284 <GPIO_voidSetPinDirection>
					GPIO_voidSetPinDirection(PORTB,PIN14,GPIO_INPUT_FLOATING);
 8003a6e:	2204      	movs	r2, #4
 8003a70:	210e      	movs	r1, #14
 8003a72:	2003      	movs	r0, #3
 8003a74:	f7ff fc06 	bl	8003284 <GPIO_voidSetPinDirection>
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000118 	.word	0x20000118

08003a84 <SPI1_IRQHandler>:
/*************************************	IRQ	************************************************/

void SPI1_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC irq_src;

	irq_src.SPI_TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8003a8a:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <SPI1_IRQHandler+0x54>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	793b      	ldrb	r3, [r7, #4]
 8003a98:	f362 0300 	bfi	r3, r2, #0, #1
 8003a9c:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8003a9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <SPI1_IRQHandler+0x54>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	793b      	ldrb	r3, [r7, #4]
 8003aaa:	f362 0341 	bfi	r3, r2, #1, #1
 8003aae:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERROR = ((SPI1->SR & (1<<4)) >> 4);
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <SPI1_IRQHandler+0x54>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	793b      	ldrb	r3, [r7, #4]
 8003abe:	f362 0382 	bfi	r3, r2, #2, #1
 8003ac2:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[0]->P_IRQ_CallBack(irq_src);
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <SPI1_IRQHandler+0x58>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	7938      	ldrb	r0, [r7, #4]
 8003acc:	4798      	blx	r3
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40013000 	.word	0x40013000
 8003adc:	20000118 	.word	0x20000118

08003ae0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC irq_src;

	irq_src.SPI_TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <SPI2_IRQHandler+0x54>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	793b      	ldrb	r3, [r7, #4]
 8003af4:	f362 0300 	bfi	r3, r2, #0, #1
 8003af8:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <SPI2_IRQHandler+0x54>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	793b      	ldrb	r3, [r7, #4]
 8003b06:	f362 0341 	bfi	r3, r2, #1, #1
 8003b0a:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERROR = ((SPI1->SR & (1<<4)) >> 4);
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <SPI2_IRQHandler+0x54>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	793b      	ldrb	r3, [r7, #4]
 8003b1a:	f362 0382 	bfi	r3, r2, #2, #1
 8003b1e:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[1]->P_IRQ_CallBack(irq_src);
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <SPI2_IRQHandler+0x58>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	7938      	ldrb	r0, [r7, #4]
 8003b28:	4798      	blx	r3
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40013000 	.word	0x40013000
 8003b38:	20000118 	.word	0x20000118

08003b3c <USART_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void USART_voidInit(USART_Number_t  USART_Number , USART_Config * usrConfig)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	71fb      	strb	r3, [r7, #7]
	u16 LOC_u16CR1 = 0 ;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	82fb      	strh	r3, [r7, #22]
	u16 LOC_u16CR2 = 0 ;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	82bb      	strh	r3, [r7, #20]
	u16 LOC_u16CR3 = 0 ;
 8003b50:	2300      	movs	r3, #0
 8003b52:	827b      	strh	r3, [r7, #18]

/********************************************************* CR1 REG	****************************************************************/
	LOC_u16CR1 = (1<<13)								/*	Enable	*/
				|(usrConfig->USART_DataLength)			/*	Data Length	*/
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	891a      	ldrh	r2, [r3, #8]
				|(usrConfig->USART_Parity)				/*	 Parity control	*/
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	895b      	ldrh	r3, [r3, #10]
				|(usrConfig->USART_OperationMode)		/*	Tx,Rx or Tx and Rx*/
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4313      	orrs	r3, r2
 8003b68:	b29a      	uxth	r2, r3
				|(usrConfig->USART_IRQ_t) ;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	8adb      	ldrh	r3, [r3, #22]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b29b      	uxth	r3, r3
	LOC_u16CR1 = (1<<13)								/*	Enable	*/
 8003b72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b76:	82fb      	strh	r3, [r7, #22]
			LOC_u16CR1 |= (usrConfig->USART_IRQ_t[LOC_u8Counter]) ;
		}
	}
*/
/******************************************************* CR2 REG ********************************************************************/
	LOC_u16CR2 = (usrConfig->USART_StopBit) 			/*	Number of Stop Bits	*/
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	899a      	ldrh	r2, [r3, #12]
				|(usrConfig->USART_IdleLevel)			/*	Clock polarity		*/
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	8a1b      	ldrh	r3, [r3, #16]
	LOC_u16CR2 = (usrConfig->USART_StopBit) 			/*	Number of Stop Bits	*/
 8003b80:	4313      	orrs	r3, r2
 8003b82:	b29a      	uxth	r2, r3
				|(usrConfig->USART_DataSampling);		/*	Clock phase			*/
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	8a5b      	ldrh	r3, [r3, #18]
	LOC_u16CR2 = (usrConfig->USART_StopBit) 			/*	Number of Stop Bits	*/
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	82bb      	strh	r3, [r7, #20]
/******************************************************* CR3 REG ********************************************************************/
	LOC_u16CR3 = (usrConfig->USART_DMA);			/*	DMA		*/
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	7d1b      	ldrb	r3, [r3, #20]
 8003b90:	827b      	strh	r3, [r7, #18]

/******************************************************* BuadRate ********************************************************************/
	Global_USART_Config[USART_Number] = usrConfig ;
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	4920      	ldr	r1, [pc, #128]	; (8003c18 <USART_voidInit+0xdc>)
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	u32 BRR_Reg = 0 ;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]
	USART_voidBuadRateCalc(usrConfig->USART_BuadRate , 8000000 , &BRR_Reg);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f107 020c 	add.w	r2, r7, #12
 8003ba8:	491c      	ldr	r1, [pc, #112]	; (8003c1c <USART_voidInit+0xe0>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f9a6 	bl	8003efc <USART_voidBuadRateCalc>


/******************************************************* Regs ********************************************************************/


	switch(USART_Number)
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d011      	beq.n	8003bda <USART_voidInit+0x9e>
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d01c      	beq.n	8003bf4 <USART_voidInit+0xb8>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d000      	beq.n	8003bc0 <USART_voidInit+0x84>
	{
	case USART_1 : USART1->BRR =  BRR_Reg  ; USART1->CR1 = LOC_u16CR1 ;  USART1->CR2 = LOC_u16CR2 , USART1->CR3 = LOC_u16CR3 ; 	break ;
	case USART_2 : USART2->BRR =  BRR_Reg  ; USART2->CR1 = LOC_u16CR1 ;  USART2->CR2 = LOC_u16CR2 ; USART2->CR3 = LOC_u16CR3 ;   	break ;
	case USART_3 : USART3->BRR =  BRR_Reg  ; USART3->CR1 = LOC_u16CR1 ;  USART3->CR2 = LOC_u16CR2 ; USART3->CR3 = LOC_u16CR3 ; 	break ;
	default : break ;
 8003bbe:	e026      	b.n	8003c0e <USART_voidInit+0xd2>
	case USART_1 : USART1->BRR =  BRR_Reg  ; USART1->CR1 = LOC_u16CR1 ;  USART1->CR2 = LOC_u16CR2 , USART1->CR3 = LOC_u16CR3 ; 	break ;
 8003bc0:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <USART_voidInit+0xe4>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6093      	str	r3, [r2, #8]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <USART_voidInit+0xe4>)
 8003bc8:	8afb      	ldrh	r3, [r7, #22]
 8003bca:	60d3      	str	r3, [r2, #12]
 8003bcc:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <USART_voidInit+0xe4>)
 8003bce:	8abb      	ldrh	r3, [r7, #20]
 8003bd0:	6113      	str	r3, [r2, #16]
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <USART_voidInit+0xe4>)
 8003bd4:	8a7b      	ldrh	r3, [r7, #18]
 8003bd6:	6153      	str	r3, [r2, #20]
 8003bd8:	e019      	b.n	8003c0e <USART_voidInit+0xd2>
	case USART_2 : USART2->BRR =  BRR_Reg  ; USART2->CR1 = LOC_u16CR1 ;  USART2->CR2 = LOC_u16CR2 ; USART2->CR3 = LOC_u16CR3 ;   	break ;
 8003bda:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <USART_voidInit+0xe8>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6093      	str	r3, [r2, #8]
 8003be0:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <USART_voidInit+0xe8>)
 8003be2:	8afb      	ldrh	r3, [r7, #22]
 8003be4:	60d3      	str	r3, [r2, #12]
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <USART_voidInit+0xe8>)
 8003be8:	8abb      	ldrh	r3, [r7, #20]
 8003bea:	6113      	str	r3, [r2, #16]
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <USART_voidInit+0xe8>)
 8003bee:	8a7b      	ldrh	r3, [r7, #18]
 8003bf0:	6153      	str	r3, [r2, #20]
 8003bf2:	e00c      	b.n	8003c0e <USART_voidInit+0xd2>
	case USART_3 : USART3->BRR =  BRR_Reg  ; USART3->CR1 = LOC_u16CR1 ;  USART3->CR2 = LOC_u16CR2 ; USART3->CR3 = LOC_u16CR3 ; 	break ;
 8003bf4:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <USART_voidInit+0xec>)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6093      	str	r3, [r2, #8]
 8003bfa:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <USART_voidInit+0xec>)
 8003bfc:	8afb      	ldrh	r3, [r7, #22]
 8003bfe:	60d3      	str	r3, [r2, #12]
 8003c00:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <USART_voidInit+0xec>)
 8003c02:	8abb      	ldrh	r3, [r7, #20]
 8003c04:	6113      	str	r3, [r2, #16]
 8003c06:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <USART_voidInit+0xec>)
 8003c08:	8a7b      	ldrh	r3, [r7, #18]
 8003c0a:	6153      	str	r3, [r2, #20]
 8003c0c:	bf00      	nop

	}
}
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000120 	.word	0x20000120
 8003c1c:	007a1200 	.word	0x007a1200
 8003c20:	40013800 	.word	0x40013800
 8003c24:	40004400 	.word	0x40004400
 8003c28:	40004800 	.word	0x40004800

08003c2c <USART_voidSendDataSynch>:

void USART_voidSendDataSynch(USART_Number_t USART_Number , u16 *P_u16Data)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	71fb      	strb	r3, [r7, #7]
	switch(USART_Number)
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d019      	beq.n	8003c72 <USART_voidSendDataSynch+0x46>
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d02c      	beq.n	8003c9c <USART_voidSendDataSynch+0x70>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d000      	beq.n	8003c48 <USART_voidSendDataSynch+0x1c>
		WAIT_TO_TXE(USART3)	;
		USART3->DR = *P_u16Data ;
		WAIT_TO_TXC(USART3);
		break ;
	default:
		break ;
 8003c46:	e03e      	b.n	8003cc6 <USART_voidSendDataSynch+0x9a>
		WAIT_TO_TXE(USART1)	;
 8003c48:	bf00      	nop
 8003c4a:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <USART_voidSendDataSynch+0xa4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	09db      	lsrs	r3, r3, #7
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f8      	beq.n	8003c4a <USART_voidSendDataSynch+0x1e>
		USART1->DR = *P_u16Data ;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <USART_voidSendDataSynch+0xa4>)
 8003c5e:	605a      	str	r2, [r3, #4]
		WAIT_TO_TXC(USART1);
 8003c60:	bf00      	nop
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <USART_voidSendDataSynch+0xa4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f8      	beq.n	8003c62 <USART_voidSendDataSynch+0x36>
		break ;
 8003c70:	e029      	b.n	8003cc6 <USART_voidSendDataSynch+0x9a>
		WAIT_TO_TXE(USART2)	;
 8003c72:	bf00      	nop
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <USART_voidSendDataSynch+0xa8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	09db      	lsrs	r3, r3, #7
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f8      	beq.n	8003c74 <USART_voidSendDataSynch+0x48>
		USART2->DR = *P_u16Data ;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <USART_voidSendDataSynch+0xa8>)
 8003c88:	605a      	str	r2, [r3, #4]
		WAIT_TO_TXC(USART2);
 8003c8a:	bf00      	nop
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <USART_voidSendDataSynch+0xa8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f8      	beq.n	8003c8c <USART_voidSendDataSynch+0x60>
		break ;
 8003c9a:	e014      	b.n	8003cc6 <USART_voidSendDataSynch+0x9a>
		WAIT_TO_TXE(USART3)	;
 8003c9c:	bf00      	nop
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <USART_voidSendDataSynch+0xac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	09db      	lsrs	r3, r3, #7
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f8      	beq.n	8003c9e <USART_voidSendDataSynch+0x72>
		USART3->DR = *P_u16Data ;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <USART_voidSendDataSynch+0xac>)
 8003cb2:	605a      	str	r2, [r3, #4]
		WAIT_TO_TXC(USART3);
 8003cb4:	bf00      	nop
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <USART_voidSendDataSynch+0xac>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f8      	beq.n	8003cb6 <USART_voidSendDataSynch+0x8a>
		break ;
 8003cc4:	bf00      	nop
	}
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	40004800 	.word	0x40004800

08003cdc <USART_voidReceiveDataSynch>:
		break ;
	}
}

void USART_voidReceiveDataSynch(USART_Number_t USART_Number , u16 *P_u16Data)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	71fb      	strb	r3, [r7, #7]

	if(Global_USART_Config[USART_Number]->USART_DataLength == USART_9BIT)
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	4a80      	ldr	r2, [pc, #512]	; (8003eec <USART_voidReceiveDataSynch+0x210>)
 8003cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf0:	891b      	ldrh	r3, [r3, #8]
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d179      	bne.n	8003dec <USART_voidReceiveDataSynch+0x110>
	{
		if(Global_USART_Config[USART_Number]->USART_Parity == USART_DISABLE_PARITY)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	4a7c      	ldr	r2, [pc, #496]	; (8003eec <USART_voidReceiveDataSynch+0x210>)
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	895b      	ldrh	r3, [r3, #10]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d13a      	bne.n	8003d7c <USART_voidReceiveDataSynch+0xa0>
		{
			// 9-BIT DATA
			switch(USART_Number)
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d015      	beq.n	8003d38 <USART_voidReceiveDataSynch+0x5c>
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d024      	beq.n	8003d5a <USART_voidReceiveDataSynch+0x7e>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d000      	beq.n	8003d16 <USART_voidReceiveDataSynch+0x3a>
			case USART_3:
				WAIT_TO_RXNE(USART3)	;
				*P_u16Data = (USART3->DR) & 0x1FF  ;
				break ;
			default:
				break ;
 8003d14:	e0e4      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART1)	;
 8003d16:	bf00      	nop
 8003d18:	4b75      	ldr	r3, [pc, #468]	; (8003ef0 <USART_voidReceiveDataSynch+0x214>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f8      	beq.n	8003d18 <USART_voidReceiveDataSynch+0x3c>
				*P_u16Data = (USART1->DR) & 0x1FF ;
 8003d26:	4b72      	ldr	r3, [pc, #456]	; (8003ef0 <USART_voidReceiveDataSynch+0x214>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	801a      	strh	r2, [r3, #0]
				break ;
 8003d36:	e0d3      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART2)	;
 8003d38:	bf00      	nop
 8003d3a:	4b6e      	ldr	r3, [pc, #440]	; (8003ef4 <USART_voidReceiveDataSynch+0x218>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f8      	beq.n	8003d3a <USART_voidReceiveDataSynch+0x5e>
				*P_u16Data = (USART2->DR) & 0x1FF  ;
 8003d48:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <USART_voidReceiveDataSynch+0x218>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	801a      	strh	r2, [r3, #0]
				break ;
 8003d58:	e0c2      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART3)	;
 8003d5a:	bf00      	nop
 8003d5c:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <USART_voidReceiveDataSynch+0x21c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f8      	beq.n	8003d5c <USART_voidReceiveDataSynch+0x80>
				*P_u16Data = (USART3->DR) & 0x1FF  ;
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <USART_voidReceiveDataSynch+0x21c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	801a      	strh	r2, [r3, #0]
				break ;
 8003d7a:	e0b1      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>

		}
		else
		{
			// 9-bit is parity
			switch(USART_Number)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d014      	beq.n	8003dac <USART_voidReceiveDataSynch+0xd0>
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d022      	beq.n	8003dcc <USART_voidReceiveDataSynch+0xf0>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d000      	beq.n	8003d8c <USART_voidReceiveDataSynch+0xb0>
			case USART_3:
				WAIT_TO_RXNE(USART3)	;
				*P_u16Data =( USART3->DR)& ((u8)0xFF) ;
				break ;
			default:
				break ;
 8003d8a:	e0a9      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART1)	;
 8003d8c:	bf00      	nop
 8003d8e:	4b58      	ldr	r3, [pc, #352]	; (8003ef0 <USART_voidReceiveDataSynch+0x214>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f8      	beq.n	8003d8e <USART_voidReceiveDataSynch+0xb2>
				*P_u16Data = (USART1->DR)& ((u8)0xFF) ;
 8003d9c:	4b54      	ldr	r3, [pc, #336]	; (8003ef0 <USART_voidReceiveDataSynch+0x214>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	801a      	strh	r2, [r3, #0]
				break ;
 8003daa:	e099      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART2)	;
 8003dac:	bf00      	nop
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <USART_voidReceiveDataSynch+0x218>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f8      	beq.n	8003dae <USART_voidReceiveDataSynch+0xd2>
				*P_u16Data = (USART2->DR) &((u8)0xFF) ;
 8003dbc:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <USART_voidReceiveDataSynch+0x218>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	801a      	strh	r2, [r3, #0]
				break ;
 8003dca:	e089      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART3)	;
 8003dcc:	bf00      	nop
 8003dce:	4b4a      	ldr	r3, [pc, #296]	; (8003ef8 <USART_voidReceiveDataSynch+0x21c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f8      	beq.n	8003dce <USART_voidReceiveDataSynch+0xf2>
				*P_u16Data =( USART3->DR)& ((u8)0xFF) ;
 8003ddc:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <USART_voidReceiveDataSynch+0x21c>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	801a      	strh	r2, [r3, #0]
				break ;
 8003dea:	e079      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
			}
		}
	}
	else
	{
		if(Global_USART_Config[USART_Number]->USART_Parity == USART_DISABLE_PARITY)
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	4a3f      	ldr	r2, [pc, #252]	; (8003eec <USART_voidReceiveDataSynch+0x210>)
 8003df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df4:	895b      	ldrh	r3, [r3, #10]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d137      	bne.n	8003e6a <USART_voidReceiveDataSynch+0x18e>
		{
			switch(USART_Number)
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d014      	beq.n	8003e2a <USART_voidReceiveDataSynch+0x14e>
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d022      	beq.n	8003e4a <USART_voidReceiveDataSynch+0x16e>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d000      	beq.n	8003e0a <USART_voidReceiveDataSynch+0x12e>
			case USART_3:
				WAIT_TO_RXNE(USART3)	;
				*P_u16Data =( USART3->DR)& ((u8)0xFF) ;
				break ;
			default:
				break ;
 8003e08:	e06a      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART1)	;
 8003e0a:	bf00      	nop
 8003e0c:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <USART_voidReceiveDataSynch+0x214>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f8      	beq.n	8003e0c <USART_voidReceiveDataSynch+0x130>
				*P_u16Data = (USART1->DR)& ((u8)0xFF) ;
 8003e1a:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <USART_voidReceiveDataSynch+0x214>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	801a      	strh	r2, [r3, #0]
				break ;
 8003e28:	e05a      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART2)	;
 8003e2a:	bf00      	nop
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <USART_voidReceiveDataSynch+0x218>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f8      	beq.n	8003e2c <USART_voidReceiveDataSynch+0x150>
				*P_u16Data = (USART2->DR) &((u8)0xFF) ;
 8003e3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ef4 <USART_voidReceiveDataSynch+0x218>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	801a      	strh	r2, [r3, #0]
				break ;
 8003e48:	e04a      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART3)	;
 8003e4a:	bf00      	nop
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <USART_voidReceiveDataSynch+0x21c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f8      	beq.n	8003e4c <USART_voidReceiveDataSynch+0x170>
				*P_u16Data =( USART3->DR)& ((u8)0xFF) ;
 8003e5a:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <USART_voidReceiveDataSynch+0x21c>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	801a      	strh	r2, [r3, #0]
				break ;
 8003e68:	e03a      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
			}
		}
		else
		{
			// 8-bit is parity
			switch(USART_Number)
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d015      	beq.n	8003e9c <USART_voidReceiveDataSynch+0x1c0>
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d024      	beq.n	8003ebe <USART_voidReceiveDataSynch+0x1e2>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d000      	beq.n	8003e7a <USART_voidReceiveDataSynch+0x19e>
			case USART_3:
				WAIT_TO_RXNE(USART3)	;
				*P_u16Data =( USART3->DR)& ((u8)0x7F) ;
				break ;
			default:
				break ;
 8003e78:	e032      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART1)	;
 8003e7a:	bf00      	nop
 8003e7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <USART_voidReceiveDataSynch+0x214>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f8      	beq.n	8003e7c <USART_voidReceiveDataSynch+0x1a0>
				*P_u16Data = (USART1->DR)& ((u8)0x7F) ;
 8003e8a:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <USART_voidReceiveDataSynch+0x214>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	801a      	strh	r2, [r3, #0]
				break ;
 8003e9a:	e021      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART2)	;
 8003e9c:	bf00      	nop
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <USART_voidReceiveDataSynch+0x218>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f8      	beq.n	8003e9e <USART_voidReceiveDataSynch+0x1c2>
				*P_u16Data = (USART2->DR) &((u8)0x7F) ;
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <USART_voidReceiveDataSynch+0x218>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	801a      	strh	r2, [r3, #0]
				break ;
 8003ebc:	e010      	b.n	8003ee0 <USART_voidReceiveDataSynch+0x204>
				WAIT_TO_RXNE(USART3)	;
 8003ebe:	bf00      	nop
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <USART_voidReceiveDataSynch+0x21c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f8      	beq.n	8003ec0 <USART_voidReceiveDataSynch+0x1e4>
				*P_u16Data =( USART3->DR)& ((u8)0x7F) ;
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <USART_voidReceiveDataSynch+0x21c>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	801a      	strh	r2, [r3, #0]
				break ;
 8003ede:	bf00      	nop
			}
		}
	}
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000120 	.word	0x20000120
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	40004400 	.word	0x40004400
 8003ef8:	40004800 	.word	0x40004800

08003efc <USART_voidBuadRateCalc>:

}


void USART_voidBuadRateCalc(u32 BuadRate , u32 PClock , u32 *BRR_Reg)
{
 8003efc:	b5b0      	push	{r4, r5, r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]

	

	u32 USARTDEV = ((PClock)/(16*BuadRate)) ;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	623b      	str	r3, [r7, #32]
	u32 USARTDEV_Mull_100 = ((25.0 * PClock)/(4.0*BuadRate)) ;
 8003f14:	68b8      	ldr	r0, [r7, #8]
 8003f16:	f7fc fa6d 	bl	80003f4 <__aeabi_ui2d>
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <USART_voidBuadRateCalc+0xac>)
 8003f20:	f7fc fae2 	bl	80004e8 <__aeabi_dmul>
 8003f24:	4603      	mov	r3, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	4625      	mov	r5, r4
 8003f2a:	461c      	mov	r4, r3
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7fc fa61 	bl	80003f4 <__aeabi_ui2d>
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <USART_voidBuadRateCalc+0xb0>)
 8003f38:	f7fc fad6 	bl	80004e8 <__aeabi_dmul>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4620      	mov	r0, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	f7fc fbfa 	bl	800073c <__aeabi_ddiv>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	4621      	mov	r1, r4
 8003f50:	f7fc fcdc 	bl	800090c <__aeabi_d2uiz>
 8003f54:	4603      	mov	r3, r0
 8003f56:	61fb      	str	r3, [r7, #28]
	u32 Mantiessa_Mull_100 = USARTDEV * 100  ;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	2264      	movs	r2, #100	; 0x64
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	61bb      	str	r3, [r7, #24]
	u32 Mantiessa = USARTDEV ;
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
	u32 Fraction = ((USARTDEV_Mull_100 - Mantiessa_Mull_100)*16) /100 ;
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <USART_voidBuadRateCalc+0xb4>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	617b      	str	r3, [r7, #20]

	/*u32 Mantiessa = ((PClock)/(16*BuadRate)) ;
	u32 Fraction  = ((((1.0*PClock)/(16.0*BuadRate)) * 100) - (Mantiessa * 100)) * 16 ;
	*/
	if(Fraction > 16)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b10      	cmp	r3, #16
 8003f7c:	d902      	bls.n	8003f84 <USART_voidBuadRateCalc+0x88>
	{
		Mantiessa = Mantiessa+1 ;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	3301      	adds	r3, #1
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
	}
	*BRR_Reg = (u16) ((Mantiessa<<4) | (Fraction & 0x0F)) ;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4313      	orrs	r3, r2
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]

}
 8003fa0:	bf00      	nop
 8003fa2:	3728      	adds	r7, #40	; 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa8:	40390000 	.word	0x40390000
 8003fac:	40100000 	.word	0x40100000
 8003fb0:	51eb851f 	.word	0x51eb851f

08003fb4 <USART__VoidGPIO_SetPins>:
void USART__VoidGPIO_SetPins(USART_Number_t USART_Number)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	71fb      	strb	r3, [r7, #7]

	if(Global_USART_Config[USART_Number]->USART_OperationMode == USART_TRANSMIT)
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	4a7a      	ldr	r2, [pc, #488]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 8003fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b08      	cmp	r3, #8
		// Trancieve


	}

	if(USART_Number == USART_1)
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d14c      	bne.n	800406a <USART__VoidGPIO_SetPins+0xb6>
	{
		//PA9 TX	--> OUTPUT_AF_PP
		//PA10 RX	--> _AF_INPUT
		//PA11 CTS	-->	INPUT_FLO
		//PA12 RTS	--> OUTPUT_AF_PP
		if(Global_USART_Config[USART_Number]->USART_OperationMode == USART_TRANSMIT)
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	4a76      	ldr	r2, [pc, #472]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 8003fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d105      	bne.n	8003fea <USART__VoidGPIO_SetPins+0x36>
		{
			GPIO_voidSetPinDirection(PORTA, PIN9, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8003fde:	2209      	movs	r2, #9
 8003fe0:	2109      	movs	r1, #9
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	f7ff f94e 	bl	8003284 <GPIO_voidSetPinDirection>
 8003fe8:	e016      	b.n	8004018 <USART__VoidGPIO_SetPins+0x64>


		}
		else if (Global_USART_Config[USART_Number]->USART_OperationMode == USART_RECEIVE)
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	4a6f      	ldr	r2, [pc, #444]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d105      	bne.n	8004004 <USART__VoidGPIO_SetPins+0x50>
		{
			GPIO_voidSetPinDirection(PORTA, PIN10, GPIO_INPUT_FLOATING);
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	210a      	movs	r1, #10
 8003ffc:	2002      	movs	r0, #2
 8003ffe:	f7ff f941 	bl	8003284 <GPIO_voidSetPinDirection>
 8004002:	e009      	b.n	8004018 <USART__VoidGPIO_SetPins+0x64>

		}
		else
		{
			// Trancieve
			GPIO_voidSetPinDirection(PORTA, PIN10, GPIO_INPUT_FLOATING);
 8004004:	2204      	movs	r2, #4
 8004006:	210a      	movs	r1, #10
 8004008:	2002      	movs	r0, #2
 800400a:	f7ff f93b 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA, PIN9, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 800400e:	2209      	movs	r2, #9
 8004010:	2109      	movs	r1, #9
 8004012:	2002      	movs	r0, #2
 8004014:	f7ff f936 	bl	8003284 <GPIO_voidSetPinDirection>

		}

		if(Global_USART_Config[0]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_RTS)
 8004018:	4b64      	ldr	r3, [pc, #400]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	89db      	ldrh	r3, [r3, #14]
 800401e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004022:	d105      	bne.n	8004030 <USART__VoidGPIO_SetPins+0x7c>
		{
			GPIO_voidSetPinDirection(PORTA, PIN12 ,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8004024:	2209      	movs	r2, #9
 8004026:	210c      	movs	r1, #12
 8004028:	2002      	movs	r0, #2
 800402a:	f7ff f92b 	bl	8003284 <GPIO_voidSetPinDirection>
		// <TODO> EROOR
	}



}
 800402e:	e0b9      	b.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
		else if (Global_USART_Config[0]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_CTS)
 8004030:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	89db      	ldrh	r3, [r3, #14]
 8004036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403a:	d105      	bne.n	8004048 <USART__VoidGPIO_SetPins+0x94>
			GPIO_voidSetPinDirection(PORTA, PIN11, GPIO_INPUT_FLOATING);
 800403c:	2204      	movs	r2, #4
 800403e:	210b      	movs	r1, #11
 8004040:	2002      	movs	r0, #2
 8004042:	f7ff f91f 	bl	8003284 <GPIO_voidSetPinDirection>
}
 8004046:	e0ad      	b.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
		else if(Global_USART_Config[0]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_DISALBED)
 8004048:	4b58      	ldr	r3, [pc, #352]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	89db      	ldrh	r3, [r3, #14]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80a8 	beq.w	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
			GPIO_voidSetPinDirection(PORTA, PIN11, GPIO_INPUT_FLOATING);
 8004054:	2204      	movs	r2, #4
 8004056:	210b      	movs	r1, #11
 8004058:	2002      	movs	r0, #2
 800405a:	f7ff f913 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA, PIN12 ,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 800405e:	2209      	movs	r2, #9
 8004060:	210c      	movs	r1, #12
 8004062:	2002      	movs	r0, #2
 8004064:	f7ff f90e 	bl	8003284 <GPIO_voidSetPinDirection>
}
 8004068:	e09c      	b.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
	else if(USART_Number == USART_2)
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d14b      	bne.n	8004108 <USART__VoidGPIO_SetPins+0x154>
		if(Global_USART_Config[USART_Number]->USART_OperationMode == USART_TRANSMIT)
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	4a4e      	ldr	r2, [pc, #312]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 8004074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b08      	cmp	r3, #8
 800407c:	d105      	bne.n	800408a <USART__VoidGPIO_SetPins+0xd6>
			GPIO_voidSetPinDirection(PORTA, PIN2, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 800407e:	2209      	movs	r2, #9
 8004080:	2102      	movs	r1, #2
 8004082:	2002      	movs	r0, #2
 8004084:	f7ff f8fe 	bl	8003284 <GPIO_voidSetPinDirection>
 8004088:	e016      	b.n	80040b8 <USART__VoidGPIO_SetPins+0x104>
		else if (Global_USART_Config[USART_Number]->USART_OperationMode == USART_RECEIVE)
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	4a47      	ldr	r2, [pc, #284]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 800408e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d105      	bne.n	80040a4 <USART__VoidGPIO_SetPins+0xf0>
			GPIO_voidSetPinDirection(PORTA, PIN13, GPIO_INPUT_FLOATING);
 8004098:	2204      	movs	r2, #4
 800409a:	210d      	movs	r1, #13
 800409c:	2002      	movs	r0, #2
 800409e:	f7ff f8f1 	bl	8003284 <GPIO_voidSetPinDirection>
 80040a2:	e009      	b.n	80040b8 <USART__VoidGPIO_SetPins+0x104>
			GPIO_voidSetPinDirection(PORTA, PIN2, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 80040a4:	2209      	movs	r2, #9
 80040a6:	2102      	movs	r1, #2
 80040a8:	2002      	movs	r0, #2
 80040aa:	f7ff f8eb 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA, PIN13, GPIO_INPUT_FLOATING);
 80040ae:	2204      	movs	r2, #4
 80040b0:	210d      	movs	r1, #13
 80040b2:	2002      	movs	r0, #2
 80040b4:	f7ff f8e6 	bl	8003284 <GPIO_voidSetPinDirection>
		if(Global_USART_Config[1]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_RTS)
 80040b8:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	89db      	ldrh	r3, [r3, #14]
 80040be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c2:	d105      	bne.n	80040d0 <USART__VoidGPIO_SetPins+0x11c>
			GPIO_voidSetPinDirection(PORTA, PIN1,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 80040c4:	2209      	movs	r2, #9
 80040c6:	2101      	movs	r1, #1
 80040c8:	2002      	movs	r0, #2
 80040ca:	f7ff f8db 	bl	8003284 <GPIO_voidSetPinDirection>
}
 80040ce:	e069      	b.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
		else if (Global_USART_Config[1]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_CTS)
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	89db      	ldrh	r3, [r3, #14]
 80040d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040da:	d105      	bne.n	80040e8 <USART__VoidGPIO_SetPins+0x134>
			GPIO_voidSetPinDirection(PORTA, PIN0, GPIO_INPUT_FLOATING);
 80040dc:	2204      	movs	r2, #4
 80040de:	2100      	movs	r1, #0
 80040e0:	2002      	movs	r0, #2
 80040e2:	f7ff f8cf 	bl	8003284 <GPIO_voidSetPinDirection>
}
 80040e6:	e05d      	b.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
		else if(Global_USART_Config[1]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_DISALBED)
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	89db      	ldrh	r3, [r3, #14]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d058      	beq.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
			GPIO_voidSetPinDirection(PORTA, PIN0, GPIO_INPUT_FLOATING);
 80040f2:	2204      	movs	r2, #4
 80040f4:	2100      	movs	r1, #0
 80040f6:	2002      	movs	r0, #2
 80040f8:	f7ff f8c4 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTA, PIN1,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 80040fc:	2209      	movs	r2, #9
 80040fe:	2101      	movs	r1, #1
 8004100:	2002      	movs	r0, #2
 8004102:	f7ff f8bf 	bl	8003284 <GPIO_voidSetPinDirection>
}
 8004106:	e04d      	b.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
	else if (USART_Number == USART_3)
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d14a      	bne.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
		if(Global_USART_Config[USART_Number]->USART_OperationMode == USART_TRANSMIT)
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	4a26      	ldr	r2, [pc, #152]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 8004112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d105      	bne.n	8004128 <USART__VoidGPIO_SetPins+0x174>
			GPIO_voidSetPinDirection(PORTB, PIN10, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 800411c:	2209      	movs	r2, #9
 800411e:	210a      	movs	r1, #10
 8004120:	2003      	movs	r0, #3
 8004122:	f7ff f8af 	bl	8003284 <GPIO_voidSetPinDirection>
 8004126:	e016      	b.n	8004156 <USART__VoidGPIO_SetPins+0x1a2>
		else if (Global_USART_Config[USART_Number]->USART_OperationMode == USART_RECEIVE)
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	4a20      	ldr	r2, [pc, #128]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 800412c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b04      	cmp	r3, #4
 8004134:	d105      	bne.n	8004142 <USART__VoidGPIO_SetPins+0x18e>
			GPIO_voidSetPinDirection(PORTB, PIN11, GPIO_INPUT_FLOATING);
 8004136:	2204      	movs	r2, #4
 8004138:	210b      	movs	r1, #11
 800413a:	2003      	movs	r0, #3
 800413c:	f7ff f8a2 	bl	8003284 <GPIO_voidSetPinDirection>
 8004140:	e009      	b.n	8004156 <USART__VoidGPIO_SetPins+0x1a2>
			GPIO_voidSetPinDirection(PORTB, PIN10, GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8004142:	2209      	movs	r2, #9
 8004144:	210a      	movs	r1, #10
 8004146:	2003      	movs	r0, #3
 8004148:	f7ff f89c 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTB, PIN11, GPIO_INPUT_FLOATING);
 800414c:	2204      	movs	r2, #4
 800414e:	210b      	movs	r1, #11
 8004150:	2003      	movs	r0, #3
 8004152:	f7ff f897 	bl	8003284 <GPIO_voidSetPinDirection>
		if(Global_USART_Config[2]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_RTS)
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	89db      	ldrh	r3, [r3, #14]
 800415c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004160:	d105      	bne.n	800416e <USART__VoidGPIO_SetPins+0x1ba>
			GPIO_voidSetPinDirection(PORTB, PIN14,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8004162:	2209      	movs	r2, #9
 8004164:	210e      	movs	r1, #14
 8004166:	2003      	movs	r0, #3
 8004168:	f7ff f88c 	bl	8003284 <GPIO_voidSetPinDirection>
}
 800416c:	e01a      	b.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
		else if (Global_USART_Config[2]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_CTS)
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	89db      	ldrh	r3, [r3, #14]
 8004174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004178:	d105      	bne.n	8004186 <USART__VoidGPIO_SetPins+0x1d2>
			GPIO_voidSetPinDirection(PORTB, PIN13, GPIO_INPUT_FLOATING);
 800417a:	2204      	movs	r2, #4
 800417c:	210d      	movs	r1, #13
 800417e:	2003      	movs	r0, #3
 8004180:	f7ff f880 	bl	8003284 <GPIO_voidSetPinDirection>
}
 8004184:	e00e      	b.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
		else if(Global_USART_Config[2]->USART_HWFlowControl == USART_HW_FLOW_CONTROLLED_DISALBED)
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <USART__VoidGPIO_SetPins+0x1f8>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	89db      	ldrh	r3, [r3, #14]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <USART__VoidGPIO_SetPins+0x1f0>
			GPIO_voidSetPinDirection(PORTB, PIN14,  GPIO_OUTPUT_10MHZ_AF_PUSH_PULL);
 8004190:	2209      	movs	r2, #9
 8004192:	210e      	movs	r1, #14
 8004194:	2003      	movs	r0, #3
 8004196:	f7ff f875 	bl	8003284 <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTB, PIN13, GPIO_INPUT_FLOATING);
 800419a:	2204      	movs	r2, #4
 800419c:	210d      	movs	r1, #13
 800419e:	2003      	movs	r0, #3
 80041a0:	f7ff f870 	bl	8003284 <GPIO_voidSetPinDirection>
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000120 	.word	0x20000120

080041b0 <USART1_IRQHandler>:
/************************************* ISR		*********************************************/
void USART1_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
			Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR);
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <USART1_IRQHandler+0x30>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <USART1_IRQHandler+0x34>)
 80041bc:	6852      	ldr	r2, [r2, #4]
 80041be:	b292      	uxth	r2, r2
 80041c0:	4610      	mov	r0, r2
 80041c2:	4798      	blx	r3
	//	Clear Fflags
	 USART1->SR &=~ (1<<6) ; // TXC
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <USART1_IRQHandler+0x34>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a06      	ldr	r2, [pc, #24]	; (80041e4 <USART1_IRQHandler+0x34>)
 80041ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ce:	6013      	str	r3, [r2, #0]
	 USART1->SR &=~  (1<<5) ; // RXNE
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <USART1_IRQHandler+0x34>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a03      	ldr	r2, [pc, #12]	; (80041e4 <USART1_IRQHandler+0x34>)
 80041d6:	f023 0320 	bic.w	r3, r3, #32
 80041da:	6013      	str	r3, [r2, #0]

}
 80041dc:	bf00      	nop
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000120 	.word	0x20000120
 80041e4:	40013800 	.word	0x40013800

080041e8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
			Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[1]->P_IRQ_CallBack(USART2->DR);
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <USART2_IRQHandler+0x30>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <USART2_IRQHandler+0x34>)
 80041f4:	6852      	ldr	r2, [r2, #4]
 80041f6:	b292      	uxth	r2, r2
 80041f8:	4610      	mov	r0, r2
 80041fa:	4798      	blx	r3
	//Flags
	 USART2->SR &=~  (1<<6) ; // TXC
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <USART2_IRQHandler+0x34>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a06      	ldr	r2, [pc, #24]	; (800421c <USART2_IRQHandler+0x34>)
 8004202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004206:	6013      	str	r3, [r2, #0]
	 USART2->SR &=~ (1<<5) ; // RXNE
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <USART2_IRQHandler+0x34>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a03      	ldr	r2, [pc, #12]	; (800421c <USART2_IRQHandler+0x34>)
 800420e:	f023 0320 	bic.w	r3, r3, #32
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000120 	.word	0x20000120
 800421c:	40004400 	.word	0x40004400

08004220 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
			Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR , irq_src);

		}
	}
*/
	Global_USART_Config[2]->P_IRQ_CallBack(USART2->DR);
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <USART3_IRQHandler+0x30>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <USART3_IRQHandler+0x34>)
 800422c:	6852      	ldr	r2, [r2, #4]
 800422e:	b292      	uxth	r2, r2
 8004230:	4610      	mov	r0, r2
 8004232:	4798      	blx	r3
	//Flags
	 USART3->SR &=~  (1<<6) ; // TXC
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <USART3_IRQHandler+0x38>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a07      	ldr	r2, [pc, #28]	; (8004258 <USART3_IRQHandler+0x38>)
 800423a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423e:	6013      	str	r3, [r2, #0]
	 USART3->SR&=~  (1<<5) ; // RXNE
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <USART3_IRQHandler+0x38>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a04      	ldr	r2, [pc, #16]	; (8004258 <USART3_IRQHandler+0x38>)
 8004246:	f023 0320 	bic.w	r3, r3, #32
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000120 	.word	0x20000120
 8004254:	40004400 	.word	0x40004400
 8004258:	40004800 	.word	0x40004800

0800425c <USART_voidSendStringWithDelimiterSynch>:
	{
		USART_voidSendDataSynch(USART_Number, (u16*)&P_u8Data[LOC_u16Counter]);
	}
}
void USART_voidSendStringWithDelimiterSynch(USART_Number_t USART_Number , u8 *P_u8Data , u8 copy_u16Delimiter )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	6039      	str	r1, [r7, #0]
 8004266:	71fb      	strb	r3, [r7, #7]
 8004268:	4613      	mov	r3, r2
 800426a:	71bb      	strb	r3, [r7, #6]
	u32 LOC_u16Counter = 0 ;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
	while (P_u8Data[LOC_u16Counter] != copy_u16Delimiter)
 8004270:	e00a      	b.n	8004288 <USART_voidSendStringWithDelimiterSynch+0x2c>
	{
		USART_voidSendDataSynch(USART_Number, (u16*)&P_u8Data[LOC_u16Counter]);
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	441a      	add	r2, r3
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fcd5 	bl	8003c2c <USART_voidSendDataSynch>
		LOC_u16Counter++ ;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
	while (P_u8Data[LOC_u16Counter] != copy_u16Delimiter)
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4413      	add	r3, r2
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	79ba      	ldrb	r2, [r7, #6]
 8004292:	429a      	cmp	r2, r3
 8004294:	d1ed      	bne.n	8004272 <USART_voidSendStringWithDelimiterSynch+0x16>
	}
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <main>:

#include "APP/APP.h"


int main(void){
 800429e:	b580      	push	{r7, lr}
 80042a0:	af00      	add	r7, sp, #0




	ECU3_Dashboard_APP_SETUP();
 80042a2:	f7fd fc23 	bl	8001aec <ECU3_Dashboard_APP_SETUP>

	while(1)
	{
		ECU3_Dashboard_APP_LOOP();
 80042a6:	f7fd fc4b 	bl	8001b40 <ECU3_Dashboard_APP_LOOP>
 80042aa:	e7fc      	b.n	80042a6 <main+0x8>

080042ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042ac:	480d      	ldr	r0, [pc, #52]	; (80042e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80042b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042b4:	480c      	ldr	r0, [pc, #48]	; (80042e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80042b6:	490d      	ldr	r1, [pc, #52]	; (80042ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80042b8:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <LoopForever+0xe>)
  movs r3, #0
 80042ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042bc:	e002      	b.n	80042c4 <LoopCopyDataInit>

080042be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042c2:	3304      	adds	r3, #4

080042c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042c8:	d3f9      	bcc.n	80042be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042cc:	4c0a      	ldr	r4, [pc, #40]	; (80042f8 <LoopForever+0x16>)
  movs r3, #0
 80042ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042d0:	e001      	b.n	80042d6 <LoopFillZerobss>

080042d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042d4:	3204      	adds	r2, #4

080042d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042d8:	d3fb      	bcc.n	80042d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042da:	f000 f811 	bl	8004300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042de:	f7ff ffde 	bl	800429e <main>

080042e2 <LoopForever>:

LoopForever:
    b LoopForever
 80042e2:	e7fe      	b.n	80042e2 <LoopForever>
  ldr   r0, =_estack
 80042e4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80042e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042ec:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80042f0:	0800484c 	.word	0x0800484c
  ldr r2, =_sbss
 80042f4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80042f8:	200001b0 	.word	0x200001b0

080042fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042fc:	e7fe      	b.n	80042fc <ADC1_2_IRQHandler>
	...

08004300 <__libc_init_array>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	2500      	movs	r5, #0
 8004304:	4e0c      	ldr	r6, [pc, #48]	; (8004338 <__libc_init_array+0x38>)
 8004306:	4c0d      	ldr	r4, [pc, #52]	; (800433c <__libc_init_array+0x3c>)
 8004308:	1ba4      	subs	r4, r4, r6
 800430a:	10a4      	asrs	r4, r4, #2
 800430c:	42a5      	cmp	r5, r4
 800430e:	d109      	bne.n	8004324 <__libc_init_array+0x24>
 8004310:	f000 f872 	bl	80043f8 <_init>
 8004314:	2500      	movs	r5, #0
 8004316:	4e0a      	ldr	r6, [pc, #40]	; (8004340 <__libc_init_array+0x40>)
 8004318:	4c0a      	ldr	r4, [pc, #40]	; (8004344 <__libc_init_array+0x44>)
 800431a:	1ba4      	subs	r4, r4, r6
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	42a5      	cmp	r5, r4
 8004320:	d105      	bne.n	800432e <__libc_init_array+0x2e>
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004328:	4798      	blx	r3
 800432a:	3501      	adds	r5, #1
 800432c:	e7ee      	b.n	800430c <__libc_init_array+0xc>
 800432e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004332:	4798      	blx	r3
 8004334:	3501      	adds	r5, #1
 8004336:	e7f2      	b.n	800431e <__libc_init_array+0x1e>
 8004338:	08004844 	.word	0x08004844
 800433c:	08004844 	.word	0x08004844
 8004340:	08004844 	.word	0x08004844
 8004344:	08004848 	.word	0x08004848

08004348 <__itoa>:
 8004348:	1e93      	subs	r3, r2, #2
 800434a:	2b22      	cmp	r3, #34	; 0x22
 800434c:	b510      	push	{r4, lr}
 800434e:	460c      	mov	r4, r1
 8004350:	d904      	bls.n	800435c <__itoa+0x14>
 8004352:	2300      	movs	r3, #0
 8004354:	461c      	mov	r4, r3
 8004356:	700b      	strb	r3, [r1, #0]
 8004358:	4620      	mov	r0, r4
 800435a:	bd10      	pop	{r4, pc}
 800435c:	2a0a      	cmp	r2, #10
 800435e:	d109      	bne.n	8004374 <__itoa+0x2c>
 8004360:	2800      	cmp	r0, #0
 8004362:	da07      	bge.n	8004374 <__itoa+0x2c>
 8004364:	232d      	movs	r3, #45	; 0x2d
 8004366:	700b      	strb	r3, [r1, #0]
 8004368:	2101      	movs	r1, #1
 800436a:	4240      	negs	r0, r0
 800436c:	4421      	add	r1, r4
 800436e:	f000 f805 	bl	800437c <__utoa>
 8004372:	e7f1      	b.n	8004358 <__itoa+0x10>
 8004374:	2100      	movs	r1, #0
 8004376:	e7f9      	b.n	800436c <__itoa+0x24>

08004378 <itoa>:
 8004378:	f7ff bfe6 	b.w	8004348 <__itoa>

0800437c <__utoa>:
 800437c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437e:	b08b      	sub	sp, #44	; 0x2c
 8004380:	4605      	mov	r5, r0
 8004382:	460c      	mov	r4, r1
 8004384:	466e      	mov	r6, sp
 8004386:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <__utoa+0x78>)
 8004388:	f103 0c20 	add.w	ip, r3, #32
 800438c:	4637      	mov	r7, r6
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
 8004392:	3308      	adds	r3, #8
 8004394:	c703      	stmia	r7!, {r0, r1}
 8004396:	4563      	cmp	r3, ip
 8004398:	463e      	mov	r6, r7
 800439a:	d1f7      	bne.n	800438c <__utoa+0x10>
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	791b      	ldrb	r3, [r3, #4]
 80043a0:	6038      	str	r0, [r7, #0]
 80043a2:	713b      	strb	r3, [r7, #4]
 80043a4:	1e93      	subs	r3, r2, #2
 80043a6:	2b22      	cmp	r3, #34	; 0x22
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	d904      	bls.n	80043b8 <__utoa+0x3c>
 80043ae:	7023      	strb	r3, [r4, #0]
 80043b0:	461c      	mov	r4, r3
 80043b2:	4620      	mov	r0, r4
 80043b4:	b00b      	add	sp, #44	; 0x2c
 80043b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b8:	1e66      	subs	r6, r4, #1
 80043ba:	fbb5 f0f2 	udiv	r0, r5, r2
 80043be:	fb02 5510 	mls	r5, r2, r0, r5
 80043c2:	af0a      	add	r7, sp, #40	; 0x28
 80043c4:	443d      	add	r5, r7
 80043c6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	f806 5f01 	strb.w	r5, [r6, #1]!
 80043d0:	4605      	mov	r5, r0
 80043d2:	b968      	cbnz	r0, 80043f0 <__utoa+0x74>
 80043d4:	4622      	mov	r2, r4
 80043d6:	5460      	strb	r0, [r4, r1]
 80043d8:	4423      	add	r3, r4
 80043da:	1b19      	subs	r1, r3, r4
 80043dc:	1b10      	subs	r0, r2, r4
 80043de:	4281      	cmp	r1, r0
 80043e0:	dde7      	ble.n	80043b2 <__utoa+0x36>
 80043e2:	7811      	ldrb	r1, [r2, #0]
 80043e4:	7818      	ldrb	r0, [r3, #0]
 80043e6:	f802 0b01 	strb.w	r0, [r2], #1
 80043ea:	f803 1901 	strb.w	r1, [r3], #-1
 80043ee:	e7f4      	b.n	80043da <__utoa+0x5e>
 80043f0:	460b      	mov	r3, r1
 80043f2:	e7e2      	b.n	80043ba <__utoa+0x3e>
 80043f4:	0800481d 	.word	0x0800481d

080043f8 <_init>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	bf00      	nop
 80043fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fe:	bc08      	pop	{r3}
 8004400:	469e      	mov	lr, r3
 8004402:	4770      	bx	lr

08004404 <_fini>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	bf00      	nop
 8004408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440a:	bc08      	pop	{r3}
 800440c:	469e      	mov	lr, r3
 800440e:	4770      	bx	lr
